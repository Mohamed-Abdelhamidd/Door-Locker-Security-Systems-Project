
MC1_HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000390a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000114  00800060  0000390a  0000399e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800174  00800174  00003ab2  2**0
                  ALLOC
  3 .stab         00003270  00000000  00000000  00003ab4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000012fb  00000000  00000000  00006d24  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000801f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000815f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000082cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009f18  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000ae03  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000bbb0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000bd10  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000bf9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c76b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 f1 19 	jmp	0x33e2	; 0x33e2 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 24 1a 	jmp	0x3448	; 0x3448 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e0       	ldi	r30, 0x0A	; 10
      68:	f9 e3       	ldi	r31, 0x39	; 57
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 37       	cpi	r26, 0x74	; 116
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 e7       	ldi	r26, 0x74	; 116
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 37       	cpi	r26, 0x77	; 119
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 83 1c 	jmp	0x3906	; 0x3906 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 07 1c 	jmp	0x380e	; 0x380e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ab e5       	ldi	r26, 0x5B	; 91
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 23 1c 	jmp	0x3846	; 0x3846 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 13 1c 	jmp	0x3826	; 0x3826 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 2f 1c 	jmp	0x385e	; 0x385e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 13 1c 	jmp	0x3826	; 0x3826 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 2f 1c 	jmp	0x385e	; 0x385e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 07 1c 	jmp	0x380e	; 0x380e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8b e5       	ldi	r24, 0x5B	; 91
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 23 1c 	jmp	0x3846	; 0x3846 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 13 1c 	jmp	0x3826	; 0x3826 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 2f 1c 	jmp	0x385e	; 0x385e <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 13 1c 	jmp	0x3826	; 0x3826 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 2f 1c 	jmp	0x385e	; 0x385e <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 13 1c 	jmp	0x3826	; 0x3826 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 2f 1c 	jmp	0x385e	; 0x385e <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 17 1c 	jmp	0x382e	; 0x382e <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 33 1c 	jmp	0x3866	; 0x3866 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:


#include "app.h"

int main()
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	APP_init();
     b4e:	0e 94 ac 05 	call	0xb58	; 0xb58 <APP_init>

	while(1)
	{
		APP_start();
     b52:	0e 94 ee 05 	call	0xbdc	; 0xbdc <APP_start>
     b56:	fd cf       	rjmp	.-6      	; 0xb52 <main+0xc>

00000b58 <APP_init>:
 *                      Functions Definitions                                  *
 *******************************************************************************/


void APP_init(void)
{
     b58:	df 93       	push	r29
     b5a:	cf 93       	push	r28
     b5c:	cd b7       	in	r28, 0x3d	; 61
     b5e:	de b7       	in	r29, 0x3e	; 62
     b60:	2a 97       	sbiw	r28, 0x0a	; 10
     b62:	0f b6       	in	r0, 0x3f	; 63
     b64:	f8 94       	cli
     b66:	de bf       	out	0x3e, r29	; 62
     b68:	0f be       	out	0x3f, r0	; 63
     b6a:	cd bf       	out	0x3d, r28	; 61
	/* Crate a UART configuration variable with the required properties */
	UART_Config_t config = {UART_8_DATA_BITS, UART_PARITY_DISABLED,
			UART_1_STOP_BIT, 9600};
     b6c:	ce 01       	movw	r24, r28
     b6e:	01 96       	adiw	r24, 0x01	; 1
     b70:	9f 83       	std	Y+7, r25	; 0x07
     b72:	8e 83       	std	Y+6, r24	; 0x06
     b74:	e3 e6       	ldi	r30, 0x63	; 99
     b76:	f1 e0       	ldi	r31, 0x01	; 1
     b78:	f9 87       	std	Y+9, r31	; 0x09
     b7a:	e8 87       	std	Y+8, r30	; 0x08
     b7c:	f5 e0       	ldi	r31, 0x05	; 5
     b7e:	fa 87       	std	Y+10, r31	; 0x0a
     b80:	e8 85       	ldd	r30, Y+8	; 0x08
     b82:	f9 85       	ldd	r31, Y+9	; 0x09
     b84:	00 80       	ld	r0, Z
     b86:	88 85       	ldd	r24, Y+8	; 0x08
     b88:	99 85       	ldd	r25, Y+9	; 0x09
     b8a:	01 96       	adiw	r24, 0x01	; 1
     b8c:	99 87       	std	Y+9, r25	; 0x09
     b8e:	88 87       	std	Y+8, r24	; 0x08
     b90:	ee 81       	ldd	r30, Y+6	; 0x06
     b92:	ff 81       	ldd	r31, Y+7	; 0x07
     b94:	00 82       	st	Z, r0
     b96:	8e 81       	ldd	r24, Y+6	; 0x06
     b98:	9f 81       	ldd	r25, Y+7	; 0x07
     b9a:	01 96       	adiw	r24, 0x01	; 1
     b9c:	9f 83       	std	Y+7, r25	; 0x07
     b9e:	8e 83       	std	Y+6, r24	; 0x06
     ba0:	9a 85       	ldd	r25, Y+10	; 0x0a
     ba2:	91 50       	subi	r25, 0x01	; 1
     ba4:	9a 87       	std	Y+10, r25	; 0x0a
     ba6:	ea 85       	ldd	r30, Y+10	; 0x0a
     ba8:	ee 23       	and	r30, r30
     baa:	51 f7       	brne	.-44     	; 0xb80 <APP_init+0x28>

	/* Enable Global Interrupt */
	SREG |= (1<<7);
     bac:	af e5       	ldi	r26, 0x5F	; 95
     bae:	b0 e0       	ldi	r27, 0x00	; 0
     bb0:	ef e5       	ldi	r30, 0x5F	; 95
     bb2:	f0 e0       	ldi	r31, 0x00	; 0
     bb4:	80 81       	ld	r24, Z
     bb6:	80 68       	ori	r24, 0x80	; 128
     bb8:	8c 93       	st	X, r24

	/* initialize LCD, UART modules */
	LCD_init();
     bba:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <LCD_init>
	UART_init(&config);
     bbe:	ce 01       	movw	r24, r28
     bc0:	01 96       	adiw	r24, 0x01	; 1
     bc2:	0e 94 e6 1a 	call	0x35cc	; 0x35cc <UART_init>

	/* set password at startup */
	setPass();
     bc6:	0e 94 23 06 	call	0xc46	; 0xc46 <setPass>

}
     bca:	2a 96       	adiw	r28, 0x0a	; 10
     bcc:	0f b6       	in	r0, 0x3f	; 63
     bce:	f8 94       	cli
     bd0:	de bf       	out	0x3e, r29	; 62
     bd2:	0f be       	out	0x3f, r0	; 63
     bd4:	cd bf       	out	0x3d, r28	; 61
     bd6:	cf 91       	pop	r28
     bd8:	df 91       	pop	r29
     bda:	08 95       	ret

00000bdc <APP_start>:
/*
 * Description :
 * This function is responsible for operating the system as requried
 */
void APP_start(void)
{
     bdc:	df 93       	push	r29
     bde:	cf 93       	push	r28
     be0:	00 d0       	rcall	.+0      	; 0xbe2 <APP_start+0x6>
     be2:	cd b7       	in	r28, 0x3d	; 61
     be4:	de b7       	in	r29, 0x3e	; 62
	uint8 isCorrect;		/* used to check if entered password matches system password */
	uint8 input = '\0'; 	/* used to get the user required action */
     be6:	19 82       	std	Y+1, r1	; 0x01


	/* Display main system options */
	LCD_clearScreen();
     be8:	0e 94 e7 19 	call	0x33ce	; 0x33ce <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0, " + : Open Door");
     bec:	20 e6       	ldi	r18, 0x60	; 96
     bee:	30 e0       	ldi	r19, 0x00	; 0
     bf0:	80 e0       	ldi	r24, 0x00	; 0
     bf2:	60 e0       	ldi	r22, 0x00	; 0
     bf4:	a9 01       	movw	r20, r18
     bf6:	0e 94 ab 19 	call	0x3356	; 0x3356 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1, 0, " - : Change Pass");
     bfa:	2f e6       	ldi	r18, 0x6F	; 111
     bfc:	30 e0       	ldi	r19, 0x00	; 0
     bfe:	81 e0       	ldi	r24, 0x01	; 1
     c00:	60 e0       	ldi	r22, 0x00	; 0
     c02:	a9 01       	movw	r20, r18
     c04:	0e 94 ab 19 	call	0x3356	; 0x3356 <LCD_displayStringRowColumn>

	/* get user required action, keep prompting till a valid input is entered */
	do
	{
		input = KEYPAD_getPressedKey();
     c08:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <KEYPAD_getPressedKey>
     c0c:	89 83       	std	Y+1, r24	; 0x01
	}while(input != '+' && input != '-');
     c0e:	89 81       	ldd	r24, Y+1	; 0x01
     c10:	8b 32       	cpi	r24, 0x2B	; 43
     c12:	19 f0       	breq	.+6      	; 0xc1a <APP_start+0x3e>
     c14:	89 81       	ldd	r24, Y+1	; 0x01
     c16:	8d 32       	cpi	r24, 0x2D	; 45
     c18:	b9 f7       	brne	.-18     	; 0xc08 <APP_start+0x2c>

	/* ask user for system password with 3 trials allowance */
	isCorrect = checkPassword_trials();
     c1a:	0e 94 3d 07 	call	0xe7a	; 0xe7a <checkPassword_trials>
     c1e:	8a 83       	std	Y+2, r24	; 0x02
	if(!isCorrect)
     c20:	8a 81       	ldd	r24, Y+2	; 0x02
     c22:	88 23       	and	r24, r24
     c24:	19 f4       	brne	.+6      	; 0xc2c <APP_start+0x50>
	{
		/* all the 3 trials are used, lock the system */
		lockSystem();
     c26:	0e 94 ce 07 	call	0xf9c	; 0xf9c <lockSystem>
     c2a:	08 c0       	rjmp	.+16     	; 0xc3c <APP_start+0x60>
		/* go to step 2 "main menu options"*/
		return;
	}

	/* Execute the required action */
	if('+' == input)
     c2c:	89 81       	ldd	r24, Y+1	; 0x01
     c2e:	8b 32       	cpi	r24, 0x2B	; 43
     c30:	19 f4       	brne	.+6      	; 0xc38 <APP_start+0x5c>
	{
		openDoor();
     c32:	0e 94 7b 07 	call	0xef6	; 0xef6 <openDoor>
     c36:	02 c0       	rjmp	.+4      	; 0xc3c <APP_start+0x60>
	}
	else
	{
		/* change the password */
		setPass();
     c38:	0e 94 23 06 	call	0xc46	; 0xc46 <setPass>
	}
}
     c3c:	0f 90       	pop	r0
     c3e:	0f 90       	pop	r0
     c40:	cf 91       	pop	r28
     c42:	df 91       	pop	r29
     c44:	08 95       	ret

00000c46 <setPass>:
/*
 * Description :
 * 		This function is responsible for setting and updating the password of the system
 */
void setPass(void)
{
     c46:	df 93       	push	r29
     c48:	cf 93       	push	r28
     c4a:	cd b7       	in	r28, 0x3d	; 61
     c4c:	de b7       	in	r29, 0x3e	; 62
     c4e:	a5 97       	sbiw	r28, 0x25	; 37
     c50:	0f b6       	in	r0, 0x3f	; 63
     c52:	f8 94       	cli
     c54:	de bf       	out	0x3e, r29	; 62
     c56:	0f be       	out	0x3f, r0	; 63
     c58:	cd bf       	out	0x3d, r28	; 61
	uint8 pass1[10] = ""; /* to store the first password */
     c5a:	18 8a       	std	Y+16, r1	; 0x10
     c5c:	19 8a       	std	Y+17, r1	; 0x11
     c5e:	1a 8a       	std	Y+18, r1	; 0x12
     c60:	1b 8a       	std	Y+19, r1	; 0x13
     c62:	86 e0       	ldi	r24, 0x06	; 6
     c64:	fe 01       	movw	r30, r28
     c66:	74 96       	adiw	r30, 0x14	; 20
     c68:	df 01       	movw	r26, r30
     c6a:	98 2f       	mov	r25, r24
     c6c:	1d 92       	st	X+, r1
     c6e:	9a 95       	dec	r25
     c70:	e9 f7       	brne	.-6      	; 0xc6c <setPass+0x26>
	uint8 pass2[10] = ""; /* to store the confirmation password */
     c72:	1a 8e       	std	Y+26, r1	; 0x1a
     c74:	1b 8e       	std	Y+27, r1	; 0x1b
     c76:	1c 8e       	std	Y+28, r1	; 0x1c
     c78:	1d 8e       	std	Y+29, r1	; 0x1d
     c7a:	86 e0       	ldi	r24, 0x06	; 6
     c7c:	fe 01       	movw	r30, r28
     c7e:	7e 96       	adiw	r30, 0x1e	; 30
     c80:	df 01       	movw	r26, r30
     c82:	98 2f       	mov	r25, r24
     c84:	1d 92       	st	X+, r1
     c86:	9a 95       	dec	r25
     c88:	e9 f7       	brne	.-6      	; 0xc84 <setPass+0x3e>
	uint8 pass1_size = 0; /* indicates pass1 length */
     c8a:	1c a2       	std	Y+36, r1	; 0x24
	uint8 pass2_size = 0; /* indicates pass2 length */
     c8c:	1d a2       	std	Y+37, r1	; 0x25

	uint8 matched = 0;	  /* flag that is set when pass1 && pass2 are identical */
     c8e:	1f 86       	std	Y+15, r1	; 0x0f

	do
	{
		/* prompt user for password */
		LCD_clearScreen();
     c90:	0e 94 e7 19 	call	0x33ce	; 0x33ce <LCD_clearScreen>
		LCD_displayStringRowColumn(0, 0, "Plz enter pass: ");
     c94:	20 e8       	ldi	r18, 0x80	; 128
     c96:	30 e0       	ldi	r19, 0x00	; 0
     c98:	80 e0       	ldi	r24, 0x00	; 0
     c9a:	60 e0       	ldi	r22, 0x00	; 0
     c9c:	a9 01       	movw	r20, r18
     c9e:	0e 94 ab 19 	call	0x3356	; 0x3356 <LCD_displayStringRowColumn>
		LCD_moveCursor(1, 0);
     ca2:	81 e0       	ldi	r24, 0x01	; 1
     ca4:	60 e0       	ldi	r22, 0x00	; 0
     ca6:	0e 94 69 19 	call	0x32d2	; 0x32d2 <LCD_moveCursor>

		/* get the password for the first time */
		getPass(pass1, &pass1_size);
     caa:	ce 01       	movw	r24, r28
     cac:	40 96       	adiw	r24, 0x10	; 16
     cae:	9e 01       	movw	r18, r28
     cb0:	2c 5d       	subi	r18, 0xDC	; 220
     cb2:	3f 4f       	sbci	r19, 0xFF	; 255
     cb4:	b9 01       	movw	r22, r18
     cb6:	0e 94 b5 08 	call	0x116a	; 0x116a <getPass>

		/* prompt user to confirm the password */
		LCD_displayStringRowColumn(0, 0, "Plz re-enter the");
     cba:	21 e9       	ldi	r18, 0x91	; 145
     cbc:	30 e0       	ldi	r19, 0x00	; 0
     cbe:	80 e0       	ldi	r24, 0x00	; 0
     cc0:	60 e0       	ldi	r22, 0x00	; 0
     cc2:	a9 01       	movw	r20, r18
     cc4:	0e 94 ab 19 	call	0x3356	; 0x3356 <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(1, 0, "same pass: ");
     cc8:	22 ea       	ldi	r18, 0xA2	; 162
     cca:	30 e0       	ldi	r19, 0x00	; 0
     ccc:	81 e0       	ldi	r24, 0x01	; 1
     cce:	60 e0       	ldi	r22, 0x00	; 0
     cd0:	a9 01       	movw	r20, r18
     cd2:	0e 94 ab 19 	call	0x3356	; 0x3356 <LCD_displayStringRowColumn>

		/* get the password for the second time */
		getPass(pass2, &pass2_size);
     cd6:	ce 01       	movw	r24, r28
     cd8:	4a 96       	adiw	r24, 0x1a	; 26
     cda:	9e 01       	movw	r18, r28
     cdc:	2b 5d       	subi	r18, 0xDB	; 219
     cde:	3f 4f       	sbci	r19, 0xFF	; 255
     ce0:	b9 01       	movw	r22, r18
     ce2:	0e 94 b5 08 	call	0x116a	; 0x116a <getPass>

		/* Check if the two passwords match*/
		if(pass1_size != pass2_size)
     ce6:	9c a1       	ldd	r25, Y+36	; 0x24
     ce8:	8d a1       	ldd	r24, Y+37	; 0x25
     cea:	98 17       	cp	r25, r24
     cec:	09 f4       	brne	.+2      	; 0xcf0 <setPass+0xaa>
     cee:	83 c0       	rjmp	.+262    	; 0xdf6 <setPass+0x1b0>
		{
			/* if the two passwords are of different sizes, they are already mismatched */
			LCD_clearScreen();
     cf0:	0e 94 e7 19 	call	0x33ce	; 0x33ce <LCD_clearScreen>
			LCD_displayStringRowColumn(0, 0, "Error!! ");
     cf4:	2e ea       	ldi	r18, 0xAE	; 174
     cf6:	30 e0       	ldi	r19, 0x00	; 0
     cf8:	80 e0       	ldi	r24, 0x00	; 0
     cfa:	60 e0       	ldi	r22, 0x00	; 0
     cfc:	a9 01       	movw	r20, r18
     cfe:	0e 94 ab 19 	call	0x3356	; 0x3356 <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(1, 0, "NOT MATCHED");
     d02:	27 eb       	ldi	r18, 0xB7	; 183
     d04:	30 e0       	ldi	r19, 0x00	; 0
     d06:	81 e0       	ldi	r24, 0x01	; 1
     d08:	60 e0       	ldi	r22, 0x00	; 0
     d0a:	a9 01       	movw	r20, r18
     d0c:	0e 94 ab 19 	call	0x3356	; 0x3356 <LCD_displayStringRowColumn>
     d10:	80 e0       	ldi	r24, 0x00	; 0
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	aa e7       	ldi	r26, 0x7A	; 122
     d16:	b4 e4       	ldi	r27, 0x44	; 68
     d18:	8b 87       	std	Y+11, r24	; 0x0b
     d1a:	9c 87       	std	Y+12, r25	; 0x0c
     d1c:	ad 87       	std	Y+13, r26	; 0x0d
     d1e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d20:	6b 85       	ldd	r22, Y+11	; 0x0b
     d22:	7c 85       	ldd	r23, Y+12	; 0x0c
     d24:	8d 85       	ldd	r24, Y+13	; 0x0d
     d26:	9e 85       	ldd	r25, Y+14	; 0x0e
     d28:	20 e0       	ldi	r18, 0x00	; 0
     d2a:	30 e0       	ldi	r19, 0x00	; 0
     d2c:	4a ef       	ldi	r20, 0xFA	; 250
     d2e:	54 e4       	ldi	r21, 0x44	; 68
     d30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d34:	dc 01       	movw	r26, r24
     d36:	cb 01       	movw	r24, r22
     d38:	8f 83       	std	Y+7, r24	; 0x07
     d3a:	98 87       	std	Y+8, r25	; 0x08
     d3c:	a9 87       	std	Y+9, r26	; 0x09
     d3e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d40:	6f 81       	ldd	r22, Y+7	; 0x07
     d42:	78 85       	ldd	r23, Y+8	; 0x08
     d44:	89 85       	ldd	r24, Y+9	; 0x09
     d46:	9a 85       	ldd	r25, Y+10	; 0x0a
     d48:	20 e0       	ldi	r18, 0x00	; 0
     d4a:	30 e0       	ldi	r19, 0x00	; 0
     d4c:	40 e8       	ldi	r20, 0x80	; 128
     d4e:	5f e3       	ldi	r21, 0x3F	; 63
     d50:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d54:	88 23       	and	r24, r24
     d56:	2c f4       	brge	.+10     	; 0xd62 <setPass+0x11c>
		__ticks = 1;
     d58:	81 e0       	ldi	r24, 0x01	; 1
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	9e 83       	std	Y+6, r25	; 0x06
     d5e:	8d 83       	std	Y+5, r24	; 0x05
     d60:	3f c0       	rjmp	.+126    	; 0xde0 <setPass+0x19a>
	else if (__tmp > 65535)
     d62:	6f 81       	ldd	r22, Y+7	; 0x07
     d64:	78 85       	ldd	r23, Y+8	; 0x08
     d66:	89 85       	ldd	r24, Y+9	; 0x09
     d68:	9a 85       	ldd	r25, Y+10	; 0x0a
     d6a:	20 e0       	ldi	r18, 0x00	; 0
     d6c:	3f ef       	ldi	r19, 0xFF	; 255
     d6e:	4f e7       	ldi	r20, 0x7F	; 127
     d70:	57 e4       	ldi	r21, 0x47	; 71
     d72:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d76:	18 16       	cp	r1, r24
     d78:	4c f5       	brge	.+82     	; 0xdcc <setPass+0x186>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d7a:	6b 85       	ldd	r22, Y+11	; 0x0b
     d7c:	7c 85       	ldd	r23, Y+12	; 0x0c
     d7e:	8d 85       	ldd	r24, Y+13	; 0x0d
     d80:	9e 85       	ldd	r25, Y+14	; 0x0e
     d82:	20 e0       	ldi	r18, 0x00	; 0
     d84:	30 e0       	ldi	r19, 0x00	; 0
     d86:	40 e2       	ldi	r20, 0x20	; 32
     d88:	51 e4       	ldi	r21, 0x41	; 65
     d8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d8e:	dc 01       	movw	r26, r24
     d90:	cb 01       	movw	r24, r22
     d92:	bc 01       	movw	r22, r24
     d94:	cd 01       	movw	r24, r26
     d96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d9a:	dc 01       	movw	r26, r24
     d9c:	cb 01       	movw	r24, r22
     d9e:	9e 83       	std	Y+6, r25	; 0x06
     da0:	8d 83       	std	Y+5, r24	; 0x05
     da2:	0f c0       	rjmp	.+30     	; 0xdc2 <setPass+0x17c>
     da4:	88 ec       	ldi	r24, 0xC8	; 200
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	9c 83       	std	Y+4, r25	; 0x04
     daa:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     dac:	8b 81       	ldd	r24, Y+3	; 0x03
     dae:	9c 81       	ldd	r25, Y+4	; 0x04
     db0:	01 97       	sbiw	r24, 0x01	; 1
     db2:	f1 f7       	brne	.-4      	; 0xdb0 <setPass+0x16a>
     db4:	9c 83       	std	Y+4, r25	; 0x04
     db6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     db8:	8d 81       	ldd	r24, Y+5	; 0x05
     dba:	9e 81       	ldd	r25, Y+6	; 0x06
     dbc:	01 97       	sbiw	r24, 0x01	; 1
     dbe:	9e 83       	std	Y+6, r25	; 0x06
     dc0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dc2:	8d 81       	ldd	r24, Y+5	; 0x05
     dc4:	9e 81       	ldd	r25, Y+6	; 0x06
     dc6:	00 97       	sbiw	r24, 0x00	; 0
     dc8:	69 f7       	brne	.-38     	; 0xda4 <setPass+0x15e>
     dca:	4a c0       	rjmp	.+148    	; 0xe60 <setPass+0x21a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     dcc:	6f 81       	ldd	r22, Y+7	; 0x07
     dce:	78 85       	ldd	r23, Y+8	; 0x08
     dd0:	89 85       	ldd	r24, Y+9	; 0x09
     dd2:	9a 85       	ldd	r25, Y+10	; 0x0a
     dd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dd8:	dc 01       	movw	r26, r24
     dda:	cb 01       	movw	r24, r22
     ddc:	9e 83       	std	Y+6, r25	; 0x06
     dde:	8d 83       	std	Y+5, r24	; 0x05
     de0:	8d 81       	ldd	r24, Y+5	; 0x05
     de2:	9e 81       	ldd	r25, Y+6	; 0x06
     de4:	9a 83       	std	Y+2, r25	; 0x02
     de6:	89 83       	std	Y+1, r24	; 0x01
     de8:	89 81       	ldd	r24, Y+1	; 0x01
     dea:	9a 81       	ldd	r25, Y+2	; 0x02
     dec:	01 97       	sbiw	r24, 0x01	; 1
     dee:	f1 f7       	brne	.-4      	; 0xdec <setPass+0x1a6>
     df0:	9a 83       	std	Y+2, r25	; 0x02
     df2:	89 83       	std	Y+1, r24	; 0x01
     df4:	35 c0       	rjmp	.+106    	; 0xe60 <setPass+0x21a>
			continue;
		}
		else
		{
			/* if the 2 passwords are the same size, check if they match */
			matched = isPassMatched(pass1, pass2, pass1_size);
     df6:	4c a1       	ldd	r20, Y+36	; 0x24
     df8:	ce 01       	movw	r24, r28
     dfa:	40 96       	adiw	r24, 0x10	; 16
     dfc:	9e 01       	movw	r18, r28
     dfe:	26 5e       	subi	r18, 0xE6	; 230
     e00:	3f 4f       	sbci	r19, 0xFF	; 255
     e02:	b9 01       	movw	r22, r18
     e04:	0e 94 02 0a 	call	0x1404	; 0x1404 <isPassMatched>
     e08:	8f 87       	std	Y+15, r24	; 0x0f

			LCD_clearScreen();
     e0a:	0e 94 e7 19 	call	0x33ce	; 0x33ce <LCD_clearScreen>

			if(matched)
     e0e:	8f 85       	ldd	r24, Y+15	; 0x0f
     e10:	88 23       	and	r24, r24
     e12:	b1 f0       	breq	.+44     	; 0xe40 <setPass+0x1fa>
			{
				/* if matched, send the password to the Control_ECU to be stored in EEPROM */
				LCD_displayStringRowColumn(0, 0, "Pass set");
     e14:	23 ec       	ldi	r18, 0xC3	; 195
     e16:	30 e0       	ldi	r19, 0x00	; 0
     e18:	80 e0       	ldi	r24, 0x00	; 0
     e1a:	60 e0       	ldi	r22, 0x00	; 0
     e1c:	a9 01       	movw	r20, r18
     e1e:	0e 94 ab 19 	call	0x3356	; 0x3356 <LCD_displayStringRowColumn>
				LCD_displayStringRowColumn(1, 0, "Successfully");
     e22:	2c ec       	ldi	r18, 0xCC	; 204
     e24:	30 e0       	ldi	r19, 0x00	; 0
     e26:	81 e0       	ldi	r24, 0x01	; 1
     e28:	60 e0       	ldi	r22, 0x00	; 0
     e2a:	a9 01       	movw	r20, r18
     e2c:	0e 94 ab 19 	call	0x3356	; 0x3356 <LCD_displayStringRowColumn>

				UART_sendByte('0');
     e30:	80 e3       	ldi	r24, 0x30	; 48
     e32:	0e 94 50 1b 	call	0x36a0	; 0x36a0 <UART_sendByte>
				UART_sendString(pass1);
     e36:	ce 01       	movw	r24, r28
     e38:	40 96       	adiw	r24, 0x10	; 16
     e3a:	0e 94 76 1b 	call	0x36ec	; 0x36ec <UART_sendString>
     e3e:	0e c0       	rjmp	.+28     	; 0xe5c <setPass+0x216>

			}
			else
			{
				/* if not matched, print error messages and prompt from the beginning */
				LCD_displayStringRowColumn(0, 0, "Error!! ");
     e40:	2e ea       	ldi	r18, 0xAE	; 174
     e42:	30 e0       	ldi	r19, 0x00	; 0
     e44:	80 e0       	ldi	r24, 0x00	; 0
     e46:	60 e0       	ldi	r22, 0x00	; 0
     e48:	a9 01       	movw	r20, r18
     e4a:	0e 94 ab 19 	call	0x3356	; 0x3356 <LCD_displayStringRowColumn>
				LCD_displayStringRowColumn(1, 0, "NOT MATCHED");
     e4e:	27 eb       	ldi	r18, 0xB7	; 183
     e50:	30 e0       	ldi	r19, 0x00	; 0
     e52:	81 e0       	ldi	r24, 0x01	; 1
     e54:	60 e0       	ldi	r22, 0x00	; 0
     e56:	a9 01       	movw	r20, r18
     e58:	0e 94 ab 19 	call	0x3356	; 0x3356 <LCD_displayStringRowColumn>
			}
			TIMER1_delay_1sec();
     e5c:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <TIMER1_delay_1sec>
		}
	}while(!matched); /* keep prompting for a correct password to be set */
     e60:	8f 85       	ldd	r24, Y+15	; 0x0f
     e62:	88 23       	and	r24, r24
     e64:	09 f4       	brne	.+2      	; 0xe68 <setPass+0x222>
     e66:	14 cf       	rjmp	.-472    	; 0xc90 <setPass+0x4a>
}
     e68:	a5 96       	adiw	r28, 0x25	; 37
     e6a:	0f b6       	in	r0, 0x3f	; 63
     e6c:	f8 94       	cli
     e6e:	de bf       	out	0x3e, r29	; 62
     e70:	0f be       	out	0x3f, r0	; 63
     e72:	cd bf       	out	0x3d, r28	; 61
     e74:	cf 91       	pop	r28
     e76:	df 91       	pop	r29
     e78:	08 95       	ret

00000e7a <checkPassword_trials>:
 * Return:
 * 			1 Password is correct.
 * 		   	0 All trials are used without password being correct
 */
uint8 checkPassword_trials(void)
{
     e7a:	df 93       	push	r29
     e7c:	cf 93       	push	r28
     e7e:	00 d0       	rcall	.+0      	; 0xe80 <checkPassword_trials+0x6>
     e80:	00 d0       	rcall	.+0      	; 0xe82 <checkPassword_trials+0x8>
     e82:	cd b7       	in	r28, 0x3d	; 61
     e84:	de b7       	in	r29, 0x3e	; 62
	uint8 maxTrials = 3;
     e86:	83 e0       	ldi	r24, 0x03	; 3
     e88:	8a 83       	std	Y+2, r24	; 0x02
     e8a:	1f c0       	rjmp	.+62     	; 0xeca <checkPassword_trials+0x50>
	{

		/* prompt user to enter the system password to execute the required action,
		 * then check if password is correct
		 */
		isCorrect = verifyPass_ControlECU();
     e8c:	0e 94 02 08 	call	0x1004	; 0x1004 <verifyPass_ControlECU>
     e90:	89 83       	std	Y+1, r24	; 0x01

		if ('1' == isCorrect)
     e92:	89 81       	ldd	r24, Y+1	; 0x01
     e94:	81 33       	cpi	r24, 0x31	; 49
     e96:	71 f4       	brne	.+28     	; 0xeb4 <checkPassword_trials+0x3a>
		{
			/* password is correct */
			LCD_clearScreen();
     e98:	0e 94 e7 19 	call	0x33ce	; 0x33ce <LCD_clearScreen>
			LCD_displayStringRowColumn(0, 0, "ACCESS GRANTED");
     e9c:	29 ed       	ldi	r18, 0xD9	; 217
     e9e:	30 e0       	ldi	r19, 0x00	; 0
     ea0:	80 e0       	ldi	r24, 0x00	; 0
     ea2:	60 e0       	ldi	r22, 0x00	; 0
     ea4:	a9 01       	movw	r20, r18
     ea6:	0e 94 ab 19 	call	0x3356	; 0x3356 <LCD_displayStringRowColumn>
			TIMER1_delay_1sec();
     eaa:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <TIMER1_delay_1sec>
			return 1;
     eae:	81 e0       	ldi	r24, 0x01	; 1
     eb0:	8b 83       	std	Y+3, r24	; 0x03
     eb2:	19 c0       	rjmp	.+50     	; 0xee6 <checkPassword_trials+0x6c>
		}
		else{
		/* if password is false */
		LCD_clearScreen();
     eb4:	0e 94 e7 19 	call	0x33ce	; 0x33ce <LCD_clearScreen>
		LCD_displayStringRowColumn(0, 0, "ACCESS DENIED");
     eb8:	28 ee       	ldi	r18, 0xE8	; 232
     eba:	30 e0       	ldi	r19, 0x00	; 0
     ebc:	80 e0       	ldi	r24, 0x00	; 0
     ebe:	60 e0       	ldi	r22, 0x00	; 0
     ec0:	a9 01       	movw	r20, r18
     ec2:	0e 94 ab 19 	call	0x3356	; 0x3356 <LCD_displayStringRowColumn>
		TIMER1_delay_1sec();
     ec6:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <TIMER1_delay_1sec>
uint8 checkPassword_trials(void)
{
	uint8 maxTrials = 3;
	uint8 isCorrect;

	while(maxTrials--)
     eca:	8a 81       	ldd	r24, Y+2	; 0x02
     ecc:	8c 83       	std	Y+4, r24	; 0x04
     ece:	8c 81       	ldd	r24, Y+4	; 0x04
     ed0:	88 23       	and	r24, r24
     ed2:	11 f0       	breq	.+4      	; 0xed8 <checkPassword_trials+0x5e>
     ed4:	81 e0       	ldi	r24, 0x01	; 1
     ed6:	8c 83       	std	Y+4, r24	; 0x04
     ed8:	8c 81       	ldd	r24, Y+4	; 0x04
     eda:	9a 81       	ldd	r25, Y+2	; 0x02
     edc:	91 50       	subi	r25, 0x01	; 1
     ede:	9a 83       	std	Y+2, r25	; 0x02
     ee0:	88 23       	and	r24, r24
     ee2:	a1 f6       	brne	.-88     	; 0xe8c <checkPassword_trials+0x12>
		LCD_displayStringRowColumn(0, 0, "ACCESS DENIED");
		TIMER1_delay_1sec();
		}
	}
	/* all 3 trials are used without password being correct */
	return 0;
     ee4:	1b 82       	std	Y+3, r1	; 0x03
     ee6:	8b 81       	ldd	r24, Y+3	; 0x03
}
     ee8:	0f 90       	pop	r0
     eea:	0f 90       	pop	r0
     eec:	0f 90       	pop	r0
     eee:	0f 90       	pop	r0
     ef0:	cf 91       	pop	r28
     ef2:	df 91       	pop	r29
     ef4:	08 95       	ret

00000ef6 <openDoor>:
/*
 * Description :
 * 			This function is responsible for executing the steps required to open the door
 */
void openDoor(void)
{
     ef6:	df 93       	push	r29
     ef8:	cf 93       	push	r28
     efa:	00 d0       	rcall	.+0      	; 0xefc <openDoor+0x6>
     efc:	0f 92       	push	r0
     efe:	cd b7       	in	r28, 0x3d	; 61
     f00:	de b7       	in	r29, 0x3e	; 62
	int count_down = 3;
     f02:	83 e0       	ldi	r24, 0x03	; 3
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	9a 83       	std	Y+2, r25	; 0x02
     f08:	89 83       	std	Y+1, r24	; 0x01
	/* Send a command to control_ECU to open the door */
	UART_sendByte('2');
     f0a:	82 e3       	ldi	r24, 0x32	; 50
     f0c:	0e 94 50 1b 	call	0x36a0	; 0x36a0 <UART_sendByte>
	/* display opening message for 15 seconds */
	LCD_clearScreen();
     f10:	0e 94 e7 19 	call	0x33ce	; 0x33ce <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0, "Door is Unlocking");
     f14:	26 ef       	ldi	r18, 0xF6	; 246
     f16:	30 e0       	ldi	r19, 0x00	; 0
     f18:	80 e0       	ldi	r24, 0x00	; 0
     f1a:	60 e0       	ldi	r22, 0x00	; 0
     f1c:	a9 01       	movw	r20, r18
     f1e:	0e 94 ab 19 	call	0x3356	; 0x3356 <LCD_displayStringRowColumn>
	TIMER1_delay_15sec();
     f22:	0e 94 3c 0a 	call	0x1478	; 0x1478 <TIMER1_delay_15sec>

	/* display time remaining to lock the door */
	LCD_clearScreen();
     f26:	0e 94 e7 19 	call	0x33ce	; 0x33ce <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0, "Door locks in");
     f2a:	28 e0       	ldi	r18, 0x08	; 8
     f2c:	31 e0       	ldi	r19, 0x01	; 1
     f2e:	80 e0       	ldi	r24, 0x00	; 0
     f30:	60 e0       	ldi	r22, 0x00	; 0
     f32:	a9 01       	movw	r20, r18
     f34:	0e 94 ab 19 	call	0x3356	; 0x3356 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1, 8, "3");
     f38:	26 e1       	ldi	r18, 0x16	; 22
     f3a:	31 e0       	ldi	r19, 0x01	; 1
     f3c:	81 e0       	ldi	r24, 0x01	; 1
     f3e:	68 e0       	ldi	r22, 0x08	; 8
     f40:	a9 01       	movw	r20, r18
     f42:	0e 94 ab 19 	call	0x3356	; 0x3356 <LCD_displayStringRowColumn>
     f46:	0a c0       	rjmp	.+20     	; 0xf5c <openDoor+0x66>

	while(count_down--)
	{
		/* update count_down variable every 1 second */
		TIMER1_delay_1sec();
     f48:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <TIMER1_delay_1sec>
		LCD_moveCursor(1, 8);
     f4c:	81 e0       	ldi	r24, 0x01	; 1
     f4e:	68 e0       	ldi	r22, 0x08	; 8
     f50:	0e 94 69 19 	call	0x32d2	; 0x32d2 <LCD_moveCursor>
		LCD_intgerToString(count_down);
     f54:	89 81       	ldd	r24, Y+1	; 0x01
     f56:	9a 81       	ldd	r25, Y+2	; 0x02
     f58:	0e 94 c4 19 	call	0x3388	; 0x3388 <LCD_intgerToString>
	/* display time remaining to lock the door */
	LCD_clearScreen();
	LCD_displayStringRowColumn(0, 0, "Door locks in");
	LCD_displayStringRowColumn(1, 8, "3");

	while(count_down--)
     f5c:	1b 82       	std	Y+3, r1	; 0x03
     f5e:	89 81       	ldd	r24, Y+1	; 0x01
     f60:	9a 81       	ldd	r25, Y+2	; 0x02
     f62:	00 97       	sbiw	r24, 0x00	; 0
     f64:	11 f0       	breq	.+4      	; 0xf6a <openDoor+0x74>
     f66:	81 e0       	ldi	r24, 0x01	; 1
     f68:	8b 83       	std	Y+3, r24	; 0x03
     f6a:	89 81       	ldd	r24, Y+1	; 0x01
     f6c:	9a 81       	ldd	r25, Y+2	; 0x02
     f6e:	01 97       	sbiw	r24, 0x01	; 1
     f70:	9a 83       	std	Y+2, r25	; 0x02
     f72:	89 83       	std	Y+1, r24	; 0x01
     f74:	8b 81       	ldd	r24, Y+3	; 0x03
     f76:	88 23       	and	r24, r24
     f78:	39 f7       	brne	.-50     	; 0xf48 <openDoor+0x52>
		LCD_moveCursor(1, 8);
		LCD_intgerToString(count_down);
	}

	/* display locking the door warning */
	LCD_clearScreen();
     f7a:	0e 94 e7 19 	call	0x33ce	; 0x33ce <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0, "Door is locking  ");
     f7e:	28 e1       	ldi	r18, 0x18	; 24
     f80:	31 e0       	ldi	r19, 0x01	; 1
     f82:	80 e0       	ldi	r24, 0x00	; 0
     f84:	60 e0       	ldi	r22, 0x00	; 0
     f86:	a9 01       	movw	r20, r18
     f88:	0e 94 ab 19 	call	0x3356	; 0x3356 <LCD_displayStringRowColumn>
	TIMER1_delay_15sec();
     f8c:	0e 94 3c 0a 	call	0x1478	; 0x1478 <TIMER1_delay_15sec>
}
     f90:	0f 90       	pop	r0
     f92:	0f 90       	pop	r0
     f94:	0f 90       	pop	r0
     f96:	cf 91       	pop	r28
     f98:	df 91       	pop	r29
     f9a:	08 95       	ret

00000f9c <lockSystem>:
/*
 * Description :
 * 			This function is responsible for locking the systems when all password trials are used
 */
void lockSystem(void)
{
     f9c:	df 93       	push	r29
     f9e:	cf 93       	push	r28
     fa0:	00 d0       	rcall	.+0      	; 0xfa2 <lockSystem+0x6>
     fa2:	0f 92       	push	r0
     fa4:	cd b7       	in	r28, 0x3d	; 61
     fa6:	de b7       	in	r29, 0x3e	; 62
	int timer_counter = 0; /* used to repeat the 15sec delay function to get 1 min*/
     fa8:	1a 82       	std	Y+2, r1	; 0x02
     faa:	19 82       	std	Y+1, r1	; 0x01
	/* activate buzzer for 1 minute "send relative signal to control_mcu" */
	UART_sendByte('3');
     fac:	83 e3       	ldi	r24, 0x33	; 51
     fae:	0e 94 50 1b 	call	0x36a0	; 0x36a0 <UART_sendByte>

	/* display error message on lcd for 1 minute */
	LCD_clearScreen();
     fb2:	0e 94 e7 19 	call	0x33ce	; 0x33ce <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0, "MAX TRIALS USED");
     fb6:	2a e2       	ldi	r18, 0x2A	; 42
     fb8:	31 e0       	ldi	r19, 0x01	; 1
     fba:	80 e0       	ldi	r24, 0x00	; 0
     fbc:	60 e0       	ldi	r22, 0x00	; 0
     fbe:	a9 01       	movw	r20, r18
     fc0:	0e 94 ab 19 	call	0x3356	; 0x3356 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1, 0, "SYSTEM IS LOCKED");
     fc4:	2a e3       	ldi	r18, 0x3A	; 58
     fc6:	31 e0       	ldi	r19, 0x01	; 1
     fc8:	81 e0       	ldi	r24, 0x01	; 1
     fca:	60 e0       	ldi	r22, 0x00	; 0
     fcc:	a9 01       	movw	r20, r18
     fce:	0e 94 ab 19 	call	0x3356	; 0x3356 <LCD_displayStringRowColumn>
     fd2:	02 c0       	rjmp	.+4      	; 0xfd8 <lockSystem+0x3c>
	/* no input received */

	/* Delay 1 minute */
	while(timer_counter++ < 4)
	{
		TIMER1_delay_15sec();
     fd4:	0e 94 3c 0a 	call	0x1478	; 0x1478 <TIMER1_delay_15sec>
	LCD_displayStringRowColumn(0, 0, "MAX TRIALS USED");
	LCD_displayStringRowColumn(1, 0, "SYSTEM IS LOCKED");
	/* no input received */

	/* Delay 1 minute */
	while(timer_counter++ < 4)
     fd8:	1b 82       	std	Y+3, r1	; 0x03
     fda:	89 81       	ldd	r24, Y+1	; 0x01
     fdc:	9a 81       	ldd	r25, Y+2	; 0x02
     fde:	84 30       	cpi	r24, 0x04	; 4
     fe0:	91 05       	cpc	r25, r1
     fe2:	14 f4       	brge	.+4      	; 0xfe8 <lockSystem+0x4c>
     fe4:	81 e0       	ldi	r24, 0x01	; 1
     fe6:	8b 83       	std	Y+3, r24	; 0x03
     fe8:	89 81       	ldd	r24, Y+1	; 0x01
     fea:	9a 81       	ldd	r25, Y+2	; 0x02
     fec:	01 96       	adiw	r24, 0x01	; 1
     fee:	9a 83       	std	Y+2, r25	; 0x02
     ff0:	89 83       	std	Y+1, r24	; 0x01
     ff2:	8b 81       	ldd	r24, Y+3	; 0x03
     ff4:	88 23       	and	r24, r24
     ff6:	71 f7       	brne	.-36     	; 0xfd4 <lockSystem+0x38>
	{
		TIMER1_delay_15sec();
	}
}
     ff8:	0f 90       	pop	r0
     ffa:	0f 90       	pop	r0
     ffc:	0f 90       	pop	r0
     ffe:	cf 91       	pop	r28
    1000:	df 91       	pop	r29
    1002:	08 95       	ret

00001004 <verifyPass_ControlECU>:
 * Return:
 * 			'1' Password is correct.
 * 		   	'0' Password is false.
 */
char verifyPass_ControlECU(void)
{
    1004:	df 93       	push	r29
    1006:	cf 93       	push	r28
    1008:	cd b7       	in	r28, 0x3d	; 61
    100a:	de b7       	in	r29, 0x3e	; 62
    100c:	6a 97       	sbiw	r28, 0x1a	; 26
    100e:	0f b6       	in	r0, 0x3f	; 63
    1010:	f8 94       	cli
    1012:	de bf       	out	0x3e, r29	; 62
    1014:	0f be       	out	0x3f, r0	; 63
    1016:	cd bf       	out	0x3d, r28	; 61
	uint8 response = 0;		/* flag that is set if entered password matches the system password */
    1018:	1f 86       	std	Y+15, r1	; 0x0f
	uint8 pass[10] = "";	/* to store the user entered password */
    101a:	18 8a       	std	Y+16, r1	; 0x10
    101c:	19 8a       	std	Y+17, r1	; 0x11
    101e:	1a 8a       	std	Y+18, r1	; 0x12
    1020:	1b 8a       	std	Y+19, r1	; 0x13
    1022:	86 e0       	ldi	r24, 0x06	; 6
    1024:	fe 01       	movw	r30, r28
    1026:	74 96       	adiw	r30, 0x14	; 20
    1028:	df 01       	movw	r26, r30
    102a:	98 2f       	mov	r25, r24
    102c:	1d 92       	st	X+, r1
    102e:	9a 95       	dec	r25
    1030:	e9 f7       	brne	.-6      	; 0x102c <verifyPass_ControlECU+0x28>
	uint8 pass_size = 0;	/* to indicate the user entered password size */
    1032:	1a 8e       	std	Y+26, r1	; 0x1a

	/* prompt for password */
	LCD_clearScreen();
    1034:	0e 94 e7 19 	call	0x33ce	; 0x33ce <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0, "Plz enter pass:");
    1038:	2b e4       	ldi	r18, 0x4B	; 75
    103a:	31 e0       	ldi	r19, 0x01	; 1
    103c:	80 e0       	ldi	r24, 0x00	; 0
    103e:	60 e0       	ldi	r22, 0x00	; 0
    1040:	a9 01       	movw	r20, r18
    1042:	0e 94 ab 19 	call	0x3356	; 0x3356 <LCD_displayStringRowColumn>
	LCD_moveCursor(1, 0);
    1046:	81 e0       	ldi	r24, 0x01	; 1
    1048:	60 e0       	ldi	r22, 0x00	; 0
    104a:	0e 94 69 19 	call	0x32d2	; 0x32d2 <LCD_moveCursor>

	/* get user entered password */
	getPass(pass, &pass_size);
    104e:	ce 01       	movw	r24, r28
    1050:	40 96       	adiw	r24, 0x10	; 16
    1052:	9e 01       	movw	r18, r28
    1054:	26 5e       	subi	r18, 0xE6	; 230
    1056:	3f 4f       	sbci	r19, 0xFF	; 255
    1058:	b9 01       	movw	r22, r18
    105a:	0e 94 b5 08 	call	0x116a	; 0x116a <getPass>

	/* send the password to the Control_ECU to be check with system password */
	UART_sendByte('1');
    105e:	81 e3       	ldi	r24, 0x31	; 49
    1060:	0e 94 50 1b 	call	0x36a0	; 0x36a0 <UART_sendByte>
    1064:	80 e0       	ldi	r24, 0x00	; 0
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	a0 e2       	ldi	r26, 0x20	; 32
    106a:	b1 e4       	ldi	r27, 0x41	; 65
    106c:	8b 87       	std	Y+11, r24	; 0x0b
    106e:	9c 87       	std	Y+12, r25	; 0x0c
    1070:	ad 87       	std	Y+13, r26	; 0x0d
    1072:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1074:	6b 85       	ldd	r22, Y+11	; 0x0b
    1076:	7c 85       	ldd	r23, Y+12	; 0x0c
    1078:	8d 85       	ldd	r24, Y+13	; 0x0d
    107a:	9e 85       	ldd	r25, Y+14	; 0x0e
    107c:	20 e0       	ldi	r18, 0x00	; 0
    107e:	30 e0       	ldi	r19, 0x00	; 0
    1080:	4a ef       	ldi	r20, 0xFA	; 250
    1082:	54 e4       	ldi	r21, 0x44	; 68
    1084:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1088:	dc 01       	movw	r26, r24
    108a:	cb 01       	movw	r24, r22
    108c:	8f 83       	std	Y+7, r24	; 0x07
    108e:	98 87       	std	Y+8, r25	; 0x08
    1090:	a9 87       	std	Y+9, r26	; 0x09
    1092:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1094:	6f 81       	ldd	r22, Y+7	; 0x07
    1096:	78 85       	ldd	r23, Y+8	; 0x08
    1098:	89 85       	ldd	r24, Y+9	; 0x09
    109a:	9a 85       	ldd	r25, Y+10	; 0x0a
    109c:	20 e0       	ldi	r18, 0x00	; 0
    109e:	30 e0       	ldi	r19, 0x00	; 0
    10a0:	40 e8       	ldi	r20, 0x80	; 128
    10a2:	5f e3       	ldi	r21, 0x3F	; 63
    10a4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    10a8:	88 23       	and	r24, r24
    10aa:	2c f4       	brge	.+10     	; 0x10b6 <verifyPass_ControlECU+0xb2>
		__ticks = 1;
    10ac:	81 e0       	ldi	r24, 0x01	; 1
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	9e 83       	std	Y+6, r25	; 0x06
    10b2:	8d 83       	std	Y+5, r24	; 0x05
    10b4:	3f c0       	rjmp	.+126    	; 0x1134 <verifyPass_ControlECU+0x130>
	else if (__tmp > 65535)
    10b6:	6f 81       	ldd	r22, Y+7	; 0x07
    10b8:	78 85       	ldd	r23, Y+8	; 0x08
    10ba:	89 85       	ldd	r24, Y+9	; 0x09
    10bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    10be:	20 e0       	ldi	r18, 0x00	; 0
    10c0:	3f ef       	ldi	r19, 0xFF	; 255
    10c2:	4f e7       	ldi	r20, 0x7F	; 127
    10c4:	57 e4       	ldi	r21, 0x47	; 71
    10c6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10ca:	18 16       	cp	r1, r24
    10cc:	4c f5       	brge	.+82     	; 0x1120 <verifyPass_ControlECU+0x11c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    10d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    10d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    10d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    10d6:	20 e0       	ldi	r18, 0x00	; 0
    10d8:	30 e0       	ldi	r19, 0x00	; 0
    10da:	40 e2       	ldi	r20, 0x20	; 32
    10dc:	51 e4       	ldi	r21, 0x41	; 65
    10de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10e2:	dc 01       	movw	r26, r24
    10e4:	cb 01       	movw	r24, r22
    10e6:	bc 01       	movw	r22, r24
    10e8:	cd 01       	movw	r24, r26
    10ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10ee:	dc 01       	movw	r26, r24
    10f0:	cb 01       	movw	r24, r22
    10f2:	9e 83       	std	Y+6, r25	; 0x06
    10f4:	8d 83       	std	Y+5, r24	; 0x05
    10f6:	0f c0       	rjmp	.+30     	; 0x1116 <verifyPass_ControlECU+0x112>
    10f8:	88 ec       	ldi	r24, 0xC8	; 200
    10fa:	90 e0       	ldi	r25, 0x00	; 0
    10fc:	9c 83       	std	Y+4, r25	; 0x04
    10fe:	8b 83       	std	Y+3, r24	; 0x03
    1100:	8b 81       	ldd	r24, Y+3	; 0x03
    1102:	9c 81       	ldd	r25, Y+4	; 0x04
    1104:	01 97       	sbiw	r24, 0x01	; 1
    1106:	f1 f7       	brne	.-4      	; 0x1104 <verifyPass_ControlECU+0x100>
    1108:	9c 83       	std	Y+4, r25	; 0x04
    110a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    110c:	8d 81       	ldd	r24, Y+5	; 0x05
    110e:	9e 81       	ldd	r25, Y+6	; 0x06
    1110:	01 97       	sbiw	r24, 0x01	; 1
    1112:	9e 83       	std	Y+6, r25	; 0x06
    1114:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1116:	8d 81       	ldd	r24, Y+5	; 0x05
    1118:	9e 81       	ldd	r25, Y+6	; 0x06
    111a:	00 97       	sbiw	r24, 0x00	; 0
    111c:	69 f7       	brne	.-38     	; 0x10f8 <verifyPass_ControlECU+0xf4>
    111e:	14 c0       	rjmp	.+40     	; 0x1148 <verifyPass_ControlECU+0x144>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1120:	6f 81       	ldd	r22, Y+7	; 0x07
    1122:	78 85       	ldd	r23, Y+8	; 0x08
    1124:	89 85       	ldd	r24, Y+9	; 0x09
    1126:	9a 85       	ldd	r25, Y+10	; 0x0a
    1128:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    112c:	dc 01       	movw	r26, r24
    112e:	cb 01       	movw	r24, r22
    1130:	9e 83       	std	Y+6, r25	; 0x06
    1132:	8d 83       	std	Y+5, r24	; 0x05
    1134:	8d 81       	ldd	r24, Y+5	; 0x05
    1136:	9e 81       	ldd	r25, Y+6	; 0x06
    1138:	9a 83       	std	Y+2, r25	; 0x02
    113a:	89 83       	std	Y+1, r24	; 0x01
    113c:	89 81       	ldd	r24, Y+1	; 0x01
    113e:	9a 81       	ldd	r25, Y+2	; 0x02
    1140:	01 97       	sbiw	r24, 0x01	; 1
    1142:	f1 f7       	brne	.-4      	; 0x1140 <verifyPass_ControlECU+0x13c>
    1144:	9a 83       	std	Y+2, r25	; 0x02
    1146:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	UART_sendString(pass);
    1148:	ce 01       	movw	r24, r28
    114a:	40 96       	adiw	r24, 0x10	; 16
    114c:	0e 94 76 1b 	call	0x36ec	; 0x36ec <UART_sendString>

	/* receive Control_ECU response */
	response = UART_recieveByte();
    1150:	0e 94 67 1b 	call	0x36ce	; 0x36ce <UART_recieveByte>
    1154:	8f 87       	std	Y+15, r24	; 0x0f
	return response;
    1156:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    1158:	6a 96       	adiw	r28, 0x1a	; 26
    115a:	0f b6       	in	r0, 0x3f	; 63
    115c:	f8 94       	cli
    115e:	de bf       	out	0x3e, r29	; 62
    1160:	0f be       	out	0x3f, r0	; 63
    1162:	cd bf       	out	0x3d, r28	; 61
    1164:	cf 91       	pop	r28
    1166:	df 91       	pop	r29
    1168:	08 95       	ret

0000116a <getPass>:
 * Description :
 * 		This function is responsible for storing the user entered password,
 * 		and printing '*' on LCD instead of each entered character
 */
void getPass(uint8 * passArr, uint8 * size)
{
    116a:	ff 92       	push	r15
    116c:	0f 93       	push	r16
    116e:	1f 93       	push	r17
    1170:	df 93       	push	r29
    1172:	cf 93       	push	r28
    1174:	cd b7       	in	r28, 0x3d	; 61
    1176:	de b7       	in	r29, 0x3e	; 62
    1178:	a0 97       	sbiw	r28, 0x20	; 32
    117a:	0f b6       	in	r0, 0x3f	; 63
    117c:	f8 94       	cli
    117e:	de bf       	out	0x3e, r29	; 62
    1180:	0f be       	out	0x3f, r0	; 63
    1182:	cd bf       	out	0x3d, r28	; 61
    1184:	9e 8f       	std	Y+30, r25	; 0x1e
    1186:	8d 8f       	std	Y+29, r24	; 0x1d
    1188:	78 a3       	std	Y+32, r23	; 0x20
    118a:	6f 8f       	std	Y+31, r22	; 0x1f
    118c:	80 e0       	ldi	r24, 0x00	; 0
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	a8 ec       	ldi	r26, 0xC8	; 200
    1192:	b2 e4       	ldi	r27, 0x42	; 66
    1194:	89 8f       	std	Y+25, r24	; 0x19
    1196:	9a 8f       	std	Y+26, r25	; 0x1a
    1198:	ab 8f       	std	Y+27, r26	; 0x1b
    119a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    119c:	69 8d       	ldd	r22, Y+25	; 0x19
    119e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    11a0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    11a2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    11a4:	20 e0       	ldi	r18, 0x00	; 0
    11a6:	30 e0       	ldi	r19, 0x00	; 0
    11a8:	4a ef       	ldi	r20, 0xFA	; 250
    11aa:	54 e4       	ldi	r21, 0x44	; 68
    11ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11b0:	dc 01       	movw	r26, r24
    11b2:	cb 01       	movw	r24, r22
    11b4:	8d 8b       	std	Y+21, r24	; 0x15
    11b6:	9e 8b       	std	Y+22, r25	; 0x16
    11b8:	af 8b       	std	Y+23, r26	; 0x17
    11ba:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    11bc:	6d 89       	ldd	r22, Y+21	; 0x15
    11be:	7e 89       	ldd	r23, Y+22	; 0x16
    11c0:	8f 89       	ldd	r24, Y+23	; 0x17
    11c2:	98 8d       	ldd	r25, Y+24	; 0x18
    11c4:	20 e0       	ldi	r18, 0x00	; 0
    11c6:	30 e0       	ldi	r19, 0x00	; 0
    11c8:	40 e8       	ldi	r20, 0x80	; 128
    11ca:	5f e3       	ldi	r21, 0x3F	; 63
    11cc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11d0:	88 23       	and	r24, r24
    11d2:	2c f4       	brge	.+10     	; 0x11de <getPass+0x74>
		__ticks = 1;
    11d4:	81 e0       	ldi	r24, 0x01	; 1
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	9c 8b       	std	Y+20, r25	; 0x14
    11da:	8b 8b       	std	Y+19, r24	; 0x13
    11dc:	3f c0       	rjmp	.+126    	; 0x125c <getPass+0xf2>
	else if (__tmp > 65535)
    11de:	6d 89       	ldd	r22, Y+21	; 0x15
    11e0:	7e 89       	ldd	r23, Y+22	; 0x16
    11e2:	8f 89       	ldd	r24, Y+23	; 0x17
    11e4:	98 8d       	ldd	r25, Y+24	; 0x18
    11e6:	20 e0       	ldi	r18, 0x00	; 0
    11e8:	3f ef       	ldi	r19, 0xFF	; 255
    11ea:	4f e7       	ldi	r20, 0x7F	; 127
    11ec:	57 e4       	ldi	r21, 0x47	; 71
    11ee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11f2:	18 16       	cp	r1, r24
    11f4:	4c f5       	brge	.+82     	; 0x1248 <getPass+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11f6:	69 8d       	ldd	r22, Y+25	; 0x19
    11f8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    11fa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    11fc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    11fe:	20 e0       	ldi	r18, 0x00	; 0
    1200:	30 e0       	ldi	r19, 0x00	; 0
    1202:	40 e2       	ldi	r20, 0x20	; 32
    1204:	51 e4       	ldi	r21, 0x41	; 65
    1206:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    120a:	dc 01       	movw	r26, r24
    120c:	cb 01       	movw	r24, r22
    120e:	bc 01       	movw	r22, r24
    1210:	cd 01       	movw	r24, r26
    1212:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1216:	dc 01       	movw	r26, r24
    1218:	cb 01       	movw	r24, r22
    121a:	9c 8b       	std	Y+20, r25	; 0x14
    121c:	8b 8b       	std	Y+19, r24	; 0x13
    121e:	0f c0       	rjmp	.+30     	; 0x123e <getPass+0xd4>
    1220:	88 ec       	ldi	r24, 0xC8	; 200
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	9a 8b       	std	Y+18, r25	; 0x12
    1226:	89 8b       	std	Y+17, r24	; 0x11
    1228:	89 89       	ldd	r24, Y+17	; 0x11
    122a:	9a 89       	ldd	r25, Y+18	; 0x12
    122c:	01 97       	sbiw	r24, 0x01	; 1
    122e:	f1 f7       	brne	.-4      	; 0x122c <getPass+0xc2>
    1230:	9a 8b       	std	Y+18, r25	; 0x12
    1232:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1234:	8b 89       	ldd	r24, Y+19	; 0x13
    1236:	9c 89       	ldd	r25, Y+20	; 0x14
    1238:	01 97       	sbiw	r24, 0x01	; 1
    123a:	9c 8b       	std	Y+20, r25	; 0x14
    123c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    123e:	8b 89       	ldd	r24, Y+19	; 0x13
    1240:	9c 89       	ldd	r25, Y+20	; 0x14
    1242:	00 97       	sbiw	r24, 0x00	; 0
    1244:	69 f7       	brne	.-38     	; 0x1220 <getPass+0xb6>
    1246:	14 c0       	rjmp	.+40     	; 0x1270 <getPass+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1248:	6d 89       	ldd	r22, Y+21	; 0x15
    124a:	7e 89       	ldd	r23, Y+22	; 0x16
    124c:	8f 89       	ldd	r24, Y+23	; 0x17
    124e:	98 8d       	ldd	r25, Y+24	; 0x18
    1250:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1254:	dc 01       	movw	r26, r24
    1256:	cb 01       	movw	r24, r22
    1258:	9c 8b       	std	Y+20, r25	; 0x14
    125a:	8b 8b       	std	Y+19, r24	; 0x13
    125c:	8b 89       	ldd	r24, Y+19	; 0x13
    125e:	9c 89       	ldd	r25, Y+20	; 0x14
    1260:	98 8b       	std	Y+16, r25	; 0x10
    1262:	8f 87       	std	Y+15, r24	; 0x0f
    1264:	8f 85       	ldd	r24, Y+15	; 0x0f
    1266:	98 89       	ldd	r25, Y+16	; 0x10
    1268:	01 97       	sbiw	r24, 0x01	; 1
    126a:	f1 f7       	brne	.-4      	; 0x1268 <getPass+0xfe>
    126c:	98 8b       	std	Y+16, r25	; 0x10
    126e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(100);
	*size = 0;
    1270:	ef 8d       	ldd	r30, Y+31	; 0x1f
    1272:	f8 a1       	ldd	r31, Y+32	; 0x20
    1274:	10 82       	st	Z, r1
	do
	{
		passArr[(*size)++] = KEYPAD_getPressedKey();	/* store the entered keypad character in the array,
    1276:	ef 8d       	ldd	r30, Y+31	; 0x1f
    1278:	f8 a1       	ldd	r31, Y+32	; 0x20
    127a:	f0 80       	ld	r15, Z
    127c:	2f 2d       	mov	r18, r15
    127e:	30 e0       	ldi	r19, 0x00	; 0
    1280:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1282:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1284:	8c 01       	movw	r16, r24
    1286:	02 0f       	add	r16, r18
    1288:	13 1f       	adc	r17, r19
    128a:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <KEYPAD_getPressedKey>
    128e:	f8 01       	movw	r30, r16
    1290:	80 83       	st	Z, r24
    1292:	8f 2d       	mov	r24, r15
    1294:	8f 5f       	subi	r24, 0xFF	; 255
    1296:	ef 8d       	ldd	r30, Y+31	; 0x1f
    1298:	f8 a1       	ldd	r31, Y+32	; 0x20
    129a:	80 83       	st	Z, r24
														   increment its size */
		if(passArr[(*size) - 1] != 13)
    129c:	ef 8d       	ldd	r30, Y+31	; 0x1f
    129e:	f8 a1       	ldd	r31, Y+32	; 0x20
    12a0:	80 81       	ld	r24, Z
    12a2:	88 2f       	mov	r24, r24
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	9c 01       	movw	r18, r24
    12a8:	21 50       	subi	r18, 0x01	; 1
    12aa:	30 40       	sbci	r19, 0x00	; 0
    12ac:	8d 8d       	ldd	r24, Y+29	; 0x1d
    12ae:	9e 8d       	ldd	r25, Y+30	; 0x1e
    12b0:	fc 01       	movw	r30, r24
    12b2:	e2 0f       	add	r30, r18
    12b4:	f3 1f       	adc	r31, r19
    12b6:	80 81       	ld	r24, Z
    12b8:	8d 30       	cpi	r24, 0x0D	; 13
    12ba:	19 f0       	breq	.+6      	; 0x12c2 <getPass+0x158>
			LCD_displayCharacter('*');		/* print '*' on LCD in place of the entered keypad value, ignore ON key press */
    12bc:	8a e2       	ldi	r24, 0x2A	; 42
    12be:	0e 94 c5 14 	call	0x298a	; 0x298a <LCD_displayCharacter>
    12c2:	80 e0       	ldi	r24, 0x00	; 0
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	aa e7       	ldi	r26, 0x7A	; 122
    12c8:	b3 e4       	ldi	r27, 0x43	; 67
    12ca:	8b 87       	std	Y+11, r24	; 0x0b
    12cc:	9c 87       	std	Y+12, r25	; 0x0c
    12ce:	ad 87       	std	Y+13, r26	; 0x0d
    12d0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    12d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    12d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    12d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    12da:	20 e0       	ldi	r18, 0x00	; 0
    12dc:	30 e0       	ldi	r19, 0x00	; 0
    12de:	4a ef       	ldi	r20, 0xFA	; 250
    12e0:	54 e4       	ldi	r21, 0x44	; 68
    12e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12e6:	dc 01       	movw	r26, r24
    12e8:	cb 01       	movw	r24, r22
    12ea:	8f 83       	std	Y+7, r24	; 0x07
    12ec:	98 87       	std	Y+8, r25	; 0x08
    12ee:	a9 87       	std	Y+9, r26	; 0x09
    12f0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    12f2:	6f 81       	ldd	r22, Y+7	; 0x07
    12f4:	78 85       	ldd	r23, Y+8	; 0x08
    12f6:	89 85       	ldd	r24, Y+9	; 0x09
    12f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    12fa:	20 e0       	ldi	r18, 0x00	; 0
    12fc:	30 e0       	ldi	r19, 0x00	; 0
    12fe:	40 e8       	ldi	r20, 0x80	; 128
    1300:	5f e3       	ldi	r21, 0x3F	; 63
    1302:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1306:	88 23       	and	r24, r24
    1308:	2c f4       	brge	.+10     	; 0x1314 <getPass+0x1aa>
		__ticks = 1;
    130a:	81 e0       	ldi	r24, 0x01	; 1
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	9e 83       	std	Y+6, r25	; 0x06
    1310:	8d 83       	std	Y+5, r24	; 0x05
    1312:	3f c0       	rjmp	.+126    	; 0x1392 <getPass+0x228>
	else if (__tmp > 65535)
    1314:	6f 81       	ldd	r22, Y+7	; 0x07
    1316:	78 85       	ldd	r23, Y+8	; 0x08
    1318:	89 85       	ldd	r24, Y+9	; 0x09
    131a:	9a 85       	ldd	r25, Y+10	; 0x0a
    131c:	20 e0       	ldi	r18, 0x00	; 0
    131e:	3f ef       	ldi	r19, 0xFF	; 255
    1320:	4f e7       	ldi	r20, 0x7F	; 127
    1322:	57 e4       	ldi	r21, 0x47	; 71
    1324:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1328:	18 16       	cp	r1, r24
    132a:	4c f5       	brge	.+82     	; 0x137e <getPass+0x214>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    132c:	6b 85       	ldd	r22, Y+11	; 0x0b
    132e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1330:	8d 85       	ldd	r24, Y+13	; 0x0d
    1332:	9e 85       	ldd	r25, Y+14	; 0x0e
    1334:	20 e0       	ldi	r18, 0x00	; 0
    1336:	30 e0       	ldi	r19, 0x00	; 0
    1338:	40 e2       	ldi	r20, 0x20	; 32
    133a:	51 e4       	ldi	r21, 0x41	; 65
    133c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1340:	dc 01       	movw	r26, r24
    1342:	cb 01       	movw	r24, r22
    1344:	bc 01       	movw	r22, r24
    1346:	cd 01       	movw	r24, r26
    1348:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    134c:	dc 01       	movw	r26, r24
    134e:	cb 01       	movw	r24, r22
    1350:	9e 83       	std	Y+6, r25	; 0x06
    1352:	8d 83       	std	Y+5, r24	; 0x05
    1354:	0f c0       	rjmp	.+30     	; 0x1374 <getPass+0x20a>
    1356:	88 ec       	ldi	r24, 0xC8	; 200
    1358:	90 e0       	ldi	r25, 0x00	; 0
    135a:	9c 83       	std	Y+4, r25	; 0x04
    135c:	8b 83       	std	Y+3, r24	; 0x03
    135e:	8b 81       	ldd	r24, Y+3	; 0x03
    1360:	9c 81       	ldd	r25, Y+4	; 0x04
    1362:	01 97       	sbiw	r24, 0x01	; 1
    1364:	f1 f7       	brne	.-4      	; 0x1362 <getPass+0x1f8>
    1366:	9c 83       	std	Y+4, r25	; 0x04
    1368:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    136a:	8d 81       	ldd	r24, Y+5	; 0x05
    136c:	9e 81       	ldd	r25, Y+6	; 0x06
    136e:	01 97       	sbiw	r24, 0x01	; 1
    1370:	9e 83       	std	Y+6, r25	; 0x06
    1372:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1374:	8d 81       	ldd	r24, Y+5	; 0x05
    1376:	9e 81       	ldd	r25, Y+6	; 0x06
    1378:	00 97       	sbiw	r24, 0x00	; 0
    137a:	69 f7       	brne	.-38     	; 0x1356 <getPass+0x1ec>
    137c:	14 c0       	rjmp	.+40     	; 0x13a6 <getPass+0x23c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    137e:	6f 81       	ldd	r22, Y+7	; 0x07
    1380:	78 85       	ldd	r23, Y+8	; 0x08
    1382:	89 85       	ldd	r24, Y+9	; 0x09
    1384:	9a 85       	ldd	r25, Y+10	; 0x0a
    1386:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    138a:	dc 01       	movw	r26, r24
    138c:	cb 01       	movw	r24, r22
    138e:	9e 83       	std	Y+6, r25	; 0x06
    1390:	8d 83       	std	Y+5, r24	; 0x05
    1392:	8d 81       	ldd	r24, Y+5	; 0x05
    1394:	9e 81       	ldd	r25, Y+6	; 0x06
    1396:	9a 83       	std	Y+2, r25	; 0x02
    1398:	89 83       	std	Y+1, r24	; 0x01
    139a:	89 81       	ldd	r24, Y+1	; 0x01
    139c:	9a 81       	ldd	r25, Y+2	; 0x02
    139e:	01 97       	sbiw	r24, 0x01	; 1
    13a0:	f1 f7       	brne	.-4      	; 0x139e <getPass+0x234>
    13a2:	9a 83       	std	Y+2, r25	; 0x02
    13a4:	89 83       	std	Y+1, r24	; 0x01

		_delay_ms(250);				/* wait 100ms between two keypad presses */

		/* keep storing characters till ON key is pressed */
	}while(passArr[(*size) - 1] != 13); /* 13 is ASCII of Enter, returned by keypad if ON is pressed */
    13a6:	ef 8d       	ldd	r30, Y+31	; 0x1f
    13a8:	f8 a1       	ldd	r31, Y+32	; 0x20
    13aa:	80 81       	ld	r24, Z
    13ac:	88 2f       	mov	r24, r24
    13ae:	90 e0       	ldi	r25, 0x00	; 0
    13b0:	9c 01       	movw	r18, r24
    13b2:	21 50       	subi	r18, 0x01	; 1
    13b4:	30 40       	sbci	r19, 0x00	; 0
    13b6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    13b8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    13ba:	fc 01       	movw	r30, r24
    13bc:	e2 0f       	add	r30, r18
    13be:	f3 1f       	adc	r31, r19
    13c0:	80 81       	ld	r24, Z
    13c2:	8d 30       	cpi	r24, 0x0D	; 13
    13c4:	09 f0       	breq	.+2      	; 0x13c8 <getPass+0x25e>
    13c6:	57 cf       	rjmp	.-338    	; 0x1276 <getPass+0x10c>

	passArr[--(*size)] = '\0'; /* terminate input string by null character, remove the enter character */
    13c8:	ef 8d       	ldd	r30, Y+31	; 0x1f
    13ca:	f8 a1       	ldd	r31, Y+32	; 0x20
    13cc:	80 81       	ld	r24, Z
    13ce:	81 50       	subi	r24, 0x01	; 1
    13d0:	ef 8d       	ldd	r30, Y+31	; 0x1f
    13d2:	f8 a1       	ldd	r31, Y+32	; 0x20
    13d4:	80 83       	st	Z, r24
    13d6:	ef 8d       	ldd	r30, Y+31	; 0x1f
    13d8:	f8 a1       	ldd	r31, Y+32	; 0x20
    13da:	80 81       	ld	r24, Z
    13dc:	28 2f       	mov	r18, r24
    13de:	30 e0       	ldi	r19, 0x00	; 0
    13e0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    13e2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    13e4:	fc 01       	movw	r30, r24
    13e6:	e2 0f       	add	r30, r18
    13e8:	f3 1f       	adc	r31, r19
    13ea:	10 82       	st	Z, r1

}
    13ec:	a0 96       	adiw	r28, 0x20	; 32
    13ee:	0f b6       	in	r0, 0x3f	; 63
    13f0:	f8 94       	cli
    13f2:	de bf       	out	0x3e, r29	; 62
    13f4:	0f be       	out	0x3f, r0	; 63
    13f6:	cd bf       	out	0x3d, r28	; 61
    13f8:	cf 91       	pop	r28
    13fa:	df 91       	pop	r29
    13fc:	1f 91       	pop	r17
    13fe:	0f 91       	pop	r16
    1400:	ff 90       	pop	r15
    1402:	08 95       	ret

00001404 <isPassMatched>:
 * 			1: Passwords match
 * 			0: Passwords do not match
 *
 */
uint8 isPassMatched(uint8 * pass1, uint8 * pass2, uint8 size)
{
    1404:	df 93       	push	r29
    1406:	cf 93       	push	r28
    1408:	cd b7       	in	r28, 0x3d	; 61
    140a:	de b7       	in	r29, 0x3e	; 62
    140c:	27 97       	sbiw	r28, 0x07	; 7
    140e:	0f b6       	in	r0, 0x3f	; 63
    1410:	f8 94       	cli
    1412:	de bf       	out	0x3e, r29	; 62
    1414:	0f be       	out	0x3f, r0	; 63
    1416:	cd bf       	out	0x3d, r28	; 61
    1418:	9c 83       	std	Y+4, r25	; 0x04
    141a:	8b 83       	std	Y+3, r24	; 0x03
    141c:	7e 83       	std	Y+6, r23	; 0x06
    141e:	6d 83       	std	Y+5, r22	; 0x05
    1420:	4f 83       	std	Y+7, r20	; 0x07
	uint8 i = 0, matched = 1;
    1422:	1a 82       	std	Y+2, r1	; 0x02
    1424:	81 e0       	ldi	r24, 0x01	; 1
    1426:	89 83       	std	Y+1, r24	; 0x01
    1428:	19 c0       	rjmp	.+50     	; 0x145c <isPassMatched+0x58>
	for(; i < size; ++i)
	{
		if(pass1[i] == pass2[i])
    142a:	8a 81       	ldd	r24, Y+2	; 0x02
    142c:	28 2f       	mov	r18, r24
    142e:	30 e0       	ldi	r19, 0x00	; 0
    1430:	8b 81       	ldd	r24, Y+3	; 0x03
    1432:	9c 81       	ldd	r25, Y+4	; 0x04
    1434:	fc 01       	movw	r30, r24
    1436:	e2 0f       	add	r30, r18
    1438:	f3 1f       	adc	r31, r19
    143a:	40 81       	ld	r20, Z
    143c:	8a 81       	ldd	r24, Y+2	; 0x02
    143e:	28 2f       	mov	r18, r24
    1440:	30 e0       	ldi	r19, 0x00	; 0
    1442:	8d 81       	ldd	r24, Y+5	; 0x05
    1444:	9e 81       	ldd	r25, Y+6	; 0x06
    1446:	fc 01       	movw	r30, r24
    1448:	e2 0f       	add	r30, r18
    144a:	f3 1f       	adc	r31, r19
    144c:	80 81       	ld	r24, Z
    144e:	48 17       	cp	r20, r24
    1450:	11 f0       	breq	.+4      	; 0x1456 <isPassMatched+0x52>
		{
			continue;
		}
		else
		{
			matched = 0;
    1452:	19 82       	std	Y+1, r1	; 0x01
    1454:	07 c0       	rjmp	.+14     	; 0x1464 <isPassMatched+0x60>
 *
 */
uint8 isPassMatched(uint8 * pass1, uint8 * pass2, uint8 size)
{
	uint8 i = 0, matched = 1;
	for(; i < size; ++i)
    1456:	8a 81       	ldd	r24, Y+2	; 0x02
    1458:	8f 5f       	subi	r24, 0xFF	; 255
    145a:	8a 83       	std	Y+2, r24	; 0x02
    145c:	9a 81       	ldd	r25, Y+2	; 0x02
    145e:	8f 81       	ldd	r24, Y+7	; 0x07
    1460:	98 17       	cp	r25, r24
    1462:	18 f3       	brcs	.-58     	; 0x142a <isPassMatched+0x26>
			matched = 0;
			break;
		}
	}

	return matched;
    1464:	89 81       	ldd	r24, Y+1	; 0x01
}
    1466:	27 96       	adiw	r28, 0x07	; 7
    1468:	0f b6       	in	r0, 0x3f	; 63
    146a:	f8 94       	cli
    146c:	de bf       	out	0x3e, r29	; 62
    146e:	0f be       	out	0x3f, r0	; 63
    1470:	cd bf       	out	0x3d, r28	; 61
    1472:	cf 91       	pop	r28
    1474:	df 91       	pop	r29
    1476:	08 95       	ret

00001478 <TIMER1_delay_15sec>:
/*
 * Description :
 * 			This function is to generate 15 seconds delay using timer1.
 */
void TIMER1_delay_15sec(void)
{
    1478:	df 93       	push	r29
    147a:	cf 93       	push	r28
    147c:	cd b7       	in	r28, 0x3d	; 61
    147e:	de b7       	in	r29, 0x3e	; 62
    1480:	2b 97       	sbiw	r28, 0x0b	; 11
    1482:	0f b6       	in	r0, 0x3f	; 63
    1484:	f8 94       	cli
    1486:	de bf       	out	0x3e, r29	; 62
    1488:	0f be       	out	0x3f, r0	; 63
    148a:	cd bf       	out	0x3d, r28	; 61
	/* 118880 == 58594*/
	Timer1_Config_t config = { 1000 , 58594, TIMER1_PRESCALER_1024, TIMER1_CTC_MODE};
    148c:	ce 01       	movw	r24, r28
    148e:	01 96       	adiw	r24, 0x01	; 1
    1490:	98 87       	std	Y+8, r25	; 0x08
    1492:	8f 83       	std	Y+7, r24	; 0x07
    1494:	e8 e6       	ldi	r30, 0x68	; 104
    1496:	f1 e0       	ldi	r31, 0x01	; 1
    1498:	fa 87       	std	Y+10, r31	; 0x0a
    149a:	e9 87       	std	Y+9, r30	; 0x09
    149c:	f6 e0       	ldi	r31, 0x06	; 6
    149e:	fb 87       	std	Y+11, r31	; 0x0b
    14a0:	e9 85       	ldd	r30, Y+9	; 0x09
    14a2:	fa 85       	ldd	r31, Y+10	; 0x0a
    14a4:	00 80       	ld	r0, Z
    14a6:	89 85       	ldd	r24, Y+9	; 0x09
    14a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    14aa:	01 96       	adiw	r24, 0x01	; 1
    14ac:	9a 87       	std	Y+10, r25	; 0x0a
    14ae:	89 87       	std	Y+9, r24	; 0x09
    14b0:	ef 81       	ldd	r30, Y+7	; 0x07
    14b2:	f8 85       	ldd	r31, Y+8	; 0x08
    14b4:	00 82       	st	Z, r0
    14b6:	8f 81       	ldd	r24, Y+7	; 0x07
    14b8:	98 85       	ldd	r25, Y+8	; 0x08
    14ba:	01 96       	adiw	r24, 0x01	; 1
    14bc:	98 87       	std	Y+8, r25	; 0x08
    14be:	8f 83       	std	Y+7, r24	; 0x07
    14c0:	9b 85       	ldd	r25, Y+11	; 0x0b
    14c2:	91 50       	subi	r25, 0x01	; 1
    14c4:	9b 87       	std	Y+11, r25	; 0x0b
    14c6:	eb 85       	ldd	r30, Y+11	; 0x0b
    14c8:	ee 23       	and	r30, r30
    14ca:	51 f7       	brne	.-44     	; 0x14a0 <TIMER1_delay_15sec+0x28>
	Timer1_init(&config);
    14cc:	ce 01       	movw	r24, r28
    14ce:	01 96       	adiw	r24, 0x01	; 1
    14d0:	0e 94 57 1a 	call	0x34ae	; 0x34ae <Timer1_init>
	Timer1_setCallBack(TIMER1_callback_function);
    14d4:	82 ec       	ldi	r24, 0xC2	; 194
    14d6:	9a e0       	ldi	r25, 0x0A	; 10
    14d8:	0e 94 d0 1a 	call	0x35a0	; 0x35a0 <Timer1_setCallBack>
	while(ticks < 2);
    14dc:	80 91 74 01 	lds	r24, 0x0174
    14e0:	82 30       	cpi	r24, 0x02	; 2
    14e2:	e0 f3       	brcs	.-8      	; 0x14dc <TIMER1_delay_15sec+0x64>
	ticks = 0;
    14e4:	10 92 74 01 	sts	0x0174, r1
	Timer1_deInit();
    14e8:	0e 94 b1 1a 	call	0x3562	; 0x3562 <Timer1_deInit>

}
    14ec:	2b 96       	adiw	r28, 0x0b	; 11
    14ee:	0f b6       	in	r0, 0x3f	; 63
    14f0:	f8 94       	cli
    14f2:	de bf       	out	0x3e, r29	; 62
    14f4:	0f be       	out	0x3f, r0	; 63
    14f6:	cd bf       	out	0x3d, r28	; 61
    14f8:	cf 91       	pop	r28
    14fa:	df 91       	pop	r29
    14fc:	08 95       	ret

000014fe <TIMER1_delay_1sec>:
/*
 * Description :
 * 			This function is to generate 1 second delay using timer1.
 */
void TIMER1_delay_1sec(void)
{
    14fe:	df 93       	push	r29
    1500:	cf 93       	push	r28
    1502:	cd b7       	in	r28, 0x3d	; 61
    1504:	de b7       	in	r29, 0x3e	; 62
    1506:	2b 97       	sbiw	r28, 0x0b	; 11
    1508:	0f b6       	in	r0, 0x3f	; 63
    150a:	f8 94       	cli
    150c:	de bf       	out	0x3e, r29	; 62
    150e:	0f be       	out	0x3f, r0	; 63
    1510:	cd bf       	out	0x3d, r28	; 61
	/* required OCR value to generate 1 second at 1024 pre-scaler is 7813*/
	/* Timer will run in CTC, so we can put any dummy number in TCNT1 for the config*/
	Timer1_Config_t config = { 1000 , 7813, TIMER1_PRESCALER_1024, TIMER1_CTC_MODE};
    1512:	ce 01       	movw	r24, r28
    1514:	01 96       	adiw	r24, 0x01	; 1
    1516:	98 87       	std	Y+8, r25	; 0x08
    1518:	8f 83       	std	Y+7, r24	; 0x07
    151a:	ee e6       	ldi	r30, 0x6E	; 110
    151c:	f1 e0       	ldi	r31, 0x01	; 1
    151e:	fa 87       	std	Y+10, r31	; 0x0a
    1520:	e9 87       	std	Y+9, r30	; 0x09
    1522:	f6 e0       	ldi	r31, 0x06	; 6
    1524:	fb 87       	std	Y+11, r31	; 0x0b
    1526:	e9 85       	ldd	r30, Y+9	; 0x09
    1528:	fa 85       	ldd	r31, Y+10	; 0x0a
    152a:	00 80       	ld	r0, Z
    152c:	89 85       	ldd	r24, Y+9	; 0x09
    152e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1530:	01 96       	adiw	r24, 0x01	; 1
    1532:	9a 87       	std	Y+10, r25	; 0x0a
    1534:	89 87       	std	Y+9, r24	; 0x09
    1536:	ef 81       	ldd	r30, Y+7	; 0x07
    1538:	f8 85       	ldd	r31, Y+8	; 0x08
    153a:	00 82       	st	Z, r0
    153c:	8f 81       	ldd	r24, Y+7	; 0x07
    153e:	98 85       	ldd	r25, Y+8	; 0x08
    1540:	01 96       	adiw	r24, 0x01	; 1
    1542:	98 87       	std	Y+8, r25	; 0x08
    1544:	8f 83       	std	Y+7, r24	; 0x07
    1546:	9b 85       	ldd	r25, Y+11	; 0x0b
    1548:	91 50       	subi	r25, 0x01	; 1
    154a:	9b 87       	std	Y+11, r25	; 0x0b
    154c:	eb 85       	ldd	r30, Y+11	; 0x0b
    154e:	ee 23       	and	r30, r30
    1550:	51 f7       	brne	.-44     	; 0x1526 <TIMER1_delay_1sec+0x28>
	Timer1_init(&config);
    1552:	ce 01       	movw	r24, r28
    1554:	01 96       	adiw	r24, 0x01	; 1
    1556:	0e 94 57 1a 	call	0x34ae	; 0x34ae <Timer1_init>

	/* set timer callback function */
	Timer1_setCallBack(TIMER1_callback_function);
    155a:	82 ec       	ldi	r24, 0xC2	; 194
    155c:	9a e0       	ldi	r25, 0x0A	; 10
    155e:	0e 94 d0 1a 	call	0x35a0	; 0x35a0 <Timer1_setCallBack>
	/* wait for timer to generate the interrupt */
	while(!ticks);
    1562:	80 91 74 01 	lds	r24, 0x0174
    1566:	88 23       	and	r24, r24
    1568:	e1 f3       	breq	.-8      	; 0x1562 <TIMER1_delay_1sec+0x64>

	/* reset ticks variable for the next future use */
	ticks = 0;
    156a:	10 92 74 01 	sts	0x0174, r1

	/* reset timer1 configurations */
	Timer1_deInit();
    156e:	0e 94 b1 1a 	call	0x3562	; 0x3562 <Timer1_deInit>

}
    1572:	2b 96       	adiw	r28, 0x0b	; 11
    1574:	0f b6       	in	r0, 0x3f	; 63
    1576:	f8 94       	cli
    1578:	de bf       	out	0x3e, r29	; 62
    157a:	0f be       	out	0x3f, r0	; 63
    157c:	cd bf       	out	0x3d, r28	; 61
    157e:	cf 91       	pop	r28
    1580:	df 91       	pop	r29
    1582:	08 95       	ret

00001584 <TIMER1_callback_function>:

void TIMER1_callback_function(void)
{
    1584:	df 93       	push	r29
    1586:	cf 93       	push	r28
    1588:	cd b7       	in	r28, 0x3d	; 61
    158a:	de b7       	in	r29, 0x3e	; 62
	ticks++;
    158c:	80 91 74 01 	lds	r24, 0x0174
    1590:	8f 5f       	subi	r24, 0xFF	; 255
    1592:	80 93 74 01 	sts	0x0174, r24
}
    1596:	cf 91       	pop	r28
    1598:	df 91       	pop	r29
    159a:	08 95       	ret

0000159c <GPIO_setupPinDirection>:
#include "avr/io.h"
#include "common_macros.h"


void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    159c:	df 93       	push	r29
    159e:	cf 93       	push	r28
    15a0:	00 d0       	rcall	.+0      	; 0x15a2 <GPIO_setupPinDirection+0x6>
    15a2:	00 d0       	rcall	.+0      	; 0x15a4 <GPIO_setupPinDirection+0x8>
    15a4:	0f 92       	push	r0
    15a6:	cd b7       	in	r28, 0x3d	; 61
    15a8:	de b7       	in	r29, 0x3e	; 62
    15aa:	89 83       	std	Y+1, r24	; 0x01
    15ac:	6a 83       	std	Y+2, r22	; 0x02
    15ae:	4b 83       	std	Y+3, r20	; 0x03

	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    15b0:	8a 81       	ldd	r24, Y+2	; 0x02
    15b2:	88 30       	cpi	r24, 0x08	; 8
    15b4:	08 f0       	brcs	.+2      	; 0x15b8 <GPIO_setupPinDirection+0x1c>
    15b6:	d5 c0       	rjmp	.+426    	; 0x1762 <GPIO_setupPinDirection+0x1c6>
    15b8:	89 81       	ldd	r24, Y+1	; 0x01
    15ba:	84 30       	cpi	r24, 0x04	; 4
    15bc:	08 f0       	brcs	.+2      	; 0x15c0 <GPIO_setupPinDirection+0x24>
    15be:	d1 c0       	rjmp	.+418    	; 0x1762 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    15c0:	89 81       	ldd	r24, Y+1	; 0x01
    15c2:	28 2f       	mov	r18, r24
    15c4:	30 e0       	ldi	r19, 0x00	; 0
    15c6:	3d 83       	std	Y+5, r19	; 0x05
    15c8:	2c 83       	std	Y+4, r18	; 0x04
    15ca:	8c 81       	ldd	r24, Y+4	; 0x04
    15cc:	9d 81       	ldd	r25, Y+5	; 0x05
    15ce:	81 30       	cpi	r24, 0x01	; 1
    15d0:	91 05       	cpc	r25, r1
    15d2:	09 f4       	brne	.+2      	; 0x15d6 <GPIO_setupPinDirection+0x3a>
    15d4:	43 c0       	rjmp	.+134    	; 0x165c <GPIO_setupPinDirection+0xc0>
    15d6:	2c 81       	ldd	r18, Y+4	; 0x04
    15d8:	3d 81       	ldd	r19, Y+5	; 0x05
    15da:	22 30       	cpi	r18, 0x02	; 2
    15dc:	31 05       	cpc	r19, r1
    15de:	2c f4       	brge	.+10     	; 0x15ea <GPIO_setupPinDirection+0x4e>
    15e0:	8c 81       	ldd	r24, Y+4	; 0x04
    15e2:	9d 81       	ldd	r25, Y+5	; 0x05
    15e4:	00 97       	sbiw	r24, 0x00	; 0
    15e6:	71 f0       	breq	.+28     	; 0x1604 <GPIO_setupPinDirection+0x68>
    15e8:	bc c0       	rjmp	.+376    	; 0x1762 <GPIO_setupPinDirection+0x1c6>
    15ea:	2c 81       	ldd	r18, Y+4	; 0x04
    15ec:	3d 81       	ldd	r19, Y+5	; 0x05
    15ee:	22 30       	cpi	r18, 0x02	; 2
    15f0:	31 05       	cpc	r19, r1
    15f2:	09 f4       	brne	.+2      	; 0x15f6 <GPIO_setupPinDirection+0x5a>
    15f4:	5f c0       	rjmp	.+190    	; 0x16b4 <GPIO_setupPinDirection+0x118>
    15f6:	8c 81       	ldd	r24, Y+4	; 0x04
    15f8:	9d 81       	ldd	r25, Y+5	; 0x05
    15fa:	83 30       	cpi	r24, 0x03	; 3
    15fc:	91 05       	cpc	r25, r1
    15fe:	09 f4       	brne	.+2      	; 0x1602 <GPIO_setupPinDirection+0x66>
    1600:	85 c0       	rjmp	.+266    	; 0x170c <GPIO_setupPinDirection+0x170>
    1602:	af c0       	rjmp	.+350    	; 0x1762 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1604:	8b 81       	ldd	r24, Y+3	; 0x03
    1606:	81 30       	cpi	r24, 0x01	; 1
    1608:	a1 f4       	brne	.+40     	; 0x1632 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    160a:	aa e3       	ldi	r26, 0x3A	; 58
    160c:	b0 e0       	ldi	r27, 0x00	; 0
    160e:	ea e3       	ldi	r30, 0x3A	; 58
    1610:	f0 e0       	ldi	r31, 0x00	; 0
    1612:	80 81       	ld	r24, Z
    1614:	48 2f       	mov	r20, r24
    1616:	8a 81       	ldd	r24, Y+2	; 0x02
    1618:	28 2f       	mov	r18, r24
    161a:	30 e0       	ldi	r19, 0x00	; 0
    161c:	81 e0       	ldi	r24, 0x01	; 1
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	02 2e       	mov	r0, r18
    1622:	02 c0       	rjmp	.+4      	; 0x1628 <GPIO_setupPinDirection+0x8c>
    1624:	88 0f       	add	r24, r24
    1626:	99 1f       	adc	r25, r25
    1628:	0a 94       	dec	r0
    162a:	e2 f7       	brpl	.-8      	; 0x1624 <GPIO_setupPinDirection+0x88>
    162c:	84 2b       	or	r24, r20
    162e:	8c 93       	st	X, r24
    1630:	98 c0       	rjmp	.+304    	; 0x1762 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1632:	aa e3       	ldi	r26, 0x3A	; 58
    1634:	b0 e0       	ldi	r27, 0x00	; 0
    1636:	ea e3       	ldi	r30, 0x3A	; 58
    1638:	f0 e0       	ldi	r31, 0x00	; 0
    163a:	80 81       	ld	r24, Z
    163c:	48 2f       	mov	r20, r24
    163e:	8a 81       	ldd	r24, Y+2	; 0x02
    1640:	28 2f       	mov	r18, r24
    1642:	30 e0       	ldi	r19, 0x00	; 0
    1644:	81 e0       	ldi	r24, 0x01	; 1
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	02 2e       	mov	r0, r18
    164a:	02 c0       	rjmp	.+4      	; 0x1650 <GPIO_setupPinDirection+0xb4>
    164c:	88 0f       	add	r24, r24
    164e:	99 1f       	adc	r25, r25
    1650:	0a 94       	dec	r0
    1652:	e2 f7       	brpl	.-8      	; 0x164c <GPIO_setupPinDirection+0xb0>
    1654:	80 95       	com	r24
    1656:	84 23       	and	r24, r20
    1658:	8c 93       	st	X, r24
    165a:	83 c0       	rjmp	.+262    	; 0x1762 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    165c:	8b 81       	ldd	r24, Y+3	; 0x03
    165e:	81 30       	cpi	r24, 0x01	; 1
    1660:	a1 f4       	brne	.+40     	; 0x168a <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1662:	a7 e3       	ldi	r26, 0x37	; 55
    1664:	b0 e0       	ldi	r27, 0x00	; 0
    1666:	e7 e3       	ldi	r30, 0x37	; 55
    1668:	f0 e0       	ldi	r31, 0x00	; 0
    166a:	80 81       	ld	r24, Z
    166c:	48 2f       	mov	r20, r24
    166e:	8a 81       	ldd	r24, Y+2	; 0x02
    1670:	28 2f       	mov	r18, r24
    1672:	30 e0       	ldi	r19, 0x00	; 0
    1674:	81 e0       	ldi	r24, 0x01	; 1
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	02 2e       	mov	r0, r18
    167a:	02 c0       	rjmp	.+4      	; 0x1680 <GPIO_setupPinDirection+0xe4>
    167c:	88 0f       	add	r24, r24
    167e:	99 1f       	adc	r25, r25
    1680:	0a 94       	dec	r0
    1682:	e2 f7       	brpl	.-8      	; 0x167c <GPIO_setupPinDirection+0xe0>
    1684:	84 2b       	or	r24, r20
    1686:	8c 93       	st	X, r24
    1688:	6c c0       	rjmp	.+216    	; 0x1762 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    168a:	a7 e3       	ldi	r26, 0x37	; 55
    168c:	b0 e0       	ldi	r27, 0x00	; 0
    168e:	e7 e3       	ldi	r30, 0x37	; 55
    1690:	f0 e0       	ldi	r31, 0x00	; 0
    1692:	80 81       	ld	r24, Z
    1694:	48 2f       	mov	r20, r24
    1696:	8a 81       	ldd	r24, Y+2	; 0x02
    1698:	28 2f       	mov	r18, r24
    169a:	30 e0       	ldi	r19, 0x00	; 0
    169c:	81 e0       	ldi	r24, 0x01	; 1
    169e:	90 e0       	ldi	r25, 0x00	; 0
    16a0:	02 2e       	mov	r0, r18
    16a2:	02 c0       	rjmp	.+4      	; 0x16a8 <GPIO_setupPinDirection+0x10c>
    16a4:	88 0f       	add	r24, r24
    16a6:	99 1f       	adc	r25, r25
    16a8:	0a 94       	dec	r0
    16aa:	e2 f7       	brpl	.-8      	; 0x16a4 <GPIO_setupPinDirection+0x108>
    16ac:	80 95       	com	r24
    16ae:	84 23       	and	r24, r20
    16b0:	8c 93       	st	X, r24
    16b2:	57 c0       	rjmp	.+174    	; 0x1762 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    16b4:	8b 81       	ldd	r24, Y+3	; 0x03
    16b6:	81 30       	cpi	r24, 0x01	; 1
    16b8:	a1 f4       	brne	.+40     	; 0x16e2 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    16ba:	a4 e3       	ldi	r26, 0x34	; 52
    16bc:	b0 e0       	ldi	r27, 0x00	; 0
    16be:	e4 e3       	ldi	r30, 0x34	; 52
    16c0:	f0 e0       	ldi	r31, 0x00	; 0
    16c2:	80 81       	ld	r24, Z
    16c4:	48 2f       	mov	r20, r24
    16c6:	8a 81       	ldd	r24, Y+2	; 0x02
    16c8:	28 2f       	mov	r18, r24
    16ca:	30 e0       	ldi	r19, 0x00	; 0
    16cc:	81 e0       	ldi	r24, 0x01	; 1
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	02 2e       	mov	r0, r18
    16d2:	02 c0       	rjmp	.+4      	; 0x16d8 <GPIO_setupPinDirection+0x13c>
    16d4:	88 0f       	add	r24, r24
    16d6:	99 1f       	adc	r25, r25
    16d8:	0a 94       	dec	r0
    16da:	e2 f7       	brpl	.-8      	; 0x16d4 <GPIO_setupPinDirection+0x138>
    16dc:	84 2b       	or	r24, r20
    16de:	8c 93       	st	X, r24
    16e0:	40 c0       	rjmp	.+128    	; 0x1762 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    16e2:	a4 e3       	ldi	r26, 0x34	; 52
    16e4:	b0 e0       	ldi	r27, 0x00	; 0
    16e6:	e4 e3       	ldi	r30, 0x34	; 52
    16e8:	f0 e0       	ldi	r31, 0x00	; 0
    16ea:	80 81       	ld	r24, Z
    16ec:	48 2f       	mov	r20, r24
    16ee:	8a 81       	ldd	r24, Y+2	; 0x02
    16f0:	28 2f       	mov	r18, r24
    16f2:	30 e0       	ldi	r19, 0x00	; 0
    16f4:	81 e0       	ldi	r24, 0x01	; 1
    16f6:	90 e0       	ldi	r25, 0x00	; 0
    16f8:	02 2e       	mov	r0, r18
    16fa:	02 c0       	rjmp	.+4      	; 0x1700 <GPIO_setupPinDirection+0x164>
    16fc:	88 0f       	add	r24, r24
    16fe:	99 1f       	adc	r25, r25
    1700:	0a 94       	dec	r0
    1702:	e2 f7       	brpl	.-8      	; 0x16fc <GPIO_setupPinDirection+0x160>
    1704:	80 95       	com	r24
    1706:	84 23       	and	r24, r20
    1708:	8c 93       	st	X, r24
    170a:	2b c0       	rjmp	.+86     	; 0x1762 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    170c:	8b 81       	ldd	r24, Y+3	; 0x03
    170e:	81 30       	cpi	r24, 0x01	; 1
    1710:	a1 f4       	brne	.+40     	; 0x173a <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1712:	a1 e3       	ldi	r26, 0x31	; 49
    1714:	b0 e0       	ldi	r27, 0x00	; 0
    1716:	e1 e3       	ldi	r30, 0x31	; 49
    1718:	f0 e0       	ldi	r31, 0x00	; 0
    171a:	80 81       	ld	r24, Z
    171c:	48 2f       	mov	r20, r24
    171e:	8a 81       	ldd	r24, Y+2	; 0x02
    1720:	28 2f       	mov	r18, r24
    1722:	30 e0       	ldi	r19, 0x00	; 0
    1724:	81 e0       	ldi	r24, 0x01	; 1
    1726:	90 e0       	ldi	r25, 0x00	; 0
    1728:	02 2e       	mov	r0, r18
    172a:	02 c0       	rjmp	.+4      	; 0x1730 <GPIO_setupPinDirection+0x194>
    172c:	88 0f       	add	r24, r24
    172e:	99 1f       	adc	r25, r25
    1730:	0a 94       	dec	r0
    1732:	e2 f7       	brpl	.-8      	; 0x172c <GPIO_setupPinDirection+0x190>
    1734:	84 2b       	or	r24, r20
    1736:	8c 93       	st	X, r24
    1738:	14 c0       	rjmp	.+40     	; 0x1762 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    173a:	a1 e3       	ldi	r26, 0x31	; 49
    173c:	b0 e0       	ldi	r27, 0x00	; 0
    173e:	e1 e3       	ldi	r30, 0x31	; 49
    1740:	f0 e0       	ldi	r31, 0x00	; 0
    1742:	80 81       	ld	r24, Z
    1744:	48 2f       	mov	r20, r24
    1746:	8a 81       	ldd	r24, Y+2	; 0x02
    1748:	28 2f       	mov	r18, r24
    174a:	30 e0       	ldi	r19, 0x00	; 0
    174c:	81 e0       	ldi	r24, 0x01	; 1
    174e:	90 e0       	ldi	r25, 0x00	; 0
    1750:	02 2e       	mov	r0, r18
    1752:	02 c0       	rjmp	.+4      	; 0x1758 <GPIO_setupPinDirection+0x1bc>
    1754:	88 0f       	add	r24, r24
    1756:	99 1f       	adc	r25, r25
    1758:	0a 94       	dec	r0
    175a:	e2 f7       	brpl	.-8      	; 0x1754 <GPIO_setupPinDirection+0x1b8>
    175c:	80 95       	com	r24
    175e:	84 23       	and	r24, r20
    1760:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1762:	0f 90       	pop	r0
    1764:	0f 90       	pop	r0
    1766:	0f 90       	pop	r0
    1768:	0f 90       	pop	r0
    176a:	0f 90       	pop	r0
    176c:	cf 91       	pop	r28
    176e:	df 91       	pop	r29
    1770:	08 95       	ret

00001772 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1772:	df 93       	push	r29
    1774:	cf 93       	push	r28
    1776:	00 d0       	rcall	.+0      	; 0x1778 <GPIO_writePin+0x6>
    1778:	00 d0       	rcall	.+0      	; 0x177a <GPIO_writePin+0x8>
    177a:	0f 92       	push	r0
    177c:	cd b7       	in	r28, 0x3d	; 61
    177e:	de b7       	in	r29, 0x3e	; 62
    1780:	89 83       	std	Y+1, r24	; 0x01
    1782:	6a 83       	std	Y+2, r22	; 0x02
    1784:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1786:	8a 81       	ldd	r24, Y+2	; 0x02
    1788:	88 30       	cpi	r24, 0x08	; 8
    178a:	08 f0       	brcs	.+2      	; 0x178e <GPIO_writePin+0x1c>
    178c:	d5 c0       	rjmp	.+426    	; 0x1938 <GPIO_writePin+0x1c6>
    178e:	89 81       	ldd	r24, Y+1	; 0x01
    1790:	84 30       	cpi	r24, 0x04	; 4
    1792:	08 f0       	brcs	.+2      	; 0x1796 <GPIO_writePin+0x24>
    1794:	d1 c0       	rjmp	.+418    	; 0x1938 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1796:	89 81       	ldd	r24, Y+1	; 0x01
    1798:	28 2f       	mov	r18, r24
    179a:	30 e0       	ldi	r19, 0x00	; 0
    179c:	3d 83       	std	Y+5, r19	; 0x05
    179e:	2c 83       	std	Y+4, r18	; 0x04
    17a0:	8c 81       	ldd	r24, Y+4	; 0x04
    17a2:	9d 81       	ldd	r25, Y+5	; 0x05
    17a4:	81 30       	cpi	r24, 0x01	; 1
    17a6:	91 05       	cpc	r25, r1
    17a8:	09 f4       	brne	.+2      	; 0x17ac <GPIO_writePin+0x3a>
    17aa:	43 c0       	rjmp	.+134    	; 0x1832 <GPIO_writePin+0xc0>
    17ac:	2c 81       	ldd	r18, Y+4	; 0x04
    17ae:	3d 81       	ldd	r19, Y+5	; 0x05
    17b0:	22 30       	cpi	r18, 0x02	; 2
    17b2:	31 05       	cpc	r19, r1
    17b4:	2c f4       	brge	.+10     	; 0x17c0 <GPIO_writePin+0x4e>
    17b6:	8c 81       	ldd	r24, Y+4	; 0x04
    17b8:	9d 81       	ldd	r25, Y+5	; 0x05
    17ba:	00 97       	sbiw	r24, 0x00	; 0
    17bc:	71 f0       	breq	.+28     	; 0x17da <GPIO_writePin+0x68>
    17be:	bc c0       	rjmp	.+376    	; 0x1938 <GPIO_writePin+0x1c6>
    17c0:	2c 81       	ldd	r18, Y+4	; 0x04
    17c2:	3d 81       	ldd	r19, Y+5	; 0x05
    17c4:	22 30       	cpi	r18, 0x02	; 2
    17c6:	31 05       	cpc	r19, r1
    17c8:	09 f4       	brne	.+2      	; 0x17cc <GPIO_writePin+0x5a>
    17ca:	5f c0       	rjmp	.+190    	; 0x188a <GPIO_writePin+0x118>
    17cc:	8c 81       	ldd	r24, Y+4	; 0x04
    17ce:	9d 81       	ldd	r25, Y+5	; 0x05
    17d0:	83 30       	cpi	r24, 0x03	; 3
    17d2:	91 05       	cpc	r25, r1
    17d4:	09 f4       	brne	.+2      	; 0x17d8 <GPIO_writePin+0x66>
    17d6:	85 c0       	rjmp	.+266    	; 0x18e2 <GPIO_writePin+0x170>
    17d8:	af c0       	rjmp	.+350    	; 0x1938 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    17da:	8b 81       	ldd	r24, Y+3	; 0x03
    17dc:	81 30       	cpi	r24, 0x01	; 1
    17de:	a1 f4       	brne	.+40     	; 0x1808 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    17e0:	ab e3       	ldi	r26, 0x3B	; 59
    17e2:	b0 e0       	ldi	r27, 0x00	; 0
    17e4:	eb e3       	ldi	r30, 0x3B	; 59
    17e6:	f0 e0       	ldi	r31, 0x00	; 0
    17e8:	80 81       	ld	r24, Z
    17ea:	48 2f       	mov	r20, r24
    17ec:	8a 81       	ldd	r24, Y+2	; 0x02
    17ee:	28 2f       	mov	r18, r24
    17f0:	30 e0       	ldi	r19, 0x00	; 0
    17f2:	81 e0       	ldi	r24, 0x01	; 1
    17f4:	90 e0       	ldi	r25, 0x00	; 0
    17f6:	02 2e       	mov	r0, r18
    17f8:	02 c0       	rjmp	.+4      	; 0x17fe <GPIO_writePin+0x8c>
    17fa:	88 0f       	add	r24, r24
    17fc:	99 1f       	adc	r25, r25
    17fe:	0a 94       	dec	r0
    1800:	e2 f7       	brpl	.-8      	; 0x17fa <GPIO_writePin+0x88>
    1802:	84 2b       	or	r24, r20
    1804:	8c 93       	st	X, r24
    1806:	98 c0       	rjmp	.+304    	; 0x1938 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1808:	ab e3       	ldi	r26, 0x3B	; 59
    180a:	b0 e0       	ldi	r27, 0x00	; 0
    180c:	eb e3       	ldi	r30, 0x3B	; 59
    180e:	f0 e0       	ldi	r31, 0x00	; 0
    1810:	80 81       	ld	r24, Z
    1812:	48 2f       	mov	r20, r24
    1814:	8a 81       	ldd	r24, Y+2	; 0x02
    1816:	28 2f       	mov	r18, r24
    1818:	30 e0       	ldi	r19, 0x00	; 0
    181a:	81 e0       	ldi	r24, 0x01	; 1
    181c:	90 e0       	ldi	r25, 0x00	; 0
    181e:	02 2e       	mov	r0, r18
    1820:	02 c0       	rjmp	.+4      	; 0x1826 <GPIO_writePin+0xb4>
    1822:	88 0f       	add	r24, r24
    1824:	99 1f       	adc	r25, r25
    1826:	0a 94       	dec	r0
    1828:	e2 f7       	brpl	.-8      	; 0x1822 <GPIO_writePin+0xb0>
    182a:	80 95       	com	r24
    182c:	84 23       	and	r24, r20
    182e:	8c 93       	st	X, r24
    1830:	83 c0       	rjmp	.+262    	; 0x1938 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1832:	8b 81       	ldd	r24, Y+3	; 0x03
    1834:	81 30       	cpi	r24, 0x01	; 1
    1836:	a1 f4       	brne	.+40     	; 0x1860 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1838:	a8 e3       	ldi	r26, 0x38	; 56
    183a:	b0 e0       	ldi	r27, 0x00	; 0
    183c:	e8 e3       	ldi	r30, 0x38	; 56
    183e:	f0 e0       	ldi	r31, 0x00	; 0
    1840:	80 81       	ld	r24, Z
    1842:	48 2f       	mov	r20, r24
    1844:	8a 81       	ldd	r24, Y+2	; 0x02
    1846:	28 2f       	mov	r18, r24
    1848:	30 e0       	ldi	r19, 0x00	; 0
    184a:	81 e0       	ldi	r24, 0x01	; 1
    184c:	90 e0       	ldi	r25, 0x00	; 0
    184e:	02 2e       	mov	r0, r18
    1850:	02 c0       	rjmp	.+4      	; 0x1856 <GPIO_writePin+0xe4>
    1852:	88 0f       	add	r24, r24
    1854:	99 1f       	adc	r25, r25
    1856:	0a 94       	dec	r0
    1858:	e2 f7       	brpl	.-8      	; 0x1852 <GPIO_writePin+0xe0>
    185a:	84 2b       	or	r24, r20
    185c:	8c 93       	st	X, r24
    185e:	6c c0       	rjmp	.+216    	; 0x1938 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1860:	a8 e3       	ldi	r26, 0x38	; 56
    1862:	b0 e0       	ldi	r27, 0x00	; 0
    1864:	e8 e3       	ldi	r30, 0x38	; 56
    1866:	f0 e0       	ldi	r31, 0x00	; 0
    1868:	80 81       	ld	r24, Z
    186a:	48 2f       	mov	r20, r24
    186c:	8a 81       	ldd	r24, Y+2	; 0x02
    186e:	28 2f       	mov	r18, r24
    1870:	30 e0       	ldi	r19, 0x00	; 0
    1872:	81 e0       	ldi	r24, 0x01	; 1
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	02 2e       	mov	r0, r18
    1878:	02 c0       	rjmp	.+4      	; 0x187e <GPIO_writePin+0x10c>
    187a:	88 0f       	add	r24, r24
    187c:	99 1f       	adc	r25, r25
    187e:	0a 94       	dec	r0
    1880:	e2 f7       	brpl	.-8      	; 0x187a <GPIO_writePin+0x108>
    1882:	80 95       	com	r24
    1884:	84 23       	and	r24, r20
    1886:	8c 93       	st	X, r24
    1888:	57 c0       	rjmp	.+174    	; 0x1938 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    188a:	8b 81       	ldd	r24, Y+3	; 0x03
    188c:	81 30       	cpi	r24, 0x01	; 1
    188e:	a1 f4       	brne	.+40     	; 0x18b8 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1890:	a5 e3       	ldi	r26, 0x35	; 53
    1892:	b0 e0       	ldi	r27, 0x00	; 0
    1894:	e5 e3       	ldi	r30, 0x35	; 53
    1896:	f0 e0       	ldi	r31, 0x00	; 0
    1898:	80 81       	ld	r24, Z
    189a:	48 2f       	mov	r20, r24
    189c:	8a 81       	ldd	r24, Y+2	; 0x02
    189e:	28 2f       	mov	r18, r24
    18a0:	30 e0       	ldi	r19, 0x00	; 0
    18a2:	81 e0       	ldi	r24, 0x01	; 1
    18a4:	90 e0       	ldi	r25, 0x00	; 0
    18a6:	02 2e       	mov	r0, r18
    18a8:	02 c0       	rjmp	.+4      	; 0x18ae <GPIO_writePin+0x13c>
    18aa:	88 0f       	add	r24, r24
    18ac:	99 1f       	adc	r25, r25
    18ae:	0a 94       	dec	r0
    18b0:	e2 f7       	brpl	.-8      	; 0x18aa <GPIO_writePin+0x138>
    18b2:	84 2b       	or	r24, r20
    18b4:	8c 93       	st	X, r24
    18b6:	40 c0       	rjmp	.+128    	; 0x1938 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    18b8:	a5 e3       	ldi	r26, 0x35	; 53
    18ba:	b0 e0       	ldi	r27, 0x00	; 0
    18bc:	e5 e3       	ldi	r30, 0x35	; 53
    18be:	f0 e0       	ldi	r31, 0x00	; 0
    18c0:	80 81       	ld	r24, Z
    18c2:	48 2f       	mov	r20, r24
    18c4:	8a 81       	ldd	r24, Y+2	; 0x02
    18c6:	28 2f       	mov	r18, r24
    18c8:	30 e0       	ldi	r19, 0x00	; 0
    18ca:	81 e0       	ldi	r24, 0x01	; 1
    18cc:	90 e0       	ldi	r25, 0x00	; 0
    18ce:	02 2e       	mov	r0, r18
    18d0:	02 c0       	rjmp	.+4      	; 0x18d6 <GPIO_writePin+0x164>
    18d2:	88 0f       	add	r24, r24
    18d4:	99 1f       	adc	r25, r25
    18d6:	0a 94       	dec	r0
    18d8:	e2 f7       	brpl	.-8      	; 0x18d2 <GPIO_writePin+0x160>
    18da:	80 95       	com	r24
    18dc:	84 23       	and	r24, r20
    18de:	8c 93       	st	X, r24
    18e0:	2b c0       	rjmp	.+86     	; 0x1938 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    18e2:	8b 81       	ldd	r24, Y+3	; 0x03
    18e4:	81 30       	cpi	r24, 0x01	; 1
    18e6:	a1 f4       	brne	.+40     	; 0x1910 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    18e8:	a2 e3       	ldi	r26, 0x32	; 50
    18ea:	b0 e0       	ldi	r27, 0x00	; 0
    18ec:	e2 e3       	ldi	r30, 0x32	; 50
    18ee:	f0 e0       	ldi	r31, 0x00	; 0
    18f0:	80 81       	ld	r24, Z
    18f2:	48 2f       	mov	r20, r24
    18f4:	8a 81       	ldd	r24, Y+2	; 0x02
    18f6:	28 2f       	mov	r18, r24
    18f8:	30 e0       	ldi	r19, 0x00	; 0
    18fa:	81 e0       	ldi	r24, 0x01	; 1
    18fc:	90 e0       	ldi	r25, 0x00	; 0
    18fe:	02 2e       	mov	r0, r18
    1900:	02 c0       	rjmp	.+4      	; 0x1906 <GPIO_writePin+0x194>
    1902:	88 0f       	add	r24, r24
    1904:	99 1f       	adc	r25, r25
    1906:	0a 94       	dec	r0
    1908:	e2 f7       	brpl	.-8      	; 0x1902 <GPIO_writePin+0x190>
    190a:	84 2b       	or	r24, r20
    190c:	8c 93       	st	X, r24
    190e:	14 c0       	rjmp	.+40     	; 0x1938 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1910:	a2 e3       	ldi	r26, 0x32	; 50
    1912:	b0 e0       	ldi	r27, 0x00	; 0
    1914:	e2 e3       	ldi	r30, 0x32	; 50
    1916:	f0 e0       	ldi	r31, 0x00	; 0
    1918:	80 81       	ld	r24, Z
    191a:	48 2f       	mov	r20, r24
    191c:	8a 81       	ldd	r24, Y+2	; 0x02
    191e:	28 2f       	mov	r18, r24
    1920:	30 e0       	ldi	r19, 0x00	; 0
    1922:	81 e0       	ldi	r24, 0x01	; 1
    1924:	90 e0       	ldi	r25, 0x00	; 0
    1926:	02 2e       	mov	r0, r18
    1928:	02 c0       	rjmp	.+4      	; 0x192e <GPIO_writePin+0x1bc>
    192a:	88 0f       	add	r24, r24
    192c:	99 1f       	adc	r25, r25
    192e:	0a 94       	dec	r0
    1930:	e2 f7       	brpl	.-8      	; 0x192a <GPIO_writePin+0x1b8>
    1932:	80 95       	com	r24
    1934:	84 23       	and	r24, r20
    1936:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1938:	0f 90       	pop	r0
    193a:	0f 90       	pop	r0
    193c:	0f 90       	pop	r0
    193e:	0f 90       	pop	r0
    1940:	0f 90       	pop	r0
    1942:	cf 91       	pop	r28
    1944:	df 91       	pop	r29
    1946:	08 95       	ret

00001948 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1948:	df 93       	push	r29
    194a:	cf 93       	push	r28
    194c:	00 d0       	rcall	.+0      	; 0x194e <GPIO_readPin+0x6>
    194e:	00 d0       	rcall	.+0      	; 0x1950 <GPIO_readPin+0x8>
    1950:	0f 92       	push	r0
    1952:	cd b7       	in	r28, 0x3d	; 61
    1954:	de b7       	in	r29, 0x3e	; 62
    1956:	8a 83       	std	Y+2, r24	; 0x02
    1958:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    195a:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    195c:	8b 81       	ldd	r24, Y+3	; 0x03
    195e:	88 30       	cpi	r24, 0x08	; 8
    1960:	08 f0       	brcs	.+2      	; 0x1964 <GPIO_readPin+0x1c>
    1962:	84 c0       	rjmp	.+264    	; 0x1a6c <GPIO_readPin+0x124>
    1964:	8a 81       	ldd	r24, Y+2	; 0x02
    1966:	84 30       	cpi	r24, 0x04	; 4
    1968:	08 f0       	brcs	.+2      	; 0x196c <GPIO_readPin+0x24>
    196a:	80 c0       	rjmp	.+256    	; 0x1a6c <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    196c:	8a 81       	ldd	r24, Y+2	; 0x02
    196e:	28 2f       	mov	r18, r24
    1970:	30 e0       	ldi	r19, 0x00	; 0
    1972:	3d 83       	std	Y+5, r19	; 0x05
    1974:	2c 83       	std	Y+4, r18	; 0x04
    1976:	4c 81       	ldd	r20, Y+4	; 0x04
    1978:	5d 81       	ldd	r21, Y+5	; 0x05
    197a:	41 30       	cpi	r20, 0x01	; 1
    197c:	51 05       	cpc	r21, r1
    197e:	79 f1       	breq	.+94     	; 0x19de <GPIO_readPin+0x96>
    1980:	8c 81       	ldd	r24, Y+4	; 0x04
    1982:	9d 81       	ldd	r25, Y+5	; 0x05
    1984:	82 30       	cpi	r24, 0x02	; 2
    1986:	91 05       	cpc	r25, r1
    1988:	34 f4       	brge	.+12     	; 0x1996 <GPIO_readPin+0x4e>
    198a:	2c 81       	ldd	r18, Y+4	; 0x04
    198c:	3d 81       	ldd	r19, Y+5	; 0x05
    198e:	21 15       	cp	r18, r1
    1990:	31 05       	cpc	r19, r1
    1992:	69 f0       	breq	.+26     	; 0x19ae <GPIO_readPin+0x66>
    1994:	6b c0       	rjmp	.+214    	; 0x1a6c <GPIO_readPin+0x124>
    1996:	4c 81       	ldd	r20, Y+4	; 0x04
    1998:	5d 81       	ldd	r21, Y+5	; 0x05
    199a:	42 30       	cpi	r20, 0x02	; 2
    199c:	51 05       	cpc	r21, r1
    199e:	b9 f1       	breq	.+110    	; 0x1a0e <GPIO_readPin+0xc6>
    19a0:	8c 81       	ldd	r24, Y+4	; 0x04
    19a2:	9d 81       	ldd	r25, Y+5	; 0x05
    19a4:	83 30       	cpi	r24, 0x03	; 3
    19a6:	91 05       	cpc	r25, r1
    19a8:	09 f4       	brne	.+2      	; 0x19ac <GPIO_readPin+0x64>
    19aa:	49 c0       	rjmp	.+146    	; 0x1a3e <GPIO_readPin+0xf6>
    19ac:	5f c0       	rjmp	.+190    	; 0x1a6c <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    19ae:	e9 e3       	ldi	r30, 0x39	; 57
    19b0:	f0 e0       	ldi	r31, 0x00	; 0
    19b2:	80 81       	ld	r24, Z
    19b4:	28 2f       	mov	r18, r24
    19b6:	30 e0       	ldi	r19, 0x00	; 0
    19b8:	8b 81       	ldd	r24, Y+3	; 0x03
    19ba:	88 2f       	mov	r24, r24
    19bc:	90 e0       	ldi	r25, 0x00	; 0
    19be:	a9 01       	movw	r20, r18
    19c0:	02 c0       	rjmp	.+4      	; 0x19c6 <GPIO_readPin+0x7e>
    19c2:	55 95       	asr	r21
    19c4:	47 95       	ror	r20
    19c6:	8a 95       	dec	r24
    19c8:	e2 f7       	brpl	.-8      	; 0x19c2 <GPIO_readPin+0x7a>
    19ca:	ca 01       	movw	r24, r20
    19cc:	81 70       	andi	r24, 0x01	; 1
    19ce:	90 70       	andi	r25, 0x00	; 0
    19d0:	88 23       	and	r24, r24
    19d2:	19 f0       	breq	.+6      	; 0x19da <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    19d4:	81 e0       	ldi	r24, 0x01	; 1
    19d6:	89 83       	std	Y+1, r24	; 0x01
    19d8:	49 c0       	rjmp	.+146    	; 0x1a6c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    19da:	19 82       	std	Y+1, r1	; 0x01
    19dc:	47 c0       	rjmp	.+142    	; 0x1a6c <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    19de:	e6 e3       	ldi	r30, 0x36	; 54
    19e0:	f0 e0       	ldi	r31, 0x00	; 0
    19e2:	80 81       	ld	r24, Z
    19e4:	28 2f       	mov	r18, r24
    19e6:	30 e0       	ldi	r19, 0x00	; 0
    19e8:	8b 81       	ldd	r24, Y+3	; 0x03
    19ea:	88 2f       	mov	r24, r24
    19ec:	90 e0       	ldi	r25, 0x00	; 0
    19ee:	a9 01       	movw	r20, r18
    19f0:	02 c0       	rjmp	.+4      	; 0x19f6 <GPIO_readPin+0xae>
    19f2:	55 95       	asr	r21
    19f4:	47 95       	ror	r20
    19f6:	8a 95       	dec	r24
    19f8:	e2 f7       	brpl	.-8      	; 0x19f2 <GPIO_readPin+0xaa>
    19fa:	ca 01       	movw	r24, r20
    19fc:	81 70       	andi	r24, 0x01	; 1
    19fe:	90 70       	andi	r25, 0x00	; 0
    1a00:	88 23       	and	r24, r24
    1a02:	19 f0       	breq	.+6      	; 0x1a0a <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1a04:	81 e0       	ldi	r24, 0x01	; 1
    1a06:	89 83       	std	Y+1, r24	; 0x01
    1a08:	31 c0       	rjmp	.+98     	; 0x1a6c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1a0a:	19 82       	std	Y+1, r1	; 0x01
    1a0c:	2f c0       	rjmp	.+94     	; 0x1a6c <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1a0e:	e3 e3       	ldi	r30, 0x33	; 51
    1a10:	f0 e0       	ldi	r31, 0x00	; 0
    1a12:	80 81       	ld	r24, Z
    1a14:	28 2f       	mov	r18, r24
    1a16:	30 e0       	ldi	r19, 0x00	; 0
    1a18:	8b 81       	ldd	r24, Y+3	; 0x03
    1a1a:	88 2f       	mov	r24, r24
    1a1c:	90 e0       	ldi	r25, 0x00	; 0
    1a1e:	a9 01       	movw	r20, r18
    1a20:	02 c0       	rjmp	.+4      	; 0x1a26 <GPIO_readPin+0xde>
    1a22:	55 95       	asr	r21
    1a24:	47 95       	ror	r20
    1a26:	8a 95       	dec	r24
    1a28:	e2 f7       	brpl	.-8      	; 0x1a22 <GPIO_readPin+0xda>
    1a2a:	ca 01       	movw	r24, r20
    1a2c:	81 70       	andi	r24, 0x01	; 1
    1a2e:	90 70       	andi	r25, 0x00	; 0
    1a30:	88 23       	and	r24, r24
    1a32:	19 f0       	breq	.+6      	; 0x1a3a <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1a34:	81 e0       	ldi	r24, 0x01	; 1
    1a36:	89 83       	std	Y+1, r24	; 0x01
    1a38:	19 c0       	rjmp	.+50     	; 0x1a6c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1a3a:	19 82       	std	Y+1, r1	; 0x01
    1a3c:	17 c0       	rjmp	.+46     	; 0x1a6c <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1a3e:	e0 e3       	ldi	r30, 0x30	; 48
    1a40:	f0 e0       	ldi	r31, 0x00	; 0
    1a42:	80 81       	ld	r24, Z
    1a44:	28 2f       	mov	r18, r24
    1a46:	30 e0       	ldi	r19, 0x00	; 0
    1a48:	8b 81       	ldd	r24, Y+3	; 0x03
    1a4a:	88 2f       	mov	r24, r24
    1a4c:	90 e0       	ldi	r25, 0x00	; 0
    1a4e:	a9 01       	movw	r20, r18
    1a50:	02 c0       	rjmp	.+4      	; 0x1a56 <GPIO_readPin+0x10e>
    1a52:	55 95       	asr	r21
    1a54:	47 95       	ror	r20
    1a56:	8a 95       	dec	r24
    1a58:	e2 f7       	brpl	.-8      	; 0x1a52 <GPIO_readPin+0x10a>
    1a5a:	ca 01       	movw	r24, r20
    1a5c:	81 70       	andi	r24, 0x01	; 1
    1a5e:	90 70       	andi	r25, 0x00	; 0
    1a60:	88 23       	and	r24, r24
    1a62:	19 f0       	breq	.+6      	; 0x1a6a <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1a64:	81 e0       	ldi	r24, 0x01	; 1
    1a66:	89 83       	std	Y+1, r24	; 0x01
    1a68:	01 c0       	rjmp	.+2      	; 0x1a6c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1a6a:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1a6c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a6e:	0f 90       	pop	r0
    1a70:	0f 90       	pop	r0
    1a72:	0f 90       	pop	r0
    1a74:	0f 90       	pop	r0
    1a76:	0f 90       	pop	r0
    1a78:	cf 91       	pop	r28
    1a7a:	df 91       	pop	r29
    1a7c:	08 95       	ret

00001a7e <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1a7e:	df 93       	push	r29
    1a80:	cf 93       	push	r28
    1a82:	00 d0       	rcall	.+0      	; 0x1a84 <GPIO_setupPortDirection+0x6>
    1a84:	00 d0       	rcall	.+0      	; 0x1a86 <GPIO_setupPortDirection+0x8>
    1a86:	cd b7       	in	r28, 0x3d	; 61
    1a88:	de b7       	in	r29, 0x3e	; 62
    1a8a:	89 83       	std	Y+1, r24	; 0x01
    1a8c:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1a8e:	89 81       	ldd	r24, Y+1	; 0x01
    1a90:	84 30       	cpi	r24, 0x04	; 4
    1a92:	90 f5       	brcc	.+100    	; 0x1af8 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1a94:	89 81       	ldd	r24, Y+1	; 0x01
    1a96:	28 2f       	mov	r18, r24
    1a98:	30 e0       	ldi	r19, 0x00	; 0
    1a9a:	3c 83       	std	Y+4, r19	; 0x04
    1a9c:	2b 83       	std	Y+3, r18	; 0x03
    1a9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa0:	9c 81       	ldd	r25, Y+4	; 0x04
    1aa2:	81 30       	cpi	r24, 0x01	; 1
    1aa4:	91 05       	cpc	r25, r1
    1aa6:	d1 f0       	breq	.+52     	; 0x1adc <GPIO_setupPortDirection+0x5e>
    1aa8:	2b 81       	ldd	r18, Y+3	; 0x03
    1aaa:	3c 81       	ldd	r19, Y+4	; 0x04
    1aac:	22 30       	cpi	r18, 0x02	; 2
    1aae:	31 05       	cpc	r19, r1
    1ab0:	2c f4       	brge	.+10     	; 0x1abc <GPIO_setupPortDirection+0x3e>
    1ab2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ab6:	00 97       	sbiw	r24, 0x00	; 0
    1ab8:	61 f0       	breq	.+24     	; 0x1ad2 <GPIO_setupPortDirection+0x54>
    1aba:	1e c0       	rjmp	.+60     	; 0x1af8 <GPIO_setupPortDirection+0x7a>
    1abc:	2b 81       	ldd	r18, Y+3	; 0x03
    1abe:	3c 81       	ldd	r19, Y+4	; 0x04
    1ac0:	22 30       	cpi	r18, 0x02	; 2
    1ac2:	31 05       	cpc	r19, r1
    1ac4:	81 f0       	breq	.+32     	; 0x1ae6 <GPIO_setupPortDirection+0x68>
    1ac6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac8:	9c 81       	ldd	r25, Y+4	; 0x04
    1aca:	83 30       	cpi	r24, 0x03	; 3
    1acc:	91 05       	cpc	r25, r1
    1ace:	81 f0       	breq	.+32     	; 0x1af0 <GPIO_setupPortDirection+0x72>
    1ad0:	13 c0       	rjmp	.+38     	; 0x1af8 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1ad2:	ea e3       	ldi	r30, 0x3A	; 58
    1ad4:	f0 e0       	ldi	r31, 0x00	; 0
    1ad6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad8:	80 83       	st	Z, r24
    1ada:	0e c0       	rjmp	.+28     	; 0x1af8 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1adc:	e7 e3       	ldi	r30, 0x37	; 55
    1ade:	f0 e0       	ldi	r31, 0x00	; 0
    1ae0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae2:	80 83       	st	Z, r24
    1ae4:	09 c0       	rjmp	.+18     	; 0x1af8 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1ae6:	e4 e3       	ldi	r30, 0x34	; 52
    1ae8:	f0 e0       	ldi	r31, 0x00	; 0
    1aea:	8a 81       	ldd	r24, Y+2	; 0x02
    1aec:	80 83       	st	Z, r24
    1aee:	04 c0       	rjmp	.+8      	; 0x1af8 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1af0:	e1 e3       	ldi	r30, 0x31	; 49
    1af2:	f0 e0       	ldi	r31, 0x00	; 0
    1af4:	8a 81       	ldd	r24, Y+2	; 0x02
    1af6:	80 83       	st	Z, r24
			break;
		}
	}
}
    1af8:	0f 90       	pop	r0
    1afa:	0f 90       	pop	r0
    1afc:	0f 90       	pop	r0
    1afe:	0f 90       	pop	r0
    1b00:	cf 91       	pop	r28
    1b02:	df 91       	pop	r29
    1b04:	08 95       	ret

00001b06 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1b06:	df 93       	push	r29
    1b08:	cf 93       	push	r28
    1b0a:	00 d0       	rcall	.+0      	; 0x1b0c <GPIO_writePort+0x6>
    1b0c:	00 d0       	rcall	.+0      	; 0x1b0e <GPIO_writePort+0x8>
    1b0e:	cd b7       	in	r28, 0x3d	; 61
    1b10:	de b7       	in	r29, 0x3e	; 62
    1b12:	89 83       	std	Y+1, r24	; 0x01
    1b14:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1b16:	89 81       	ldd	r24, Y+1	; 0x01
    1b18:	84 30       	cpi	r24, 0x04	; 4
    1b1a:	90 f5       	brcc	.+100    	; 0x1b80 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1b1c:	89 81       	ldd	r24, Y+1	; 0x01
    1b1e:	28 2f       	mov	r18, r24
    1b20:	30 e0       	ldi	r19, 0x00	; 0
    1b22:	3c 83       	std	Y+4, r19	; 0x04
    1b24:	2b 83       	std	Y+3, r18	; 0x03
    1b26:	8b 81       	ldd	r24, Y+3	; 0x03
    1b28:	9c 81       	ldd	r25, Y+4	; 0x04
    1b2a:	81 30       	cpi	r24, 0x01	; 1
    1b2c:	91 05       	cpc	r25, r1
    1b2e:	d1 f0       	breq	.+52     	; 0x1b64 <GPIO_writePort+0x5e>
    1b30:	2b 81       	ldd	r18, Y+3	; 0x03
    1b32:	3c 81       	ldd	r19, Y+4	; 0x04
    1b34:	22 30       	cpi	r18, 0x02	; 2
    1b36:	31 05       	cpc	r19, r1
    1b38:	2c f4       	brge	.+10     	; 0x1b44 <GPIO_writePort+0x3e>
    1b3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b3c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b3e:	00 97       	sbiw	r24, 0x00	; 0
    1b40:	61 f0       	breq	.+24     	; 0x1b5a <GPIO_writePort+0x54>
    1b42:	1e c0       	rjmp	.+60     	; 0x1b80 <GPIO_writePort+0x7a>
    1b44:	2b 81       	ldd	r18, Y+3	; 0x03
    1b46:	3c 81       	ldd	r19, Y+4	; 0x04
    1b48:	22 30       	cpi	r18, 0x02	; 2
    1b4a:	31 05       	cpc	r19, r1
    1b4c:	81 f0       	breq	.+32     	; 0x1b6e <GPIO_writePort+0x68>
    1b4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b50:	9c 81       	ldd	r25, Y+4	; 0x04
    1b52:	83 30       	cpi	r24, 0x03	; 3
    1b54:	91 05       	cpc	r25, r1
    1b56:	81 f0       	breq	.+32     	; 0x1b78 <GPIO_writePort+0x72>
    1b58:	13 c0       	rjmp	.+38     	; 0x1b80 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1b5a:	eb e3       	ldi	r30, 0x3B	; 59
    1b5c:	f0 e0       	ldi	r31, 0x00	; 0
    1b5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b60:	80 83       	st	Z, r24
    1b62:	0e c0       	rjmp	.+28     	; 0x1b80 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1b64:	e8 e3       	ldi	r30, 0x38	; 56
    1b66:	f0 e0       	ldi	r31, 0x00	; 0
    1b68:	8a 81       	ldd	r24, Y+2	; 0x02
    1b6a:	80 83       	st	Z, r24
    1b6c:	09 c0       	rjmp	.+18     	; 0x1b80 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1b6e:	e5 e3       	ldi	r30, 0x35	; 53
    1b70:	f0 e0       	ldi	r31, 0x00	; 0
    1b72:	8a 81       	ldd	r24, Y+2	; 0x02
    1b74:	80 83       	st	Z, r24
    1b76:	04 c0       	rjmp	.+8      	; 0x1b80 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1b78:	e2 e3       	ldi	r30, 0x32	; 50
    1b7a:	f0 e0       	ldi	r31, 0x00	; 0
    1b7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b7e:	80 83       	st	Z, r24
			break;
		}
	}
}
    1b80:	0f 90       	pop	r0
    1b82:	0f 90       	pop	r0
    1b84:	0f 90       	pop	r0
    1b86:	0f 90       	pop	r0
    1b88:	cf 91       	pop	r28
    1b8a:	df 91       	pop	r29
    1b8c:	08 95       	ret

00001b8e <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1b8e:	df 93       	push	r29
    1b90:	cf 93       	push	r28
    1b92:	00 d0       	rcall	.+0      	; 0x1b94 <GPIO_readPort+0x6>
    1b94:	00 d0       	rcall	.+0      	; 0x1b96 <GPIO_readPort+0x8>
    1b96:	cd b7       	in	r28, 0x3d	; 61
    1b98:	de b7       	in	r29, 0x3e	; 62
    1b9a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1b9c:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1b9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba0:	84 30       	cpi	r24, 0x04	; 4
    1ba2:	90 f5       	brcc	.+100    	; 0x1c08 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1ba4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba6:	28 2f       	mov	r18, r24
    1ba8:	30 e0       	ldi	r19, 0x00	; 0
    1baa:	3c 83       	std	Y+4, r19	; 0x04
    1bac:	2b 83       	std	Y+3, r18	; 0x03
    1bae:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb0:	9c 81       	ldd	r25, Y+4	; 0x04
    1bb2:	81 30       	cpi	r24, 0x01	; 1
    1bb4:	91 05       	cpc	r25, r1
    1bb6:	d1 f0       	breq	.+52     	; 0x1bec <GPIO_readPort+0x5e>
    1bb8:	2b 81       	ldd	r18, Y+3	; 0x03
    1bba:	3c 81       	ldd	r19, Y+4	; 0x04
    1bbc:	22 30       	cpi	r18, 0x02	; 2
    1bbe:	31 05       	cpc	r19, r1
    1bc0:	2c f4       	brge	.+10     	; 0x1bcc <GPIO_readPort+0x3e>
    1bc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc4:	9c 81       	ldd	r25, Y+4	; 0x04
    1bc6:	00 97       	sbiw	r24, 0x00	; 0
    1bc8:	61 f0       	breq	.+24     	; 0x1be2 <GPIO_readPort+0x54>
    1bca:	1e c0       	rjmp	.+60     	; 0x1c08 <GPIO_readPort+0x7a>
    1bcc:	2b 81       	ldd	r18, Y+3	; 0x03
    1bce:	3c 81       	ldd	r19, Y+4	; 0x04
    1bd0:	22 30       	cpi	r18, 0x02	; 2
    1bd2:	31 05       	cpc	r19, r1
    1bd4:	81 f0       	breq	.+32     	; 0x1bf6 <GPIO_readPort+0x68>
    1bd6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd8:	9c 81       	ldd	r25, Y+4	; 0x04
    1bda:	83 30       	cpi	r24, 0x03	; 3
    1bdc:	91 05       	cpc	r25, r1
    1bde:	81 f0       	breq	.+32     	; 0x1c00 <GPIO_readPort+0x72>
    1be0:	13 c0       	rjmp	.+38     	; 0x1c08 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1be2:	e9 e3       	ldi	r30, 0x39	; 57
    1be4:	f0 e0       	ldi	r31, 0x00	; 0
    1be6:	80 81       	ld	r24, Z
    1be8:	89 83       	std	Y+1, r24	; 0x01
    1bea:	0e c0       	rjmp	.+28     	; 0x1c08 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1bec:	e6 e3       	ldi	r30, 0x36	; 54
    1bee:	f0 e0       	ldi	r31, 0x00	; 0
    1bf0:	80 81       	ld	r24, Z
    1bf2:	89 83       	std	Y+1, r24	; 0x01
    1bf4:	09 c0       	rjmp	.+18     	; 0x1c08 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1bf6:	e3 e3       	ldi	r30, 0x33	; 51
    1bf8:	f0 e0       	ldi	r31, 0x00	; 0
    1bfa:	80 81       	ld	r24, Z
    1bfc:	89 83       	std	Y+1, r24	; 0x01
    1bfe:	04 c0       	rjmp	.+8      	; 0x1c08 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1c00:	e0 e3       	ldi	r30, 0x30	; 48
    1c02:	f0 e0       	ldi	r31, 0x00	; 0
    1c04:	80 81       	ld	r24, Z
    1c06:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1c08:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c0a:	0f 90       	pop	r0
    1c0c:	0f 90       	pop	r0
    1c0e:	0f 90       	pop	r0
    1c10:	0f 90       	pop	r0
    1c12:	cf 91       	pop	r28
    1c14:	df 91       	pop	r29
    1c16:	08 95       	ret

00001c18 <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    1c18:	df 93       	push	r29
    1c1a:	cf 93       	push	r28
    1c1c:	cd b7       	in	r28, 0x3d	; 61
    1c1e:	de b7       	in	r29, 0x3e	; 62
    1c20:	60 97       	sbiw	r28, 0x10	; 16
    1c22:	0f b6       	in	r0, 0x3f	; 63
    1c24:	f8 94       	cli
    1c26:	de bf       	out	0x3e, r29	; 62
    1c28:	0f be       	out	0x3f, r0	; 63
    1c2a:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    1c2c:	82 e0       	ldi	r24, 0x02	; 2
    1c2e:	60 e0       	ldi	r22, 0x00	; 0
    1c30:	40 e0       	ldi	r20, 0x00	; 0
    1c32:	0e 94 ce 0a 	call	0x159c	; 0x159c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    1c36:	82 e0       	ldi	r24, 0x02	; 2
    1c38:	61 e0       	ldi	r22, 0x01	; 1
    1c3a:	40 e0       	ldi	r20, 0x00	; 0
    1c3c:	0e 94 ce 0a 	call	0x159c	; 0x159c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    1c40:	82 e0       	ldi	r24, 0x02	; 2
    1c42:	62 e0       	ldi	r22, 0x02	; 2
    1c44:	40 e0       	ldi	r20, 0x00	; 0
    1c46:	0e 94 ce 0a 	call	0x159c	; 0x159c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    1c4a:	82 e0       	ldi	r24, 0x02	; 2
    1c4c:	63 e0       	ldi	r22, 0x03	; 3
    1c4e:	40 e0       	ldi	r20, 0x00	; 0
    1c50:	0e 94 ce 0a 	call	0x159c	; 0x159c <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    1c54:	82 e0       	ldi	r24, 0x02	; 2
    1c56:	64 e0       	ldi	r22, 0x04	; 4
    1c58:	40 e0       	ldi	r20, 0x00	; 0
    1c5a:	0e 94 ce 0a 	call	0x159c	; 0x159c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    1c5e:	82 e0       	ldi	r24, 0x02	; 2
    1c60:	65 e0       	ldi	r22, 0x05	; 5
    1c62:	40 e0       	ldi	r20, 0x00	; 0
    1c64:	0e 94 ce 0a 	call	0x159c	; 0x159c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    1c68:	82 e0       	ldi	r24, 0x02	; 2
    1c6a:	66 e0       	ldi	r22, 0x06	; 6
    1c6c:	40 e0       	ldi	r20, 0x00	; 0
    1c6e:	0e 94 ce 0a 	call	0x159c	; 0x159c <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    1c72:	82 e0       	ldi	r24, 0x02	; 2
    1c74:	67 e0       	ldi	r22, 0x07	; 7
    1c76:	40 e0       	ldi	r20, 0x00	; 0
    1c78:	0e 94 ce 0a 	call	0x159c	; 0x159c <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1c7c:	1f 86       	std	Y+15, r1	; 0x0f
    1c7e:	ab c0       	rjmp	.+342    	; 0x1dd6 <KEYPAD_getPressedKey+0x1be>
		{
			/*
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    1c80:	82 e0       	ldi	r24, 0x02	; 2
    1c82:	6f 85       	ldd	r22, Y+15	; 0x0f
    1c84:	41 e0       	ldi	r20, 0x01	; 1
    1c86:	0e 94 ce 0a 	call	0x159c	; 0x159c <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    1c8a:	82 e0       	ldi	r24, 0x02	; 2
    1c8c:	6f 85       	ldd	r22, Y+15	; 0x0f
    1c8e:	40 e0       	ldi	r20, 0x00	; 0
    1c90:	0e 94 b9 0b 	call	0x1772	; 0x1772 <GPIO_writePin>
    1c94:	80 e0       	ldi	r24, 0x00	; 0
    1c96:	90 e0       	ldi	r25, 0x00	; 0
    1c98:	a0 ea       	ldi	r26, 0xA0	; 160
    1c9a:	b0 e4       	ldi	r27, 0x40	; 64
    1c9c:	8b 87       	std	Y+11, r24	; 0x0b
    1c9e:	9c 87       	std	Y+12, r25	; 0x0c
    1ca0:	ad 87       	std	Y+13, r26	; 0x0d
    1ca2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ca4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ca6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ca8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1caa:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cac:	20 e0       	ldi	r18, 0x00	; 0
    1cae:	30 e0       	ldi	r19, 0x00	; 0
    1cb0:	4a ef       	ldi	r20, 0xFA	; 250
    1cb2:	54 e4       	ldi	r21, 0x44	; 68
    1cb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cb8:	dc 01       	movw	r26, r24
    1cba:	cb 01       	movw	r24, r22
    1cbc:	8f 83       	std	Y+7, r24	; 0x07
    1cbe:	98 87       	std	Y+8, r25	; 0x08
    1cc0:	a9 87       	std	Y+9, r26	; 0x09
    1cc2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1cc4:	6f 81       	ldd	r22, Y+7	; 0x07
    1cc6:	78 85       	ldd	r23, Y+8	; 0x08
    1cc8:	89 85       	ldd	r24, Y+9	; 0x09
    1cca:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ccc:	20 e0       	ldi	r18, 0x00	; 0
    1cce:	30 e0       	ldi	r19, 0x00	; 0
    1cd0:	40 e8       	ldi	r20, 0x80	; 128
    1cd2:	5f e3       	ldi	r21, 0x3F	; 63
    1cd4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cd8:	88 23       	and	r24, r24
    1cda:	2c f4       	brge	.+10     	; 0x1ce6 <KEYPAD_getPressedKey+0xce>
		__ticks = 1;
    1cdc:	81 e0       	ldi	r24, 0x01	; 1
    1cde:	90 e0       	ldi	r25, 0x00	; 0
    1ce0:	9e 83       	std	Y+6, r25	; 0x06
    1ce2:	8d 83       	std	Y+5, r24	; 0x05
    1ce4:	3f c0       	rjmp	.+126    	; 0x1d64 <KEYPAD_getPressedKey+0x14c>
	else if (__tmp > 65535)
    1ce6:	6f 81       	ldd	r22, Y+7	; 0x07
    1ce8:	78 85       	ldd	r23, Y+8	; 0x08
    1cea:	89 85       	ldd	r24, Y+9	; 0x09
    1cec:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cee:	20 e0       	ldi	r18, 0x00	; 0
    1cf0:	3f ef       	ldi	r19, 0xFF	; 255
    1cf2:	4f e7       	ldi	r20, 0x7F	; 127
    1cf4:	57 e4       	ldi	r21, 0x47	; 71
    1cf6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cfa:	18 16       	cp	r1, r24
    1cfc:	4c f5       	brge	.+82     	; 0x1d50 <KEYPAD_getPressedKey+0x138>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cfe:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d00:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d02:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d04:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d06:	20 e0       	ldi	r18, 0x00	; 0
    1d08:	30 e0       	ldi	r19, 0x00	; 0
    1d0a:	40 e2       	ldi	r20, 0x20	; 32
    1d0c:	51 e4       	ldi	r21, 0x41	; 65
    1d0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d12:	dc 01       	movw	r26, r24
    1d14:	cb 01       	movw	r24, r22
    1d16:	bc 01       	movw	r22, r24
    1d18:	cd 01       	movw	r24, r26
    1d1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d1e:	dc 01       	movw	r26, r24
    1d20:	cb 01       	movw	r24, r22
    1d22:	9e 83       	std	Y+6, r25	; 0x06
    1d24:	8d 83       	std	Y+5, r24	; 0x05
    1d26:	0f c0       	rjmp	.+30     	; 0x1d46 <KEYPAD_getPressedKey+0x12e>
    1d28:	88 ec       	ldi	r24, 0xC8	; 200
    1d2a:	90 e0       	ldi	r25, 0x00	; 0
    1d2c:	9c 83       	std	Y+4, r25	; 0x04
    1d2e:	8b 83       	std	Y+3, r24	; 0x03
    1d30:	8b 81       	ldd	r24, Y+3	; 0x03
    1d32:	9c 81       	ldd	r25, Y+4	; 0x04
    1d34:	01 97       	sbiw	r24, 0x01	; 1
    1d36:	f1 f7       	brne	.-4      	; 0x1d34 <KEYPAD_getPressedKey+0x11c>
    1d38:	9c 83       	std	Y+4, r25	; 0x04
    1d3a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d3c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d3e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d40:	01 97       	sbiw	r24, 0x01	; 1
    1d42:	9e 83       	std	Y+6, r25	; 0x06
    1d44:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d46:	8d 81       	ldd	r24, Y+5	; 0x05
    1d48:	9e 81       	ldd	r25, Y+6	; 0x06
    1d4a:	00 97       	sbiw	r24, 0x00	; 0
    1d4c:	69 f7       	brne	.-38     	; 0x1d28 <KEYPAD_getPressedKey+0x110>
    1d4e:	14 c0       	rjmp	.+40     	; 0x1d78 <KEYPAD_getPressedKey+0x160>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d50:	6f 81       	ldd	r22, Y+7	; 0x07
    1d52:	78 85       	ldd	r23, Y+8	; 0x08
    1d54:	89 85       	ldd	r24, Y+9	; 0x09
    1d56:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d5c:	dc 01       	movw	r26, r24
    1d5e:	cb 01       	movw	r24, r22
    1d60:	9e 83       	std	Y+6, r25	; 0x06
    1d62:	8d 83       	std	Y+5, r24	; 0x05
    1d64:	8d 81       	ldd	r24, Y+5	; 0x05
    1d66:	9e 81       	ldd	r25, Y+6	; 0x06
    1d68:	9a 83       	std	Y+2, r25	; 0x02
    1d6a:	89 83       	std	Y+1, r24	; 0x01
    1d6c:	89 81       	ldd	r24, Y+1	; 0x01
    1d6e:	9a 81       	ldd	r25, Y+2	; 0x02
    1d70:	01 97       	sbiw	r24, 0x01	; 1
    1d72:	f1 f7       	brne	.-4      	; 0x1d70 <KEYPAD_getPressedKey+0x158>
    1d74:	9a 83       	std	Y+2, r25	; 0x02
    1d76:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(5);
			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1d78:	18 8a       	std	Y+16, r1	; 0x10
    1d7a:	22 c0       	rjmp	.+68     	; 0x1dc0 <KEYPAD_getPressedKey+0x1a8>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    1d7c:	88 89       	ldd	r24, Y+16	; 0x10
    1d7e:	98 2f       	mov	r25, r24
    1d80:	9c 5f       	subi	r25, 0xFC	; 252
    1d82:	82 e0       	ldi	r24, 0x02	; 2
    1d84:	69 2f       	mov	r22, r25
    1d86:	0e 94 a4 0c 	call	0x1948	; 0x1948 <GPIO_readPin>
    1d8a:	88 23       	and	r24, r24
    1d8c:	b1 f4       	brne	.+44     	; 0x1dba <KEYPAD_getPressedKey+0x1a2>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1d8e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d90:	88 2f       	mov	r24, r24
    1d92:	90 e0       	ldi	r25, 0x00	; 0
    1d94:	88 0f       	add	r24, r24
    1d96:	99 1f       	adc	r25, r25
    1d98:	88 0f       	add	r24, r24
    1d9a:	99 1f       	adc	r25, r25
    1d9c:	98 2f       	mov	r25, r24
    1d9e:	88 89       	ldd	r24, Y+16	; 0x10
    1da0:	89 0f       	add	r24, r25
    1da2:	8f 5f       	subi	r24, 0xFF	; 255
    1da4:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <KEYPAD_4x4_adjustKeyNumber>
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
		}
	}	
}
    1da8:	60 96       	adiw	r28, 0x10	; 16
    1daa:	0f b6       	in	r0, 0x3f	; 63
    1dac:	f8 94       	cli
    1dae:	de bf       	out	0x3e, r29	; 62
    1db0:	0f be       	out	0x3f, r0	; 63
    1db2:	cd bf       	out	0x3d, r28	; 61
    1db4:	cf 91       	pop	r28
    1db6:	df 91       	pop	r29
    1db8:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
			_delay_ms(5);
			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1dba:	88 89       	ldd	r24, Y+16	; 0x10
    1dbc:	8f 5f       	subi	r24, 0xFF	; 255
    1dbe:	88 8b       	std	Y+16, r24	; 0x10
    1dc0:	88 89       	ldd	r24, Y+16	; 0x10
    1dc2:	84 30       	cpi	r24, 0x04	; 4
    1dc4:	d8 f2       	brcs	.-74     	; 0x1d7c <KEYPAD_getPressedKey+0x164>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    1dc6:	82 e0       	ldi	r24, 0x02	; 2
    1dc8:	6f 85       	ldd	r22, Y+15	; 0x0f
    1dca:	40 e0       	ldi	r20, 0x00	; 0
    1dcc:	0e 94 ce 0a 	call	0x159c	; 0x159c <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1dd0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1dd2:	8f 5f       	subi	r24, 0xFF	; 255
    1dd4:	8f 87       	std	Y+15, r24	; 0x0f
    1dd6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1dd8:	84 30       	cpi	r24, 0x04	; 4
    1dda:	08 f4       	brcc	.+2      	; 0x1dde <KEYPAD_getPressedKey+0x1c6>
    1ddc:	51 cf       	rjmp	.-350    	; 0x1c80 <KEYPAD_getPressedKey+0x68>
    1dde:	4e cf       	rjmp	.-356    	; 0x1c7c <KEYPAD_getPressedKey+0x64>

00001de0 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1de0:	df 93       	push	r29
    1de2:	cf 93       	push	r28
    1de4:	00 d0       	rcall	.+0      	; 0x1de6 <KEYPAD_4x4_adjustKeyNumber+0x6>
    1de6:	00 d0       	rcall	.+0      	; 0x1de8 <KEYPAD_4x4_adjustKeyNumber+0x8>
    1de8:	cd b7       	in	r28, 0x3d	; 61
    1dea:	de b7       	in	r29, 0x3e	; 62
    1dec:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1dee:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1df0:	8a 81       	ldd	r24, Y+2	; 0x02
    1df2:	28 2f       	mov	r18, r24
    1df4:	30 e0       	ldi	r19, 0x00	; 0
    1df6:	3c 83       	std	Y+4, r19	; 0x04
    1df8:	2b 83       	std	Y+3, r18	; 0x03
    1dfa:	8b 81       	ldd	r24, Y+3	; 0x03
    1dfc:	9c 81       	ldd	r25, Y+4	; 0x04
    1dfe:	88 30       	cpi	r24, 0x08	; 8
    1e00:	91 05       	cpc	r25, r1
    1e02:	09 f4       	brne	.+2      	; 0x1e06 <KEYPAD_4x4_adjustKeyNumber+0x26>
    1e04:	70 c0       	rjmp	.+224    	; 0x1ee6 <KEYPAD_4x4_adjustKeyNumber+0x106>
    1e06:	2b 81       	ldd	r18, Y+3	; 0x03
    1e08:	3c 81       	ldd	r19, Y+4	; 0x04
    1e0a:	29 30       	cpi	r18, 0x09	; 9
    1e0c:	31 05       	cpc	r19, r1
    1e0e:	5c f5       	brge	.+86     	; 0x1e66 <KEYPAD_4x4_adjustKeyNumber+0x86>
    1e10:	8b 81       	ldd	r24, Y+3	; 0x03
    1e12:	9c 81       	ldd	r25, Y+4	; 0x04
    1e14:	84 30       	cpi	r24, 0x04	; 4
    1e16:	91 05       	cpc	r25, r1
    1e18:	09 f4       	brne	.+2      	; 0x1e1c <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1e1a:	59 c0       	rjmp	.+178    	; 0x1ece <KEYPAD_4x4_adjustKeyNumber+0xee>
    1e1c:	2b 81       	ldd	r18, Y+3	; 0x03
    1e1e:	3c 81       	ldd	r19, Y+4	; 0x04
    1e20:	25 30       	cpi	r18, 0x05	; 5
    1e22:	31 05       	cpc	r19, r1
    1e24:	9c f4       	brge	.+38     	; 0x1e4c <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1e26:	8b 81       	ldd	r24, Y+3	; 0x03
    1e28:	9c 81       	ldd	r25, Y+4	; 0x04
    1e2a:	82 30       	cpi	r24, 0x02	; 2
    1e2c:	91 05       	cpc	r25, r1
    1e2e:	09 f4       	brne	.+2      	; 0x1e32 <KEYPAD_4x4_adjustKeyNumber+0x52>
    1e30:	48 c0       	rjmp	.+144    	; 0x1ec2 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1e32:	2b 81       	ldd	r18, Y+3	; 0x03
    1e34:	3c 81       	ldd	r19, Y+4	; 0x04
    1e36:	23 30       	cpi	r18, 0x03	; 3
    1e38:	31 05       	cpc	r19, r1
    1e3a:	0c f0       	brlt	.+2      	; 0x1e3e <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1e3c:	45 c0       	rjmp	.+138    	; 0x1ec8 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1e3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e40:	9c 81       	ldd	r25, Y+4	; 0x04
    1e42:	81 30       	cpi	r24, 0x01	; 1
    1e44:	91 05       	cpc	r25, r1
    1e46:	09 f4       	brne	.+2      	; 0x1e4a <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1e48:	39 c0       	rjmp	.+114    	; 0x1ebc <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1e4a:	68 c0       	rjmp	.+208    	; 0x1f1c <KEYPAD_4x4_adjustKeyNumber+0x13c>
    1e4c:	2b 81       	ldd	r18, Y+3	; 0x03
    1e4e:	3c 81       	ldd	r19, Y+4	; 0x04
    1e50:	26 30       	cpi	r18, 0x06	; 6
    1e52:	31 05       	cpc	r19, r1
    1e54:	09 f4       	brne	.+2      	; 0x1e58 <KEYPAD_4x4_adjustKeyNumber+0x78>
    1e56:	41 c0       	rjmp	.+130    	; 0x1eda <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1e58:	8b 81       	ldd	r24, Y+3	; 0x03
    1e5a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e5c:	87 30       	cpi	r24, 0x07	; 7
    1e5e:	91 05       	cpc	r25, r1
    1e60:	0c f0       	brlt	.+2      	; 0x1e64 <KEYPAD_4x4_adjustKeyNumber+0x84>
    1e62:	3e c0       	rjmp	.+124    	; 0x1ee0 <KEYPAD_4x4_adjustKeyNumber+0x100>
    1e64:	37 c0       	rjmp	.+110    	; 0x1ed4 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1e66:	2b 81       	ldd	r18, Y+3	; 0x03
    1e68:	3c 81       	ldd	r19, Y+4	; 0x04
    1e6a:	2c 30       	cpi	r18, 0x0C	; 12
    1e6c:	31 05       	cpc	r19, r1
    1e6e:	09 f4       	brne	.+2      	; 0x1e72 <KEYPAD_4x4_adjustKeyNumber+0x92>
    1e70:	46 c0       	rjmp	.+140    	; 0x1efe <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1e72:	8b 81       	ldd	r24, Y+3	; 0x03
    1e74:	9c 81       	ldd	r25, Y+4	; 0x04
    1e76:	8d 30       	cpi	r24, 0x0D	; 13
    1e78:	91 05       	cpc	r25, r1
    1e7a:	5c f4       	brge	.+22     	; 0x1e92 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1e7c:	2b 81       	ldd	r18, Y+3	; 0x03
    1e7e:	3c 81       	ldd	r19, Y+4	; 0x04
    1e80:	2a 30       	cpi	r18, 0x0A	; 10
    1e82:	31 05       	cpc	r19, r1
    1e84:	b1 f1       	breq	.+108    	; 0x1ef2 <KEYPAD_4x4_adjustKeyNumber+0x112>
    1e86:	8b 81       	ldd	r24, Y+3	; 0x03
    1e88:	9c 81       	ldd	r25, Y+4	; 0x04
    1e8a:	8b 30       	cpi	r24, 0x0B	; 11
    1e8c:	91 05       	cpc	r25, r1
    1e8e:	a4 f5       	brge	.+104    	; 0x1ef8 <KEYPAD_4x4_adjustKeyNumber+0x118>
    1e90:	2d c0       	rjmp	.+90     	; 0x1eec <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1e92:	2b 81       	ldd	r18, Y+3	; 0x03
    1e94:	3c 81       	ldd	r19, Y+4	; 0x04
    1e96:	2e 30       	cpi	r18, 0x0E	; 14
    1e98:	31 05       	cpc	r19, r1
    1e9a:	b9 f1       	breq	.+110    	; 0x1f0a <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1e9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e9e:	9c 81       	ldd	r25, Y+4	; 0x04
    1ea0:	8e 30       	cpi	r24, 0x0E	; 14
    1ea2:	91 05       	cpc	r25, r1
    1ea4:	7c f1       	brlt	.+94     	; 0x1f04 <KEYPAD_4x4_adjustKeyNumber+0x124>
    1ea6:	2b 81       	ldd	r18, Y+3	; 0x03
    1ea8:	3c 81       	ldd	r19, Y+4	; 0x04
    1eaa:	2f 30       	cpi	r18, 0x0F	; 15
    1eac:	31 05       	cpc	r19, r1
    1eae:	81 f1       	breq	.+96     	; 0x1f10 <KEYPAD_4x4_adjustKeyNumber+0x130>
    1eb0:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb2:	9c 81       	ldd	r25, Y+4	; 0x04
    1eb4:	80 31       	cpi	r24, 0x10	; 16
    1eb6:	91 05       	cpc	r25, r1
    1eb8:	71 f1       	breq	.+92     	; 0x1f16 <KEYPAD_4x4_adjustKeyNumber+0x136>
    1eba:	30 c0       	rjmp	.+96     	; 0x1f1c <KEYPAD_4x4_adjustKeyNumber+0x13c>
	{
		case 1: keypad_button = '7';
    1ebc:	87 e3       	ldi	r24, 0x37	; 55
    1ebe:	89 83       	std	Y+1, r24	; 0x01
    1ec0:	2f c0       	rjmp	.+94     	; 0x1f20 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 2: keypad_button = '8';
    1ec2:	88 e3       	ldi	r24, 0x38	; 56
    1ec4:	89 83       	std	Y+1, r24	; 0x01
    1ec6:	2c c0       	rjmp	.+88     	; 0x1f20 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 3: keypad_button = '9';
    1ec8:	89 e3       	ldi	r24, 0x39	; 57
    1eca:	89 83       	std	Y+1, r24	; 0x01
    1ecc:	29 c0       	rjmp	.+82     	; 0x1f20 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    1ece:	85 e2       	ldi	r24, 0x25	; 37
    1ed0:	89 83       	std	Y+1, r24	; 0x01
    1ed2:	26 c0       	rjmp	.+76     	; 0x1f20 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 5: keypad_button = '4';
    1ed4:	84 e3       	ldi	r24, 0x34	; 52
    1ed6:	89 83       	std	Y+1, r24	; 0x01
    1ed8:	23 c0       	rjmp	.+70     	; 0x1f20 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 6: keypad_button = '5';
    1eda:	85 e3       	ldi	r24, 0x35	; 53
    1edc:	89 83       	std	Y+1, r24	; 0x01
    1ede:	20 c0       	rjmp	.+64     	; 0x1f20 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 7: keypad_button = '6';
    1ee0:	86 e3       	ldi	r24, 0x36	; 54
    1ee2:	89 83       	std	Y+1, r24	; 0x01
    1ee4:	1d c0       	rjmp	.+58     	; 0x1f20 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    1ee6:	8a e2       	ldi	r24, 0x2A	; 42
    1ee8:	89 83       	std	Y+1, r24	; 0x01
    1eea:	1a c0       	rjmp	.+52     	; 0x1f20 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;		
		case 9: keypad_button = '1';
    1eec:	81 e3       	ldi	r24, 0x31	; 49
    1eee:	89 83       	std	Y+1, r24	; 0x01
    1ef0:	17 c0       	rjmp	.+46     	; 0x1f20 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 10: keypad_button = '2';
    1ef2:	82 e3       	ldi	r24, 0x32	; 50
    1ef4:	89 83       	std	Y+1, r24	; 0x01
    1ef6:	14 c0       	rjmp	.+40     	; 0x1f20 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 11: keypad_button = '3';
    1ef8:	83 e3       	ldi	r24, 0x33	; 51
    1efa:	89 83       	std	Y+1, r24	; 0x01
    1efc:	11 c0       	rjmp	.+34     	; 0x1f20 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    1efe:	8d e2       	ldi	r24, 0x2D	; 45
    1f00:	89 83       	std	Y+1, r24	; 0x01
    1f02:	0e c0       	rjmp	.+28     	; 0x1f20 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    1f04:	8d e0       	ldi	r24, 0x0D	; 13
    1f06:	89 83       	std	Y+1, r24	; 0x01
    1f08:	0b c0       	rjmp	.+22     	; 0x1f20 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;			
		case 14: keypad_button = '0';
    1f0a:	80 e3       	ldi	r24, 0x30	; 48
    1f0c:	89 83       	std	Y+1, r24	; 0x01
    1f0e:	08 c0       	rjmp	.+16     	; 0x1f20 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    1f10:	8d e3       	ldi	r24, 0x3D	; 61
    1f12:	89 83       	std	Y+1, r24	; 0x01
    1f14:	05 c0       	rjmp	.+10     	; 0x1f20 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    1f16:	8b e2       	ldi	r24, 0x2B	; 43
    1f18:	89 83       	std	Y+1, r24	; 0x01
    1f1a:	02 c0       	rjmp	.+4      	; 0x1f20 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		default: keypad_button = button_number;
    1f1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f1e:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    1f20:	89 81       	ldd	r24, Y+1	; 0x01
} 
    1f22:	0f 90       	pop	r0
    1f24:	0f 90       	pop	r0
    1f26:	0f 90       	pop	r0
    1f28:	0f 90       	pop	r0
    1f2a:	cf 91       	pop	r28
    1f2c:	df 91       	pop	r29
    1f2e:	08 95       	ret

00001f30 <LCD_init>:
 *                      Functions Definitions                                  *
 *******************************************************************************/


void LCD_init(void)
{
    1f30:	df 93       	push	r29
    1f32:	cf 93       	push	r28
    1f34:	cd b7       	in	r28, 0x3d	; 61
    1f36:	de b7       	in	r29, 0x3e	; 62
    1f38:	2e 97       	sbiw	r28, 0x0e	; 14
    1f3a:	0f b6       	in	r0, 0x3f	; 63
    1f3c:	f8 94       	cli
    1f3e:	de bf       	out	0x3e, r29	; 62
    1f40:	0f be       	out	0x3f, r0	; 63
    1f42:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1f44:	81 e0       	ldi	r24, 0x01	; 1
    1f46:	60 e0       	ldi	r22, 0x00	; 0
    1f48:	41 e0       	ldi	r20, 0x01	; 1
    1f4a:	0e 94 ce 0a 	call	0x159c	; 0x159c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1f4e:	81 e0       	ldi	r24, 0x01	; 1
    1f50:	61 e0       	ldi	r22, 0x01	; 1
    1f52:	41 e0       	ldi	r20, 0x01	; 1
    1f54:	0e 94 ce 0a 	call	0x159c	; 0x159c <GPIO_setupPinDirection>
    1f58:	80 e0       	ldi	r24, 0x00	; 0
    1f5a:	90 e0       	ldi	r25, 0x00	; 0
    1f5c:	a0 ea       	ldi	r26, 0xA0	; 160
    1f5e:	b1 e4       	ldi	r27, 0x41	; 65
    1f60:	8b 87       	std	Y+11, r24	; 0x0b
    1f62:	9c 87       	std	Y+12, r25	; 0x0c
    1f64:	ad 87       	std	Y+13, r26	; 0x0d
    1f66:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f68:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f6a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f6c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f6e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f70:	20 e0       	ldi	r18, 0x00	; 0
    1f72:	30 e0       	ldi	r19, 0x00	; 0
    1f74:	4a ef       	ldi	r20, 0xFA	; 250
    1f76:	54 e4       	ldi	r21, 0x44	; 68
    1f78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f7c:	dc 01       	movw	r26, r24
    1f7e:	cb 01       	movw	r24, r22
    1f80:	8f 83       	std	Y+7, r24	; 0x07
    1f82:	98 87       	std	Y+8, r25	; 0x08
    1f84:	a9 87       	std	Y+9, r26	; 0x09
    1f86:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f88:	6f 81       	ldd	r22, Y+7	; 0x07
    1f8a:	78 85       	ldd	r23, Y+8	; 0x08
    1f8c:	89 85       	ldd	r24, Y+9	; 0x09
    1f8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f90:	20 e0       	ldi	r18, 0x00	; 0
    1f92:	30 e0       	ldi	r19, 0x00	; 0
    1f94:	40 e8       	ldi	r20, 0x80	; 128
    1f96:	5f e3       	ldi	r21, 0x3F	; 63
    1f98:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f9c:	88 23       	and	r24, r24
    1f9e:	2c f4       	brge	.+10     	; 0x1faa <LCD_init+0x7a>
		__ticks = 1;
    1fa0:	81 e0       	ldi	r24, 0x01	; 1
    1fa2:	90 e0       	ldi	r25, 0x00	; 0
    1fa4:	9e 83       	std	Y+6, r25	; 0x06
    1fa6:	8d 83       	std	Y+5, r24	; 0x05
    1fa8:	3f c0       	rjmp	.+126    	; 0x2028 <LCD_init+0xf8>
	else if (__tmp > 65535)
    1faa:	6f 81       	ldd	r22, Y+7	; 0x07
    1fac:	78 85       	ldd	r23, Y+8	; 0x08
    1fae:	89 85       	ldd	r24, Y+9	; 0x09
    1fb0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fb2:	20 e0       	ldi	r18, 0x00	; 0
    1fb4:	3f ef       	ldi	r19, 0xFF	; 255
    1fb6:	4f e7       	ldi	r20, 0x7F	; 127
    1fb8:	57 e4       	ldi	r21, 0x47	; 71
    1fba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fbe:	18 16       	cp	r1, r24
    1fc0:	4c f5       	brge	.+82     	; 0x2014 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fc2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fc4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fc6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fc8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fca:	20 e0       	ldi	r18, 0x00	; 0
    1fcc:	30 e0       	ldi	r19, 0x00	; 0
    1fce:	40 e2       	ldi	r20, 0x20	; 32
    1fd0:	51 e4       	ldi	r21, 0x41	; 65
    1fd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fd6:	dc 01       	movw	r26, r24
    1fd8:	cb 01       	movw	r24, r22
    1fda:	bc 01       	movw	r22, r24
    1fdc:	cd 01       	movw	r24, r26
    1fde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fe2:	dc 01       	movw	r26, r24
    1fe4:	cb 01       	movw	r24, r22
    1fe6:	9e 83       	std	Y+6, r25	; 0x06
    1fe8:	8d 83       	std	Y+5, r24	; 0x05
    1fea:	0f c0       	rjmp	.+30     	; 0x200a <LCD_init+0xda>
    1fec:	88 ec       	ldi	r24, 0xC8	; 200
    1fee:	90 e0       	ldi	r25, 0x00	; 0
    1ff0:	9c 83       	std	Y+4, r25	; 0x04
    1ff2:	8b 83       	std	Y+3, r24	; 0x03
    1ff4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ff8:	01 97       	sbiw	r24, 0x01	; 1
    1ffa:	f1 f7       	brne	.-4      	; 0x1ff8 <LCD_init+0xc8>
    1ffc:	9c 83       	std	Y+4, r25	; 0x04
    1ffe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2000:	8d 81       	ldd	r24, Y+5	; 0x05
    2002:	9e 81       	ldd	r25, Y+6	; 0x06
    2004:	01 97       	sbiw	r24, 0x01	; 1
    2006:	9e 83       	std	Y+6, r25	; 0x06
    2008:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    200a:	8d 81       	ldd	r24, Y+5	; 0x05
    200c:	9e 81       	ldd	r25, Y+6	; 0x06
    200e:	00 97       	sbiw	r24, 0x00	; 0
    2010:	69 f7       	brne	.-38     	; 0x1fec <LCD_init+0xbc>
    2012:	14 c0       	rjmp	.+40     	; 0x203c <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2014:	6f 81       	ldd	r22, Y+7	; 0x07
    2016:	78 85       	ldd	r23, Y+8	; 0x08
    2018:	89 85       	ldd	r24, Y+9	; 0x09
    201a:	9a 85       	ldd	r25, Y+10	; 0x0a
    201c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2020:	dc 01       	movw	r26, r24
    2022:	cb 01       	movw	r24, r22
    2024:	9e 83       	std	Y+6, r25	; 0x06
    2026:	8d 83       	std	Y+5, r24	; 0x05
    2028:	8d 81       	ldd	r24, Y+5	; 0x05
    202a:	9e 81       	ldd	r25, Y+6	; 0x06
    202c:	9a 83       	std	Y+2, r25	; 0x02
    202e:	89 83       	std	Y+1, r24	; 0x01
    2030:	89 81       	ldd	r24, Y+1	; 0x01
    2032:	9a 81       	ldd	r25, Y+2	; 0x02
    2034:	01 97       	sbiw	r24, 0x01	; 1
    2036:	f1 f7       	brne	.-4      	; 0x2034 <LCD_init+0x104>
    2038:	9a 83       	std	Y+2, r25	; 0x02
    203a:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);		/* LCD Power ON delay always > 15ms */

#if(LCD_DATA_BITS_MODE == 4)
	/* Configure 4 pins in the data port as output pins */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,PIN_OUTPUT);
    203c:	81 e0       	ldi	r24, 0x01	; 1
    203e:	63 e0       	ldi	r22, 0x03	; 3
    2040:	41 e0       	ldi	r20, 0x01	; 1
    2042:	0e 94 ce 0a 	call	0x159c	; 0x159c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,PIN_OUTPUT);
    2046:	81 e0       	ldi	r24, 0x01	; 1
    2048:	64 e0       	ldi	r22, 0x04	; 4
    204a:	41 e0       	ldi	r20, 0x01	; 1
    204c:	0e 94 ce 0a 	call	0x159c	; 0x159c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,PIN_OUTPUT);
    2050:	81 e0       	ldi	r24, 0x01	; 1
    2052:	65 e0       	ldi	r22, 0x05	; 5
    2054:	41 e0       	ldi	r20, 0x01	; 1
    2056:	0e 94 ce 0a 	call	0x159c	; 0x159c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,PIN_OUTPUT);
    205a:	81 e0       	ldi	r24, 0x01	; 1
    205c:	66 e0       	ldi	r22, 0x06	; 6
    205e:	41 e0       	ldi	r20, 0x01	; 1
    2060:	0e 94 ce 0a 	call	0x159c	; 0x159c <GPIO_setupPinDirection>

	/* Send for 4 bit initialization of LCD  */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    2064:	83 e3       	ldi	r24, 0x33	; 51
    2066:	0e 94 4a 10 	call	0x2094	; 0x2094 <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    206a:	82 e3       	ldi	r24, 0x32	; 50
    206c:	0e 94 4a 10 	call	0x2094	; 0x2094 <LCD_sendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    2070:	88 e2       	ldi	r24, 0x28	; 40
    2072:	0e 94 4a 10 	call	0x2094	; 0x2094 <LCD_sendCommand>
	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    2076:	8c e0       	ldi	r24, 0x0C	; 12
    2078:	0e 94 4a 10 	call	0x2094	; 0x2094 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    207c:	81 e0       	ldi	r24, 0x01	; 1
    207e:	0e 94 4a 10 	call	0x2094	; 0x2094 <LCD_sendCommand>
}
    2082:	2e 96       	adiw	r28, 0x0e	; 14
    2084:	0f b6       	in	r0, 0x3f	; 63
    2086:	f8 94       	cli
    2088:	de bf       	out	0x3e, r29	; 62
    208a:	0f be       	out	0x3f, r0	; 63
    208c:	cd bf       	out	0x3d, r28	; 61
    208e:	cf 91       	pop	r28
    2090:	df 91       	pop	r29
    2092:	08 95       	ret

00002094 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    2094:	0f 93       	push	r16
    2096:	1f 93       	push	r17
    2098:	df 93       	push	r29
    209a:	cf 93       	push	r28
    209c:	cd b7       	in	r28, 0x3d	; 61
    209e:	de b7       	in	r29, 0x3e	; 62
    20a0:	c3 56       	subi	r28, 0x63	; 99
    20a2:	d0 40       	sbci	r29, 0x00	; 0
    20a4:	0f b6       	in	r0, 0x3f	; 63
    20a6:	f8 94       	cli
    20a8:	de bf       	out	0x3e, r29	; 62
    20aa:	0f be       	out	0x3f, r0	; 63
    20ac:	cd bf       	out	0x3d, r28	; 61
    20ae:	fe 01       	movw	r30, r28
    20b0:	ed 59       	subi	r30, 0x9D	; 157
    20b2:	ff 4f       	sbci	r31, 0xFF	; 255
    20b4:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    20b6:	81 e0       	ldi	r24, 0x01	; 1
    20b8:	60 e0       	ldi	r22, 0x00	; 0
    20ba:	40 e0       	ldi	r20, 0x00	; 0
    20bc:	0e 94 b9 0b 	call	0x1772	; 0x1772 <GPIO_writePin>
    20c0:	fe 01       	movw	r30, r28
    20c2:	e1 5a       	subi	r30, 0xA1	; 161
    20c4:	ff 4f       	sbci	r31, 0xFF	; 255
    20c6:	80 e0       	ldi	r24, 0x00	; 0
    20c8:	90 e0       	ldi	r25, 0x00	; 0
    20ca:	a0 e8       	ldi	r26, 0x80	; 128
    20cc:	bf e3       	ldi	r27, 0x3F	; 63
    20ce:	80 83       	st	Z, r24
    20d0:	91 83       	std	Z+1, r25	; 0x01
    20d2:	a2 83       	std	Z+2, r26	; 0x02
    20d4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20d6:	8e 01       	movw	r16, r28
    20d8:	05 5a       	subi	r16, 0xA5	; 165
    20da:	1f 4f       	sbci	r17, 0xFF	; 255
    20dc:	fe 01       	movw	r30, r28
    20de:	e1 5a       	subi	r30, 0xA1	; 161
    20e0:	ff 4f       	sbci	r31, 0xFF	; 255
    20e2:	60 81       	ld	r22, Z
    20e4:	71 81       	ldd	r23, Z+1	; 0x01
    20e6:	82 81       	ldd	r24, Z+2	; 0x02
    20e8:	93 81       	ldd	r25, Z+3	; 0x03
    20ea:	20 e0       	ldi	r18, 0x00	; 0
    20ec:	30 e0       	ldi	r19, 0x00	; 0
    20ee:	4a ef       	ldi	r20, 0xFA	; 250
    20f0:	54 e4       	ldi	r21, 0x44	; 68
    20f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20f6:	dc 01       	movw	r26, r24
    20f8:	cb 01       	movw	r24, r22
    20fa:	f8 01       	movw	r30, r16
    20fc:	80 83       	st	Z, r24
    20fe:	91 83       	std	Z+1, r25	; 0x01
    2100:	a2 83       	std	Z+2, r26	; 0x02
    2102:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2104:	fe 01       	movw	r30, r28
    2106:	e5 5a       	subi	r30, 0xA5	; 165
    2108:	ff 4f       	sbci	r31, 0xFF	; 255
    210a:	60 81       	ld	r22, Z
    210c:	71 81       	ldd	r23, Z+1	; 0x01
    210e:	82 81       	ldd	r24, Z+2	; 0x02
    2110:	93 81       	ldd	r25, Z+3	; 0x03
    2112:	20 e0       	ldi	r18, 0x00	; 0
    2114:	30 e0       	ldi	r19, 0x00	; 0
    2116:	40 e8       	ldi	r20, 0x80	; 128
    2118:	5f e3       	ldi	r21, 0x3F	; 63
    211a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    211e:	88 23       	and	r24, r24
    2120:	44 f4       	brge	.+16     	; 0x2132 <LCD_sendCommand+0x9e>
		__ticks = 1;
    2122:	fe 01       	movw	r30, r28
    2124:	e7 5a       	subi	r30, 0xA7	; 167
    2126:	ff 4f       	sbci	r31, 0xFF	; 255
    2128:	81 e0       	ldi	r24, 0x01	; 1
    212a:	90 e0       	ldi	r25, 0x00	; 0
    212c:	91 83       	std	Z+1, r25	; 0x01
    212e:	80 83       	st	Z, r24
    2130:	64 c0       	rjmp	.+200    	; 0x21fa <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    2132:	fe 01       	movw	r30, r28
    2134:	e5 5a       	subi	r30, 0xA5	; 165
    2136:	ff 4f       	sbci	r31, 0xFF	; 255
    2138:	60 81       	ld	r22, Z
    213a:	71 81       	ldd	r23, Z+1	; 0x01
    213c:	82 81       	ldd	r24, Z+2	; 0x02
    213e:	93 81       	ldd	r25, Z+3	; 0x03
    2140:	20 e0       	ldi	r18, 0x00	; 0
    2142:	3f ef       	ldi	r19, 0xFF	; 255
    2144:	4f e7       	ldi	r20, 0x7F	; 127
    2146:	57 e4       	ldi	r21, 0x47	; 71
    2148:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    214c:	18 16       	cp	r1, r24
    214e:	0c f0       	brlt	.+2      	; 0x2152 <LCD_sendCommand+0xbe>
    2150:	43 c0       	rjmp	.+134    	; 0x21d8 <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2152:	fe 01       	movw	r30, r28
    2154:	e1 5a       	subi	r30, 0xA1	; 161
    2156:	ff 4f       	sbci	r31, 0xFF	; 255
    2158:	60 81       	ld	r22, Z
    215a:	71 81       	ldd	r23, Z+1	; 0x01
    215c:	82 81       	ldd	r24, Z+2	; 0x02
    215e:	93 81       	ldd	r25, Z+3	; 0x03
    2160:	20 e0       	ldi	r18, 0x00	; 0
    2162:	30 e0       	ldi	r19, 0x00	; 0
    2164:	40 e2       	ldi	r20, 0x20	; 32
    2166:	51 e4       	ldi	r21, 0x41	; 65
    2168:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    216c:	dc 01       	movw	r26, r24
    216e:	cb 01       	movw	r24, r22
    2170:	8e 01       	movw	r16, r28
    2172:	07 5a       	subi	r16, 0xA7	; 167
    2174:	1f 4f       	sbci	r17, 0xFF	; 255
    2176:	bc 01       	movw	r22, r24
    2178:	cd 01       	movw	r24, r26
    217a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    217e:	dc 01       	movw	r26, r24
    2180:	cb 01       	movw	r24, r22
    2182:	f8 01       	movw	r30, r16
    2184:	91 83       	std	Z+1, r25	; 0x01
    2186:	80 83       	st	Z, r24
    2188:	1f c0       	rjmp	.+62     	; 0x21c8 <LCD_sendCommand+0x134>
    218a:	fe 01       	movw	r30, r28
    218c:	e9 5a       	subi	r30, 0xA9	; 169
    218e:	ff 4f       	sbci	r31, 0xFF	; 255
    2190:	88 ec       	ldi	r24, 0xC8	; 200
    2192:	90 e0       	ldi	r25, 0x00	; 0
    2194:	91 83       	std	Z+1, r25	; 0x01
    2196:	80 83       	st	Z, r24
    2198:	fe 01       	movw	r30, r28
    219a:	e9 5a       	subi	r30, 0xA9	; 169
    219c:	ff 4f       	sbci	r31, 0xFF	; 255
    219e:	80 81       	ld	r24, Z
    21a0:	91 81       	ldd	r25, Z+1	; 0x01
    21a2:	01 97       	sbiw	r24, 0x01	; 1
    21a4:	f1 f7       	brne	.-4      	; 0x21a2 <LCD_sendCommand+0x10e>
    21a6:	fe 01       	movw	r30, r28
    21a8:	e9 5a       	subi	r30, 0xA9	; 169
    21aa:	ff 4f       	sbci	r31, 0xFF	; 255
    21ac:	91 83       	std	Z+1, r25	; 0x01
    21ae:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21b0:	de 01       	movw	r26, r28
    21b2:	a7 5a       	subi	r26, 0xA7	; 167
    21b4:	bf 4f       	sbci	r27, 0xFF	; 255
    21b6:	fe 01       	movw	r30, r28
    21b8:	e7 5a       	subi	r30, 0xA7	; 167
    21ba:	ff 4f       	sbci	r31, 0xFF	; 255
    21bc:	80 81       	ld	r24, Z
    21be:	91 81       	ldd	r25, Z+1	; 0x01
    21c0:	01 97       	sbiw	r24, 0x01	; 1
    21c2:	11 96       	adiw	r26, 0x01	; 1
    21c4:	9c 93       	st	X, r25
    21c6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21c8:	fe 01       	movw	r30, r28
    21ca:	e7 5a       	subi	r30, 0xA7	; 167
    21cc:	ff 4f       	sbci	r31, 0xFF	; 255
    21ce:	80 81       	ld	r24, Z
    21d0:	91 81       	ldd	r25, Z+1	; 0x01
    21d2:	00 97       	sbiw	r24, 0x00	; 0
    21d4:	d1 f6       	brne	.-76     	; 0x218a <LCD_sendCommand+0xf6>
    21d6:	27 c0       	rjmp	.+78     	; 0x2226 <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21d8:	8e 01       	movw	r16, r28
    21da:	07 5a       	subi	r16, 0xA7	; 167
    21dc:	1f 4f       	sbci	r17, 0xFF	; 255
    21de:	fe 01       	movw	r30, r28
    21e0:	e5 5a       	subi	r30, 0xA5	; 165
    21e2:	ff 4f       	sbci	r31, 0xFF	; 255
    21e4:	60 81       	ld	r22, Z
    21e6:	71 81       	ldd	r23, Z+1	; 0x01
    21e8:	82 81       	ldd	r24, Z+2	; 0x02
    21ea:	93 81       	ldd	r25, Z+3	; 0x03
    21ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21f0:	dc 01       	movw	r26, r24
    21f2:	cb 01       	movw	r24, r22
    21f4:	f8 01       	movw	r30, r16
    21f6:	91 83       	std	Z+1, r25	; 0x01
    21f8:	80 83       	st	Z, r24
    21fa:	de 01       	movw	r26, r28
    21fc:	ab 5a       	subi	r26, 0xAB	; 171
    21fe:	bf 4f       	sbci	r27, 0xFF	; 255
    2200:	fe 01       	movw	r30, r28
    2202:	e7 5a       	subi	r30, 0xA7	; 167
    2204:	ff 4f       	sbci	r31, 0xFF	; 255
    2206:	80 81       	ld	r24, Z
    2208:	91 81       	ldd	r25, Z+1	; 0x01
    220a:	8d 93       	st	X+, r24
    220c:	9c 93       	st	X, r25
    220e:	fe 01       	movw	r30, r28
    2210:	eb 5a       	subi	r30, 0xAB	; 171
    2212:	ff 4f       	sbci	r31, 0xFF	; 255
    2214:	80 81       	ld	r24, Z
    2216:	91 81       	ldd	r25, Z+1	; 0x01
    2218:	01 97       	sbiw	r24, 0x01	; 1
    221a:	f1 f7       	brne	.-4      	; 0x2218 <LCD_sendCommand+0x184>
    221c:	fe 01       	movw	r30, r28
    221e:	eb 5a       	subi	r30, 0xAB	; 171
    2220:	ff 4f       	sbci	r31, 0xFF	; 255
    2222:	91 83       	std	Z+1, r25	; 0x01
    2224:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2226:	81 e0       	ldi	r24, 0x01	; 1
    2228:	61 e0       	ldi	r22, 0x01	; 1
    222a:	41 e0       	ldi	r20, 0x01	; 1
    222c:	0e 94 b9 0b 	call	0x1772	; 0x1772 <GPIO_writePin>
    2230:	fe 01       	movw	r30, r28
    2232:	ef 5a       	subi	r30, 0xAF	; 175
    2234:	ff 4f       	sbci	r31, 0xFF	; 255
    2236:	80 e0       	ldi	r24, 0x00	; 0
    2238:	90 e0       	ldi	r25, 0x00	; 0
    223a:	a0 e8       	ldi	r26, 0x80	; 128
    223c:	bf e3       	ldi	r27, 0x3F	; 63
    223e:	80 83       	st	Z, r24
    2240:	91 83       	std	Z+1, r25	; 0x01
    2242:	a2 83       	std	Z+2, r26	; 0x02
    2244:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2246:	8e 01       	movw	r16, r28
    2248:	03 5b       	subi	r16, 0xB3	; 179
    224a:	1f 4f       	sbci	r17, 0xFF	; 255
    224c:	fe 01       	movw	r30, r28
    224e:	ef 5a       	subi	r30, 0xAF	; 175
    2250:	ff 4f       	sbci	r31, 0xFF	; 255
    2252:	60 81       	ld	r22, Z
    2254:	71 81       	ldd	r23, Z+1	; 0x01
    2256:	82 81       	ldd	r24, Z+2	; 0x02
    2258:	93 81       	ldd	r25, Z+3	; 0x03
    225a:	20 e0       	ldi	r18, 0x00	; 0
    225c:	30 e0       	ldi	r19, 0x00	; 0
    225e:	4a ef       	ldi	r20, 0xFA	; 250
    2260:	54 e4       	ldi	r21, 0x44	; 68
    2262:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2266:	dc 01       	movw	r26, r24
    2268:	cb 01       	movw	r24, r22
    226a:	f8 01       	movw	r30, r16
    226c:	80 83       	st	Z, r24
    226e:	91 83       	std	Z+1, r25	; 0x01
    2270:	a2 83       	std	Z+2, r26	; 0x02
    2272:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2274:	fe 01       	movw	r30, r28
    2276:	e3 5b       	subi	r30, 0xB3	; 179
    2278:	ff 4f       	sbci	r31, 0xFF	; 255
    227a:	60 81       	ld	r22, Z
    227c:	71 81       	ldd	r23, Z+1	; 0x01
    227e:	82 81       	ldd	r24, Z+2	; 0x02
    2280:	93 81       	ldd	r25, Z+3	; 0x03
    2282:	20 e0       	ldi	r18, 0x00	; 0
    2284:	30 e0       	ldi	r19, 0x00	; 0
    2286:	40 e8       	ldi	r20, 0x80	; 128
    2288:	5f e3       	ldi	r21, 0x3F	; 63
    228a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    228e:	88 23       	and	r24, r24
    2290:	44 f4       	brge	.+16     	; 0x22a2 <LCD_sendCommand+0x20e>
		__ticks = 1;
    2292:	fe 01       	movw	r30, r28
    2294:	e5 5b       	subi	r30, 0xB5	; 181
    2296:	ff 4f       	sbci	r31, 0xFF	; 255
    2298:	81 e0       	ldi	r24, 0x01	; 1
    229a:	90 e0       	ldi	r25, 0x00	; 0
    229c:	91 83       	std	Z+1, r25	; 0x01
    229e:	80 83       	st	Z, r24
    22a0:	64 c0       	rjmp	.+200    	; 0x236a <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    22a2:	fe 01       	movw	r30, r28
    22a4:	e3 5b       	subi	r30, 0xB3	; 179
    22a6:	ff 4f       	sbci	r31, 0xFF	; 255
    22a8:	60 81       	ld	r22, Z
    22aa:	71 81       	ldd	r23, Z+1	; 0x01
    22ac:	82 81       	ldd	r24, Z+2	; 0x02
    22ae:	93 81       	ldd	r25, Z+3	; 0x03
    22b0:	20 e0       	ldi	r18, 0x00	; 0
    22b2:	3f ef       	ldi	r19, 0xFF	; 255
    22b4:	4f e7       	ldi	r20, 0x7F	; 127
    22b6:	57 e4       	ldi	r21, 0x47	; 71
    22b8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22bc:	18 16       	cp	r1, r24
    22be:	0c f0       	brlt	.+2      	; 0x22c2 <LCD_sendCommand+0x22e>
    22c0:	43 c0       	rjmp	.+134    	; 0x2348 <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22c2:	fe 01       	movw	r30, r28
    22c4:	ef 5a       	subi	r30, 0xAF	; 175
    22c6:	ff 4f       	sbci	r31, 0xFF	; 255
    22c8:	60 81       	ld	r22, Z
    22ca:	71 81       	ldd	r23, Z+1	; 0x01
    22cc:	82 81       	ldd	r24, Z+2	; 0x02
    22ce:	93 81       	ldd	r25, Z+3	; 0x03
    22d0:	20 e0       	ldi	r18, 0x00	; 0
    22d2:	30 e0       	ldi	r19, 0x00	; 0
    22d4:	40 e2       	ldi	r20, 0x20	; 32
    22d6:	51 e4       	ldi	r21, 0x41	; 65
    22d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22dc:	dc 01       	movw	r26, r24
    22de:	cb 01       	movw	r24, r22
    22e0:	8e 01       	movw	r16, r28
    22e2:	05 5b       	subi	r16, 0xB5	; 181
    22e4:	1f 4f       	sbci	r17, 0xFF	; 255
    22e6:	bc 01       	movw	r22, r24
    22e8:	cd 01       	movw	r24, r26
    22ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22ee:	dc 01       	movw	r26, r24
    22f0:	cb 01       	movw	r24, r22
    22f2:	f8 01       	movw	r30, r16
    22f4:	91 83       	std	Z+1, r25	; 0x01
    22f6:	80 83       	st	Z, r24
    22f8:	1f c0       	rjmp	.+62     	; 0x2338 <LCD_sendCommand+0x2a4>
    22fa:	fe 01       	movw	r30, r28
    22fc:	e7 5b       	subi	r30, 0xB7	; 183
    22fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2300:	88 ec       	ldi	r24, 0xC8	; 200
    2302:	90 e0       	ldi	r25, 0x00	; 0
    2304:	91 83       	std	Z+1, r25	; 0x01
    2306:	80 83       	st	Z, r24
    2308:	fe 01       	movw	r30, r28
    230a:	e7 5b       	subi	r30, 0xB7	; 183
    230c:	ff 4f       	sbci	r31, 0xFF	; 255
    230e:	80 81       	ld	r24, Z
    2310:	91 81       	ldd	r25, Z+1	; 0x01
    2312:	01 97       	sbiw	r24, 0x01	; 1
    2314:	f1 f7       	brne	.-4      	; 0x2312 <LCD_sendCommand+0x27e>
    2316:	fe 01       	movw	r30, r28
    2318:	e7 5b       	subi	r30, 0xB7	; 183
    231a:	ff 4f       	sbci	r31, 0xFF	; 255
    231c:	91 83       	std	Z+1, r25	; 0x01
    231e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2320:	de 01       	movw	r26, r28
    2322:	a5 5b       	subi	r26, 0xB5	; 181
    2324:	bf 4f       	sbci	r27, 0xFF	; 255
    2326:	fe 01       	movw	r30, r28
    2328:	e5 5b       	subi	r30, 0xB5	; 181
    232a:	ff 4f       	sbci	r31, 0xFF	; 255
    232c:	80 81       	ld	r24, Z
    232e:	91 81       	ldd	r25, Z+1	; 0x01
    2330:	01 97       	sbiw	r24, 0x01	; 1
    2332:	11 96       	adiw	r26, 0x01	; 1
    2334:	9c 93       	st	X, r25
    2336:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2338:	fe 01       	movw	r30, r28
    233a:	e5 5b       	subi	r30, 0xB5	; 181
    233c:	ff 4f       	sbci	r31, 0xFF	; 255
    233e:	80 81       	ld	r24, Z
    2340:	91 81       	ldd	r25, Z+1	; 0x01
    2342:	00 97       	sbiw	r24, 0x00	; 0
    2344:	d1 f6       	brne	.-76     	; 0x22fa <LCD_sendCommand+0x266>
    2346:	27 c0       	rjmp	.+78     	; 0x2396 <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2348:	8e 01       	movw	r16, r28
    234a:	05 5b       	subi	r16, 0xB5	; 181
    234c:	1f 4f       	sbci	r17, 0xFF	; 255
    234e:	fe 01       	movw	r30, r28
    2350:	e3 5b       	subi	r30, 0xB3	; 179
    2352:	ff 4f       	sbci	r31, 0xFF	; 255
    2354:	60 81       	ld	r22, Z
    2356:	71 81       	ldd	r23, Z+1	; 0x01
    2358:	82 81       	ldd	r24, Z+2	; 0x02
    235a:	93 81       	ldd	r25, Z+3	; 0x03
    235c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2360:	dc 01       	movw	r26, r24
    2362:	cb 01       	movw	r24, r22
    2364:	f8 01       	movw	r30, r16
    2366:	91 83       	std	Z+1, r25	; 0x01
    2368:	80 83       	st	Z, r24
    236a:	de 01       	movw	r26, r28
    236c:	a9 5b       	subi	r26, 0xB9	; 185
    236e:	bf 4f       	sbci	r27, 0xFF	; 255
    2370:	fe 01       	movw	r30, r28
    2372:	e5 5b       	subi	r30, 0xB5	; 181
    2374:	ff 4f       	sbci	r31, 0xFF	; 255
    2376:	80 81       	ld	r24, Z
    2378:	91 81       	ldd	r25, Z+1	; 0x01
    237a:	8d 93       	st	X+, r24
    237c:	9c 93       	st	X, r25
    237e:	fe 01       	movw	r30, r28
    2380:	e9 5b       	subi	r30, 0xB9	; 185
    2382:	ff 4f       	sbci	r31, 0xFF	; 255
    2384:	80 81       	ld	r24, Z
    2386:	91 81       	ldd	r25, Z+1	; 0x01
    2388:	01 97       	sbiw	r24, 0x01	; 1
    238a:	f1 f7       	brne	.-4      	; 0x2388 <LCD_sendCommand+0x2f4>
    238c:	fe 01       	movw	r30, r28
    238e:	e9 5b       	subi	r30, 0xB9	; 185
    2390:	ff 4f       	sbci	r31, 0xFF	; 255
    2392:	91 83       	std	Z+1, r25	; 0x01
    2394:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,4));
    2396:	fe 01       	movw	r30, r28
    2398:	ed 59       	subi	r30, 0x9D	; 157
    239a:	ff 4f       	sbci	r31, 0xFF	; 255
    239c:	80 81       	ld	r24, Z
    239e:	88 2f       	mov	r24, r24
    23a0:	90 e0       	ldi	r25, 0x00	; 0
    23a2:	80 71       	andi	r24, 0x10	; 16
    23a4:	90 70       	andi	r25, 0x00	; 0
    23a6:	95 95       	asr	r25
    23a8:	87 95       	ror	r24
    23aa:	95 95       	asr	r25
    23ac:	87 95       	ror	r24
    23ae:	95 95       	asr	r25
    23b0:	87 95       	ror	r24
    23b2:	95 95       	asr	r25
    23b4:	87 95       	ror	r24
    23b6:	98 2f       	mov	r25, r24
    23b8:	81 e0       	ldi	r24, 0x01	; 1
    23ba:	63 e0       	ldi	r22, 0x03	; 3
    23bc:	49 2f       	mov	r20, r25
    23be:	0e 94 b9 0b 	call	0x1772	; 0x1772 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,5));
    23c2:	fe 01       	movw	r30, r28
    23c4:	ed 59       	subi	r30, 0x9D	; 157
    23c6:	ff 4f       	sbci	r31, 0xFF	; 255
    23c8:	80 81       	ld	r24, Z
    23ca:	88 2f       	mov	r24, r24
    23cc:	90 e0       	ldi	r25, 0x00	; 0
    23ce:	80 72       	andi	r24, 0x20	; 32
    23d0:	90 70       	andi	r25, 0x00	; 0
    23d2:	95 95       	asr	r25
    23d4:	87 95       	ror	r24
    23d6:	95 95       	asr	r25
    23d8:	87 95       	ror	r24
    23da:	95 95       	asr	r25
    23dc:	87 95       	ror	r24
    23de:	95 95       	asr	r25
    23e0:	87 95       	ror	r24
    23e2:	95 95       	asr	r25
    23e4:	87 95       	ror	r24
    23e6:	98 2f       	mov	r25, r24
    23e8:	81 e0       	ldi	r24, 0x01	; 1
    23ea:	64 e0       	ldi	r22, 0x04	; 4
    23ec:	49 2f       	mov	r20, r25
    23ee:	0e 94 b9 0b 	call	0x1772	; 0x1772 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,6));
    23f2:	fe 01       	movw	r30, r28
    23f4:	ed 59       	subi	r30, 0x9D	; 157
    23f6:	ff 4f       	sbci	r31, 0xFF	; 255
    23f8:	80 81       	ld	r24, Z
    23fa:	88 2f       	mov	r24, r24
    23fc:	90 e0       	ldi	r25, 0x00	; 0
    23fe:	80 74       	andi	r24, 0x40	; 64
    2400:	90 70       	andi	r25, 0x00	; 0
    2402:	08 2e       	mov	r0, r24
    2404:	89 2f       	mov	r24, r25
    2406:	00 0c       	add	r0, r0
    2408:	88 1f       	adc	r24, r24
    240a:	99 0b       	sbc	r25, r25
    240c:	00 0c       	add	r0, r0
    240e:	88 1f       	adc	r24, r24
    2410:	99 1f       	adc	r25, r25
    2412:	98 2f       	mov	r25, r24
    2414:	81 e0       	ldi	r24, 0x01	; 1
    2416:	65 e0       	ldi	r22, 0x05	; 5
    2418:	49 2f       	mov	r20, r25
    241a:	0e 94 b9 0b 	call	0x1772	; 0x1772 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,7));
    241e:	fe 01       	movw	r30, r28
    2420:	ed 59       	subi	r30, 0x9D	; 157
    2422:	ff 4f       	sbci	r31, 0xFF	; 255
    2424:	80 81       	ld	r24, Z
    2426:	98 2f       	mov	r25, r24
    2428:	99 1f       	adc	r25, r25
    242a:	99 27       	eor	r25, r25
    242c:	99 1f       	adc	r25, r25
    242e:	81 e0       	ldi	r24, 0x01	; 1
    2430:	66 e0       	ldi	r22, 0x06	; 6
    2432:	49 2f       	mov	r20, r25
    2434:	0e 94 b9 0b 	call	0x1772	; 0x1772 <GPIO_writePin>
    2438:	fe 01       	movw	r30, r28
    243a:	ed 5b       	subi	r30, 0xBD	; 189
    243c:	ff 4f       	sbci	r31, 0xFF	; 255
    243e:	80 e0       	ldi	r24, 0x00	; 0
    2440:	90 e0       	ldi	r25, 0x00	; 0
    2442:	a0 e8       	ldi	r26, 0x80	; 128
    2444:	bf e3       	ldi	r27, 0x3F	; 63
    2446:	80 83       	st	Z, r24
    2448:	91 83       	std	Z+1, r25	; 0x01
    244a:	a2 83       	std	Z+2, r26	; 0x02
    244c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    244e:	8e 01       	movw	r16, r28
    2450:	01 5c       	subi	r16, 0xC1	; 193
    2452:	1f 4f       	sbci	r17, 0xFF	; 255
    2454:	fe 01       	movw	r30, r28
    2456:	ed 5b       	subi	r30, 0xBD	; 189
    2458:	ff 4f       	sbci	r31, 0xFF	; 255
    245a:	60 81       	ld	r22, Z
    245c:	71 81       	ldd	r23, Z+1	; 0x01
    245e:	82 81       	ldd	r24, Z+2	; 0x02
    2460:	93 81       	ldd	r25, Z+3	; 0x03
    2462:	20 e0       	ldi	r18, 0x00	; 0
    2464:	30 e0       	ldi	r19, 0x00	; 0
    2466:	4a ef       	ldi	r20, 0xFA	; 250
    2468:	54 e4       	ldi	r21, 0x44	; 68
    246a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    246e:	dc 01       	movw	r26, r24
    2470:	cb 01       	movw	r24, r22
    2472:	f8 01       	movw	r30, r16
    2474:	80 83       	st	Z, r24
    2476:	91 83       	std	Z+1, r25	; 0x01
    2478:	a2 83       	std	Z+2, r26	; 0x02
    247a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    247c:	fe 01       	movw	r30, r28
    247e:	ff 96       	adiw	r30, 0x3f	; 63
    2480:	60 81       	ld	r22, Z
    2482:	71 81       	ldd	r23, Z+1	; 0x01
    2484:	82 81       	ldd	r24, Z+2	; 0x02
    2486:	93 81       	ldd	r25, Z+3	; 0x03
    2488:	20 e0       	ldi	r18, 0x00	; 0
    248a:	30 e0       	ldi	r19, 0x00	; 0
    248c:	40 e8       	ldi	r20, 0x80	; 128
    248e:	5f e3       	ldi	r21, 0x3F	; 63
    2490:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2494:	88 23       	and	r24, r24
    2496:	2c f4       	brge	.+10     	; 0x24a2 <LCD_sendCommand+0x40e>
		__ticks = 1;
    2498:	81 e0       	ldi	r24, 0x01	; 1
    249a:	90 e0       	ldi	r25, 0x00	; 0
    249c:	9e af       	std	Y+62, r25	; 0x3e
    249e:	8d af       	std	Y+61, r24	; 0x3d
    24a0:	46 c0       	rjmp	.+140    	; 0x252e <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    24a2:	fe 01       	movw	r30, r28
    24a4:	ff 96       	adiw	r30, 0x3f	; 63
    24a6:	60 81       	ld	r22, Z
    24a8:	71 81       	ldd	r23, Z+1	; 0x01
    24aa:	82 81       	ldd	r24, Z+2	; 0x02
    24ac:	93 81       	ldd	r25, Z+3	; 0x03
    24ae:	20 e0       	ldi	r18, 0x00	; 0
    24b0:	3f ef       	ldi	r19, 0xFF	; 255
    24b2:	4f e7       	ldi	r20, 0x7F	; 127
    24b4:	57 e4       	ldi	r21, 0x47	; 71
    24b6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24ba:	18 16       	cp	r1, r24
    24bc:	64 f5       	brge	.+88     	; 0x2516 <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24be:	fe 01       	movw	r30, r28
    24c0:	ed 5b       	subi	r30, 0xBD	; 189
    24c2:	ff 4f       	sbci	r31, 0xFF	; 255
    24c4:	60 81       	ld	r22, Z
    24c6:	71 81       	ldd	r23, Z+1	; 0x01
    24c8:	82 81       	ldd	r24, Z+2	; 0x02
    24ca:	93 81       	ldd	r25, Z+3	; 0x03
    24cc:	20 e0       	ldi	r18, 0x00	; 0
    24ce:	30 e0       	ldi	r19, 0x00	; 0
    24d0:	40 e2       	ldi	r20, 0x20	; 32
    24d2:	51 e4       	ldi	r21, 0x41	; 65
    24d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24d8:	dc 01       	movw	r26, r24
    24da:	cb 01       	movw	r24, r22
    24dc:	bc 01       	movw	r22, r24
    24de:	cd 01       	movw	r24, r26
    24e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24e4:	dc 01       	movw	r26, r24
    24e6:	cb 01       	movw	r24, r22
    24e8:	9e af       	std	Y+62, r25	; 0x3e
    24ea:	8d af       	std	Y+61, r24	; 0x3d
    24ec:	0f c0       	rjmp	.+30     	; 0x250c <LCD_sendCommand+0x478>
    24ee:	88 ec       	ldi	r24, 0xC8	; 200
    24f0:	90 e0       	ldi	r25, 0x00	; 0
    24f2:	9c af       	std	Y+60, r25	; 0x3c
    24f4:	8b af       	std	Y+59, r24	; 0x3b
    24f6:	8b ad       	ldd	r24, Y+59	; 0x3b
    24f8:	9c ad       	ldd	r25, Y+60	; 0x3c
    24fa:	01 97       	sbiw	r24, 0x01	; 1
    24fc:	f1 f7       	brne	.-4      	; 0x24fa <LCD_sendCommand+0x466>
    24fe:	9c af       	std	Y+60, r25	; 0x3c
    2500:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2502:	8d ad       	ldd	r24, Y+61	; 0x3d
    2504:	9e ad       	ldd	r25, Y+62	; 0x3e
    2506:	01 97       	sbiw	r24, 0x01	; 1
    2508:	9e af       	std	Y+62, r25	; 0x3e
    250a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    250c:	8d ad       	ldd	r24, Y+61	; 0x3d
    250e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2510:	00 97       	sbiw	r24, 0x00	; 0
    2512:	69 f7       	brne	.-38     	; 0x24ee <LCD_sendCommand+0x45a>
    2514:	16 c0       	rjmp	.+44     	; 0x2542 <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2516:	fe 01       	movw	r30, r28
    2518:	ff 96       	adiw	r30, 0x3f	; 63
    251a:	60 81       	ld	r22, Z
    251c:	71 81       	ldd	r23, Z+1	; 0x01
    251e:	82 81       	ldd	r24, Z+2	; 0x02
    2520:	93 81       	ldd	r25, Z+3	; 0x03
    2522:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2526:	dc 01       	movw	r26, r24
    2528:	cb 01       	movw	r24, r22
    252a:	9e af       	std	Y+62, r25	; 0x3e
    252c:	8d af       	std	Y+61, r24	; 0x3d
    252e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2530:	9e ad       	ldd	r25, Y+62	; 0x3e
    2532:	9a af       	std	Y+58, r25	; 0x3a
    2534:	89 af       	std	Y+57, r24	; 0x39
    2536:	89 ad       	ldd	r24, Y+57	; 0x39
    2538:	9a ad       	ldd	r25, Y+58	; 0x3a
    253a:	01 97       	sbiw	r24, 0x01	; 1
    253c:	f1 f7       	brne	.-4      	; 0x253a <LCD_sendCommand+0x4a6>
    253e:	9a af       	std	Y+58, r25	; 0x3a
    2540:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2542:	81 e0       	ldi	r24, 0x01	; 1
    2544:	61 e0       	ldi	r22, 0x01	; 1
    2546:	40 e0       	ldi	r20, 0x00	; 0
    2548:	0e 94 b9 0b 	call	0x1772	; 0x1772 <GPIO_writePin>
    254c:	80 e0       	ldi	r24, 0x00	; 0
    254e:	90 e0       	ldi	r25, 0x00	; 0
    2550:	a0 e8       	ldi	r26, 0x80	; 128
    2552:	bf e3       	ldi	r27, 0x3F	; 63
    2554:	8d ab       	std	Y+53, r24	; 0x35
    2556:	9e ab       	std	Y+54, r25	; 0x36
    2558:	af ab       	std	Y+55, r26	; 0x37
    255a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    255c:	6d a9       	ldd	r22, Y+53	; 0x35
    255e:	7e a9       	ldd	r23, Y+54	; 0x36
    2560:	8f a9       	ldd	r24, Y+55	; 0x37
    2562:	98 ad       	ldd	r25, Y+56	; 0x38
    2564:	20 e0       	ldi	r18, 0x00	; 0
    2566:	30 e0       	ldi	r19, 0x00	; 0
    2568:	4a ef       	ldi	r20, 0xFA	; 250
    256a:	54 e4       	ldi	r21, 0x44	; 68
    256c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2570:	dc 01       	movw	r26, r24
    2572:	cb 01       	movw	r24, r22
    2574:	89 ab       	std	Y+49, r24	; 0x31
    2576:	9a ab       	std	Y+50, r25	; 0x32
    2578:	ab ab       	std	Y+51, r26	; 0x33
    257a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    257c:	69 a9       	ldd	r22, Y+49	; 0x31
    257e:	7a a9       	ldd	r23, Y+50	; 0x32
    2580:	8b a9       	ldd	r24, Y+51	; 0x33
    2582:	9c a9       	ldd	r25, Y+52	; 0x34
    2584:	20 e0       	ldi	r18, 0x00	; 0
    2586:	30 e0       	ldi	r19, 0x00	; 0
    2588:	40 e8       	ldi	r20, 0x80	; 128
    258a:	5f e3       	ldi	r21, 0x3F	; 63
    258c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2590:	88 23       	and	r24, r24
    2592:	2c f4       	brge	.+10     	; 0x259e <LCD_sendCommand+0x50a>
		__ticks = 1;
    2594:	81 e0       	ldi	r24, 0x01	; 1
    2596:	90 e0       	ldi	r25, 0x00	; 0
    2598:	98 ab       	std	Y+48, r25	; 0x30
    259a:	8f a7       	std	Y+47, r24	; 0x2f
    259c:	3f c0       	rjmp	.+126    	; 0x261c <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    259e:	69 a9       	ldd	r22, Y+49	; 0x31
    25a0:	7a a9       	ldd	r23, Y+50	; 0x32
    25a2:	8b a9       	ldd	r24, Y+51	; 0x33
    25a4:	9c a9       	ldd	r25, Y+52	; 0x34
    25a6:	20 e0       	ldi	r18, 0x00	; 0
    25a8:	3f ef       	ldi	r19, 0xFF	; 255
    25aa:	4f e7       	ldi	r20, 0x7F	; 127
    25ac:	57 e4       	ldi	r21, 0x47	; 71
    25ae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25b2:	18 16       	cp	r1, r24
    25b4:	4c f5       	brge	.+82     	; 0x2608 <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25b6:	6d a9       	ldd	r22, Y+53	; 0x35
    25b8:	7e a9       	ldd	r23, Y+54	; 0x36
    25ba:	8f a9       	ldd	r24, Y+55	; 0x37
    25bc:	98 ad       	ldd	r25, Y+56	; 0x38
    25be:	20 e0       	ldi	r18, 0x00	; 0
    25c0:	30 e0       	ldi	r19, 0x00	; 0
    25c2:	40 e2       	ldi	r20, 0x20	; 32
    25c4:	51 e4       	ldi	r21, 0x41	; 65
    25c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25ca:	dc 01       	movw	r26, r24
    25cc:	cb 01       	movw	r24, r22
    25ce:	bc 01       	movw	r22, r24
    25d0:	cd 01       	movw	r24, r26
    25d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25d6:	dc 01       	movw	r26, r24
    25d8:	cb 01       	movw	r24, r22
    25da:	98 ab       	std	Y+48, r25	; 0x30
    25dc:	8f a7       	std	Y+47, r24	; 0x2f
    25de:	0f c0       	rjmp	.+30     	; 0x25fe <LCD_sendCommand+0x56a>
    25e0:	88 ec       	ldi	r24, 0xC8	; 200
    25e2:	90 e0       	ldi	r25, 0x00	; 0
    25e4:	9e a7       	std	Y+46, r25	; 0x2e
    25e6:	8d a7       	std	Y+45, r24	; 0x2d
    25e8:	8d a5       	ldd	r24, Y+45	; 0x2d
    25ea:	9e a5       	ldd	r25, Y+46	; 0x2e
    25ec:	01 97       	sbiw	r24, 0x01	; 1
    25ee:	f1 f7       	brne	.-4      	; 0x25ec <LCD_sendCommand+0x558>
    25f0:	9e a7       	std	Y+46, r25	; 0x2e
    25f2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25f4:	8f a5       	ldd	r24, Y+47	; 0x2f
    25f6:	98 a9       	ldd	r25, Y+48	; 0x30
    25f8:	01 97       	sbiw	r24, 0x01	; 1
    25fa:	98 ab       	std	Y+48, r25	; 0x30
    25fc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25fe:	8f a5       	ldd	r24, Y+47	; 0x2f
    2600:	98 a9       	ldd	r25, Y+48	; 0x30
    2602:	00 97       	sbiw	r24, 0x00	; 0
    2604:	69 f7       	brne	.-38     	; 0x25e0 <LCD_sendCommand+0x54c>
    2606:	14 c0       	rjmp	.+40     	; 0x2630 <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2608:	69 a9       	ldd	r22, Y+49	; 0x31
    260a:	7a a9       	ldd	r23, Y+50	; 0x32
    260c:	8b a9       	ldd	r24, Y+51	; 0x33
    260e:	9c a9       	ldd	r25, Y+52	; 0x34
    2610:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2614:	dc 01       	movw	r26, r24
    2616:	cb 01       	movw	r24, r22
    2618:	98 ab       	std	Y+48, r25	; 0x30
    261a:	8f a7       	std	Y+47, r24	; 0x2f
    261c:	8f a5       	ldd	r24, Y+47	; 0x2f
    261e:	98 a9       	ldd	r25, Y+48	; 0x30
    2620:	9c a7       	std	Y+44, r25	; 0x2c
    2622:	8b a7       	std	Y+43, r24	; 0x2b
    2624:	8b a5       	ldd	r24, Y+43	; 0x2b
    2626:	9c a5       	ldd	r25, Y+44	; 0x2c
    2628:	01 97       	sbiw	r24, 0x01	; 1
    262a:	f1 f7       	brne	.-4      	; 0x2628 <LCD_sendCommand+0x594>
    262c:	9c a7       	std	Y+44, r25	; 0x2c
    262e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2630:	81 e0       	ldi	r24, 0x01	; 1
    2632:	61 e0       	ldi	r22, 0x01	; 1
    2634:	41 e0       	ldi	r20, 0x01	; 1
    2636:	0e 94 b9 0b 	call	0x1772	; 0x1772 <GPIO_writePin>
    263a:	80 e0       	ldi	r24, 0x00	; 0
    263c:	90 e0       	ldi	r25, 0x00	; 0
    263e:	a0 e8       	ldi	r26, 0x80	; 128
    2640:	bf e3       	ldi	r27, 0x3F	; 63
    2642:	8f a3       	std	Y+39, r24	; 0x27
    2644:	98 a7       	std	Y+40, r25	; 0x28
    2646:	a9 a7       	std	Y+41, r26	; 0x29
    2648:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    264a:	6f a1       	ldd	r22, Y+39	; 0x27
    264c:	78 a5       	ldd	r23, Y+40	; 0x28
    264e:	89 a5       	ldd	r24, Y+41	; 0x29
    2650:	9a a5       	ldd	r25, Y+42	; 0x2a
    2652:	20 e0       	ldi	r18, 0x00	; 0
    2654:	30 e0       	ldi	r19, 0x00	; 0
    2656:	4a ef       	ldi	r20, 0xFA	; 250
    2658:	54 e4       	ldi	r21, 0x44	; 68
    265a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    265e:	dc 01       	movw	r26, r24
    2660:	cb 01       	movw	r24, r22
    2662:	8b a3       	std	Y+35, r24	; 0x23
    2664:	9c a3       	std	Y+36, r25	; 0x24
    2666:	ad a3       	std	Y+37, r26	; 0x25
    2668:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    266a:	6b a1       	ldd	r22, Y+35	; 0x23
    266c:	7c a1       	ldd	r23, Y+36	; 0x24
    266e:	8d a1       	ldd	r24, Y+37	; 0x25
    2670:	9e a1       	ldd	r25, Y+38	; 0x26
    2672:	20 e0       	ldi	r18, 0x00	; 0
    2674:	30 e0       	ldi	r19, 0x00	; 0
    2676:	40 e8       	ldi	r20, 0x80	; 128
    2678:	5f e3       	ldi	r21, 0x3F	; 63
    267a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    267e:	88 23       	and	r24, r24
    2680:	2c f4       	brge	.+10     	; 0x268c <LCD_sendCommand+0x5f8>
		__ticks = 1;
    2682:	81 e0       	ldi	r24, 0x01	; 1
    2684:	90 e0       	ldi	r25, 0x00	; 0
    2686:	9a a3       	std	Y+34, r25	; 0x22
    2688:	89 a3       	std	Y+33, r24	; 0x21
    268a:	3f c0       	rjmp	.+126    	; 0x270a <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    268c:	6b a1       	ldd	r22, Y+35	; 0x23
    268e:	7c a1       	ldd	r23, Y+36	; 0x24
    2690:	8d a1       	ldd	r24, Y+37	; 0x25
    2692:	9e a1       	ldd	r25, Y+38	; 0x26
    2694:	20 e0       	ldi	r18, 0x00	; 0
    2696:	3f ef       	ldi	r19, 0xFF	; 255
    2698:	4f e7       	ldi	r20, 0x7F	; 127
    269a:	57 e4       	ldi	r21, 0x47	; 71
    269c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26a0:	18 16       	cp	r1, r24
    26a2:	4c f5       	brge	.+82     	; 0x26f6 <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26a4:	6f a1       	ldd	r22, Y+39	; 0x27
    26a6:	78 a5       	ldd	r23, Y+40	; 0x28
    26a8:	89 a5       	ldd	r24, Y+41	; 0x29
    26aa:	9a a5       	ldd	r25, Y+42	; 0x2a
    26ac:	20 e0       	ldi	r18, 0x00	; 0
    26ae:	30 e0       	ldi	r19, 0x00	; 0
    26b0:	40 e2       	ldi	r20, 0x20	; 32
    26b2:	51 e4       	ldi	r21, 0x41	; 65
    26b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26b8:	dc 01       	movw	r26, r24
    26ba:	cb 01       	movw	r24, r22
    26bc:	bc 01       	movw	r22, r24
    26be:	cd 01       	movw	r24, r26
    26c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26c4:	dc 01       	movw	r26, r24
    26c6:	cb 01       	movw	r24, r22
    26c8:	9a a3       	std	Y+34, r25	; 0x22
    26ca:	89 a3       	std	Y+33, r24	; 0x21
    26cc:	0f c0       	rjmp	.+30     	; 0x26ec <LCD_sendCommand+0x658>
    26ce:	88 ec       	ldi	r24, 0xC8	; 200
    26d0:	90 e0       	ldi	r25, 0x00	; 0
    26d2:	98 a3       	std	Y+32, r25	; 0x20
    26d4:	8f 8f       	std	Y+31, r24	; 0x1f
    26d6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    26d8:	98 a1       	ldd	r25, Y+32	; 0x20
    26da:	01 97       	sbiw	r24, 0x01	; 1
    26dc:	f1 f7       	brne	.-4      	; 0x26da <LCD_sendCommand+0x646>
    26de:	98 a3       	std	Y+32, r25	; 0x20
    26e0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26e2:	89 a1       	ldd	r24, Y+33	; 0x21
    26e4:	9a a1       	ldd	r25, Y+34	; 0x22
    26e6:	01 97       	sbiw	r24, 0x01	; 1
    26e8:	9a a3       	std	Y+34, r25	; 0x22
    26ea:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26ec:	89 a1       	ldd	r24, Y+33	; 0x21
    26ee:	9a a1       	ldd	r25, Y+34	; 0x22
    26f0:	00 97       	sbiw	r24, 0x00	; 0
    26f2:	69 f7       	brne	.-38     	; 0x26ce <LCD_sendCommand+0x63a>
    26f4:	14 c0       	rjmp	.+40     	; 0x271e <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26f6:	6b a1       	ldd	r22, Y+35	; 0x23
    26f8:	7c a1       	ldd	r23, Y+36	; 0x24
    26fa:	8d a1       	ldd	r24, Y+37	; 0x25
    26fc:	9e a1       	ldd	r25, Y+38	; 0x26
    26fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2702:	dc 01       	movw	r26, r24
    2704:	cb 01       	movw	r24, r22
    2706:	9a a3       	std	Y+34, r25	; 0x22
    2708:	89 a3       	std	Y+33, r24	; 0x21
    270a:	89 a1       	ldd	r24, Y+33	; 0x21
    270c:	9a a1       	ldd	r25, Y+34	; 0x22
    270e:	9e 8f       	std	Y+30, r25	; 0x1e
    2710:	8d 8f       	std	Y+29, r24	; 0x1d
    2712:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2714:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2716:	01 97       	sbiw	r24, 0x01	; 1
    2718:	f1 f7       	brne	.-4      	; 0x2716 <LCD_sendCommand+0x682>
    271a:	9e 8f       	std	Y+30, r25	; 0x1e
    271c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,0));
    271e:	fe 01       	movw	r30, r28
    2720:	ed 59       	subi	r30, 0x9D	; 157
    2722:	ff 4f       	sbci	r31, 0xFF	; 255
    2724:	80 81       	ld	r24, Z
    2726:	98 2f       	mov	r25, r24
    2728:	91 70       	andi	r25, 0x01	; 1
    272a:	81 e0       	ldi	r24, 0x01	; 1
    272c:	63 e0       	ldi	r22, 0x03	; 3
    272e:	49 2f       	mov	r20, r25
    2730:	0e 94 b9 0b 	call	0x1772	; 0x1772 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,1));
    2734:	fe 01       	movw	r30, r28
    2736:	ed 59       	subi	r30, 0x9D	; 157
    2738:	ff 4f       	sbci	r31, 0xFF	; 255
    273a:	80 81       	ld	r24, Z
    273c:	88 2f       	mov	r24, r24
    273e:	90 e0       	ldi	r25, 0x00	; 0
    2740:	82 70       	andi	r24, 0x02	; 2
    2742:	90 70       	andi	r25, 0x00	; 0
    2744:	95 95       	asr	r25
    2746:	87 95       	ror	r24
    2748:	98 2f       	mov	r25, r24
    274a:	81 e0       	ldi	r24, 0x01	; 1
    274c:	64 e0       	ldi	r22, 0x04	; 4
    274e:	49 2f       	mov	r20, r25
    2750:	0e 94 b9 0b 	call	0x1772	; 0x1772 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,2));
    2754:	fe 01       	movw	r30, r28
    2756:	ed 59       	subi	r30, 0x9D	; 157
    2758:	ff 4f       	sbci	r31, 0xFF	; 255
    275a:	80 81       	ld	r24, Z
    275c:	88 2f       	mov	r24, r24
    275e:	90 e0       	ldi	r25, 0x00	; 0
    2760:	84 70       	andi	r24, 0x04	; 4
    2762:	90 70       	andi	r25, 0x00	; 0
    2764:	95 95       	asr	r25
    2766:	87 95       	ror	r24
    2768:	95 95       	asr	r25
    276a:	87 95       	ror	r24
    276c:	98 2f       	mov	r25, r24
    276e:	81 e0       	ldi	r24, 0x01	; 1
    2770:	65 e0       	ldi	r22, 0x05	; 5
    2772:	49 2f       	mov	r20, r25
    2774:	0e 94 b9 0b 	call	0x1772	; 0x1772 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,3));
    2778:	fe 01       	movw	r30, r28
    277a:	ed 59       	subi	r30, 0x9D	; 157
    277c:	ff 4f       	sbci	r31, 0xFF	; 255
    277e:	80 81       	ld	r24, Z
    2780:	88 2f       	mov	r24, r24
    2782:	90 e0       	ldi	r25, 0x00	; 0
    2784:	88 70       	andi	r24, 0x08	; 8
    2786:	90 70       	andi	r25, 0x00	; 0
    2788:	95 95       	asr	r25
    278a:	87 95       	ror	r24
    278c:	95 95       	asr	r25
    278e:	87 95       	ror	r24
    2790:	95 95       	asr	r25
    2792:	87 95       	ror	r24
    2794:	98 2f       	mov	r25, r24
    2796:	81 e0       	ldi	r24, 0x01	; 1
    2798:	66 e0       	ldi	r22, 0x06	; 6
    279a:	49 2f       	mov	r20, r25
    279c:	0e 94 b9 0b 	call	0x1772	; 0x1772 <GPIO_writePin>
    27a0:	80 e0       	ldi	r24, 0x00	; 0
    27a2:	90 e0       	ldi	r25, 0x00	; 0
    27a4:	a0 e8       	ldi	r26, 0x80	; 128
    27a6:	bf e3       	ldi	r27, 0x3F	; 63
    27a8:	89 8f       	std	Y+25, r24	; 0x19
    27aa:	9a 8f       	std	Y+26, r25	; 0x1a
    27ac:	ab 8f       	std	Y+27, r26	; 0x1b
    27ae:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27b0:	69 8d       	ldd	r22, Y+25	; 0x19
    27b2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    27b4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27b6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27b8:	20 e0       	ldi	r18, 0x00	; 0
    27ba:	30 e0       	ldi	r19, 0x00	; 0
    27bc:	4a ef       	ldi	r20, 0xFA	; 250
    27be:	54 e4       	ldi	r21, 0x44	; 68
    27c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27c4:	dc 01       	movw	r26, r24
    27c6:	cb 01       	movw	r24, r22
    27c8:	8d 8b       	std	Y+21, r24	; 0x15
    27ca:	9e 8b       	std	Y+22, r25	; 0x16
    27cc:	af 8b       	std	Y+23, r26	; 0x17
    27ce:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    27d0:	6d 89       	ldd	r22, Y+21	; 0x15
    27d2:	7e 89       	ldd	r23, Y+22	; 0x16
    27d4:	8f 89       	ldd	r24, Y+23	; 0x17
    27d6:	98 8d       	ldd	r25, Y+24	; 0x18
    27d8:	20 e0       	ldi	r18, 0x00	; 0
    27da:	30 e0       	ldi	r19, 0x00	; 0
    27dc:	40 e8       	ldi	r20, 0x80	; 128
    27de:	5f e3       	ldi	r21, 0x3F	; 63
    27e0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27e4:	88 23       	and	r24, r24
    27e6:	2c f4       	brge	.+10     	; 0x27f2 <LCD_sendCommand+0x75e>
		__ticks = 1;
    27e8:	81 e0       	ldi	r24, 0x01	; 1
    27ea:	90 e0       	ldi	r25, 0x00	; 0
    27ec:	9c 8b       	std	Y+20, r25	; 0x14
    27ee:	8b 8b       	std	Y+19, r24	; 0x13
    27f0:	3f c0       	rjmp	.+126    	; 0x2870 <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    27f2:	6d 89       	ldd	r22, Y+21	; 0x15
    27f4:	7e 89       	ldd	r23, Y+22	; 0x16
    27f6:	8f 89       	ldd	r24, Y+23	; 0x17
    27f8:	98 8d       	ldd	r25, Y+24	; 0x18
    27fa:	20 e0       	ldi	r18, 0x00	; 0
    27fc:	3f ef       	ldi	r19, 0xFF	; 255
    27fe:	4f e7       	ldi	r20, 0x7F	; 127
    2800:	57 e4       	ldi	r21, 0x47	; 71
    2802:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2806:	18 16       	cp	r1, r24
    2808:	4c f5       	brge	.+82     	; 0x285c <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    280a:	69 8d       	ldd	r22, Y+25	; 0x19
    280c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    280e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2810:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2812:	20 e0       	ldi	r18, 0x00	; 0
    2814:	30 e0       	ldi	r19, 0x00	; 0
    2816:	40 e2       	ldi	r20, 0x20	; 32
    2818:	51 e4       	ldi	r21, 0x41	; 65
    281a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    281e:	dc 01       	movw	r26, r24
    2820:	cb 01       	movw	r24, r22
    2822:	bc 01       	movw	r22, r24
    2824:	cd 01       	movw	r24, r26
    2826:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    282a:	dc 01       	movw	r26, r24
    282c:	cb 01       	movw	r24, r22
    282e:	9c 8b       	std	Y+20, r25	; 0x14
    2830:	8b 8b       	std	Y+19, r24	; 0x13
    2832:	0f c0       	rjmp	.+30     	; 0x2852 <LCD_sendCommand+0x7be>
    2834:	88 ec       	ldi	r24, 0xC8	; 200
    2836:	90 e0       	ldi	r25, 0x00	; 0
    2838:	9a 8b       	std	Y+18, r25	; 0x12
    283a:	89 8b       	std	Y+17, r24	; 0x11
    283c:	89 89       	ldd	r24, Y+17	; 0x11
    283e:	9a 89       	ldd	r25, Y+18	; 0x12
    2840:	01 97       	sbiw	r24, 0x01	; 1
    2842:	f1 f7       	brne	.-4      	; 0x2840 <LCD_sendCommand+0x7ac>
    2844:	9a 8b       	std	Y+18, r25	; 0x12
    2846:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2848:	8b 89       	ldd	r24, Y+19	; 0x13
    284a:	9c 89       	ldd	r25, Y+20	; 0x14
    284c:	01 97       	sbiw	r24, 0x01	; 1
    284e:	9c 8b       	std	Y+20, r25	; 0x14
    2850:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2852:	8b 89       	ldd	r24, Y+19	; 0x13
    2854:	9c 89       	ldd	r25, Y+20	; 0x14
    2856:	00 97       	sbiw	r24, 0x00	; 0
    2858:	69 f7       	brne	.-38     	; 0x2834 <LCD_sendCommand+0x7a0>
    285a:	14 c0       	rjmp	.+40     	; 0x2884 <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    285c:	6d 89       	ldd	r22, Y+21	; 0x15
    285e:	7e 89       	ldd	r23, Y+22	; 0x16
    2860:	8f 89       	ldd	r24, Y+23	; 0x17
    2862:	98 8d       	ldd	r25, Y+24	; 0x18
    2864:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2868:	dc 01       	movw	r26, r24
    286a:	cb 01       	movw	r24, r22
    286c:	9c 8b       	std	Y+20, r25	; 0x14
    286e:	8b 8b       	std	Y+19, r24	; 0x13
    2870:	8b 89       	ldd	r24, Y+19	; 0x13
    2872:	9c 89       	ldd	r25, Y+20	; 0x14
    2874:	98 8b       	std	Y+16, r25	; 0x10
    2876:	8f 87       	std	Y+15, r24	; 0x0f
    2878:	8f 85       	ldd	r24, Y+15	; 0x0f
    287a:	98 89       	ldd	r25, Y+16	; 0x10
    287c:	01 97       	sbiw	r24, 0x01	; 1
    287e:	f1 f7       	brne	.-4      	; 0x287c <LCD_sendCommand+0x7e8>
    2880:	98 8b       	std	Y+16, r25	; 0x10
    2882:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2884:	81 e0       	ldi	r24, 0x01	; 1
    2886:	61 e0       	ldi	r22, 0x01	; 1
    2888:	40 e0       	ldi	r20, 0x00	; 0
    288a:	0e 94 b9 0b 	call	0x1772	; 0x1772 <GPIO_writePin>
    288e:	80 e0       	ldi	r24, 0x00	; 0
    2890:	90 e0       	ldi	r25, 0x00	; 0
    2892:	a0 e8       	ldi	r26, 0x80	; 128
    2894:	bf e3       	ldi	r27, 0x3F	; 63
    2896:	8b 87       	std	Y+11, r24	; 0x0b
    2898:	9c 87       	std	Y+12, r25	; 0x0c
    289a:	ad 87       	std	Y+13, r26	; 0x0d
    289c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    289e:	6b 85       	ldd	r22, Y+11	; 0x0b
    28a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    28a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    28a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    28a6:	20 e0       	ldi	r18, 0x00	; 0
    28a8:	30 e0       	ldi	r19, 0x00	; 0
    28aa:	4a ef       	ldi	r20, 0xFA	; 250
    28ac:	54 e4       	ldi	r21, 0x44	; 68
    28ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28b2:	dc 01       	movw	r26, r24
    28b4:	cb 01       	movw	r24, r22
    28b6:	8f 83       	std	Y+7, r24	; 0x07
    28b8:	98 87       	std	Y+8, r25	; 0x08
    28ba:	a9 87       	std	Y+9, r26	; 0x09
    28bc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    28be:	6f 81       	ldd	r22, Y+7	; 0x07
    28c0:	78 85       	ldd	r23, Y+8	; 0x08
    28c2:	89 85       	ldd	r24, Y+9	; 0x09
    28c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    28c6:	20 e0       	ldi	r18, 0x00	; 0
    28c8:	30 e0       	ldi	r19, 0x00	; 0
    28ca:	40 e8       	ldi	r20, 0x80	; 128
    28cc:	5f e3       	ldi	r21, 0x3F	; 63
    28ce:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28d2:	88 23       	and	r24, r24
    28d4:	2c f4       	brge	.+10     	; 0x28e0 <LCD_sendCommand+0x84c>
		__ticks = 1;
    28d6:	81 e0       	ldi	r24, 0x01	; 1
    28d8:	90 e0       	ldi	r25, 0x00	; 0
    28da:	9e 83       	std	Y+6, r25	; 0x06
    28dc:	8d 83       	std	Y+5, r24	; 0x05
    28de:	3f c0       	rjmp	.+126    	; 0x295e <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    28e0:	6f 81       	ldd	r22, Y+7	; 0x07
    28e2:	78 85       	ldd	r23, Y+8	; 0x08
    28e4:	89 85       	ldd	r24, Y+9	; 0x09
    28e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    28e8:	20 e0       	ldi	r18, 0x00	; 0
    28ea:	3f ef       	ldi	r19, 0xFF	; 255
    28ec:	4f e7       	ldi	r20, 0x7F	; 127
    28ee:	57 e4       	ldi	r21, 0x47	; 71
    28f0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28f4:	18 16       	cp	r1, r24
    28f6:	4c f5       	brge	.+82     	; 0x294a <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    28fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    28fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    28fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    2900:	20 e0       	ldi	r18, 0x00	; 0
    2902:	30 e0       	ldi	r19, 0x00	; 0
    2904:	40 e2       	ldi	r20, 0x20	; 32
    2906:	51 e4       	ldi	r21, 0x41	; 65
    2908:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    290c:	dc 01       	movw	r26, r24
    290e:	cb 01       	movw	r24, r22
    2910:	bc 01       	movw	r22, r24
    2912:	cd 01       	movw	r24, r26
    2914:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2918:	dc 01       	movw	r26, r24
    291a:	cb 01       	movw	r24, r22
    291c:	9e 83       	std	Y+6, r25	; 0x06
    291e:	8d 83       	std	Y+5, r24	; 0x05
    2920:	0f c0       	rjmp	.+30     	; 0x2940 <LCD_sendCommand+0x8ac>
    2922:	88 ec       	ldi	r24, 0xC8	; 200
    2924:	90 e0       	ldi	r25, 0x00	; 0
    2926:	9c 83       	std	Y+4, r25	; 0x04
    2928:	8b 83       	std	Y+3, r24	; 0x03
    292a:	8b 81       	ldd	r24, Y+3	; 0x03
    292c:	9c 81       	ldd	r25, Y+4	; 0x04
    292e:	01 97       	sbiw	r24, 0x01	; 1
    2930:	f1 f7       	brne	.-4      	; 0x292e <LCD_sendCommand+0x89a>
    2932:	9c 83       	std	Y+4, r25	; 0x04
    2934:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2936:	8d 81       	ldd	r24, Y+5	; 0x05
    2938:	9e 81       	ldd	r25, Y+6	; 0x06
    293a:	01 97       	sbiw	r24, 0x01	; 1
    293c:	9e 83       	std	Y+6, r25	; 0x06
    293e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2940:	8d 81       	ldd	r24, Y+5	; 0x05
    2942:	9e 81       	ldd	r25, Y+6	; 0x06
    2944:	00 97       	sbiw	r24, 0x00	; 0
    2946:	69 f7       	brne	.-38     	; 0x2922 <LCD_sendCommand+0x88e>
    2948:	14 c0       	rjmp	.+40     	; 0x2972 <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    294a:	6f 81       	ldd	r22, Y+7	; 0x07
    294c:	78 85       	ldd	r23, Y+8	; 0x08
    294e:	89 85       	ldd	r24, Y+9	; 0x09
    2950:	9a 85       	ldd	r25, Y+10	; 0x0a
    2952:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2956:	dc 01       	movw	r26, r24
    2958:	cb 01       	movw	r24, r22
    295a:	9e 83       	std	Y+6, r25	; 0x06
    295c:	8d 83       	std	Y+5, r24	; 0x05
    295e:	8d 81       	ldd	r24, Y+5	; 0x05
    2960:	9e 81       	ldd	r25, Y+6	; 0x06
    2962:	9a 83       	std	Y+2, r25	; 0x02
    2964:	89 83       	std	Y+1, r24	; 0x01
    2966:	89 81       	ldd	r24, Y+1	; 0x01
    2968:	9a 81       	ldd	r25, Y+2	; 0x02
    296a:	01 97       	sbiw	r24, 0x01	; 1
    296c:	f1 f7       	brne	.-4      	; 0x296a <LCD_sendCommand+0x8d6>
    296e:	9a 83       	std	Y+2, r25	; 0x02
    2970:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2972:	cd 59       	subi	r28, 0x9D	; 157
    2974:	df 4f       	sbci	r29, 0xFF	; 255
    2976:	0f b6       	in	r0, 0x3f	; 63
    2978:	f8 94       	cli
    297a:	de bf       	out	0x3e, r29	; 62
    297c:	0f be       	out	0x3f, r0	; 63
    297e:	cd bf       	out	0x3d, r28	; 61
    2980:	cf 91       	pop	r28
    2982:	df 91       	pop	r29
    2984:	1f 91       	pop	r17
    2986:	0f 91       	pop	r16
    2988:	08 95       	ret

0000298a <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    298a:	0f 93       	push	r16
    298c:	1f 93       	push	r17
    298e:	df 93       	push	r29
    2990:	cf 93       	push	r28
    2992:	cd b7       	in	r28, 0x3d	; 61
    2994:	de b7       	in	r29, 0x3e	; 62
    2996:	c3 56       	subi	r28, 0x63	; 99
    2998:	d0 40       	sbci	r29, 0x00	; 0
    299a:	0f b6       	in	r0, 0x3f	; 63
    299c:	f8 94       	cli
    299e:	de bf       	out	0x3e, r29	; 62
    29a0:	0f be       	out	0x3f, r0	; 63
    29a2:	cd bf       	out	0x3d, r28	; 61
    29a4:	fe 01       	movw	r30, r28
    29a6:	ed 59       	subi	r30, 0x9D	; 157
    29a8:	ff 4f       	sbci	r31, 0xFF	; 255
    29aa:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    29ac:	81 e0       	ldi	r24, 0x01	; 1
    29ae:	60 e0       	ldi	r22, 0x00	; 0
    29b0:	41 e0       	ldi	r20, 0x01	; 1
    29b2:	0e 94 b9 0b 	call	0x1772	; 0x1772 <GPIO_writePin>
    29b6:	fe 01       	movw	r30, r28
    29b8:	e1 5a       	subi	r30, 0xA1	; 161
    29ba:	ff 4f       	sbci	r31, 0xFF	; 255
    29bc:	80 e0       	ldi	r24, 0x00	; 0
    29be:	90 e0       	ldi	r25, 0x00	; 0
    29c0:	a0 e8       	ldi	r26, 0x80	; 128
    29c2:	bf e3       	ldi	r27, 0x3F	; 63
    29c4:	80 83       	st	Z, r24
    29c6:	91 83       	std	Z+1, r25	; 0x01
    29c8:	a2 83       	std	Z+2, r26	; 0x02
    29ca:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29cc:	8e 01       	movw	r16, r28
    29ce:	05 5a       	subi	r16, 0xA5	; 165
    29d0:	1f 4f       	sbci	r17, 0xFF	; 255
    29d2:	fe 01       	movw	r30, r28
    29d4:	e1 5a       	subi	r30, 0xA1	; 161
    29d6:	ff 4f       	sbci	r31, 0xFF	; 255
    29d8:	60 81       	ld	r22, Z
    29da:	71 81       	ldd	r23, Z+1	; 0x01
    29dc:	82 81       	ldd	r24, Z+2	; 0x02
    29de:	93 81       	ldd	r25, Z+3	; 0x03
    29e0:	20 e0       	ldi	r18, 0x00	; 0
    29e2:	30 e0       	ldi	r19, 0x00	; 0
    29e4:	4a ef       	ldi	r20, 0xFA	; 250
    29e6:	54 e4       	ldi	r21, 0x44	; 68
    29e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29ec:	dc 01       	movw	r26, r24
    29ee:	cb 01       	movw	r24, r22
    29f0:	f8 01       	movw	r30, r16
    29f2:	80 83       	st	Z, r24
    29f4:	91 83       	std	Z+1, r25	; 0x01
    29f6:	a2 83       	std	Z+2, r26	; 0x02
    29f8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    29fa:	fe 01       	movw	r30, r28
    29fc:	e5 5a       	subi	r30, 0xA5	; 165
    29fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2a00:	60 81       	ld	r22, Z
    2a02:	71 81       	ldd	r23, Z+1	; 0x01
    2a04:	82 81       	ldd	r24, Z+2	; 0x02
    2a06:	93 81       	ldd	r25, Z+3	; 0x03
    2a08:	20 e0       	ldi	r18, 0x00	; 0
    2a0a:	30 e0       	ldi	r19, 0x00	; 0
    2a0c:	40 e8       	ldi	r20, 0x80	; 128
    2a0e:	5f e3       	ldi	r21, 0x3F	; 63
    2a10:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a14:	88 23       	and	r24, r24
    2a16:	44 f4       	brge	.+16     	; 0x2a28 <LCD_displayCharacter+0x9e>
		__ticks = 1;
    2a18:	fe 01       	movw	r30, r28
    2a1a:	e7 5a       	subi	r30, 0xA7	; 167
    2a1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a1e:	81 e0       	ldi	r24, 0x01	; 1
    2a20:	90 e0       	ldi	r25, 0x00	; 0
    2a22:	91 83       	std	Z+1, r25	; 0x01
    2a24:	80 83       	st	Z, r24
    2a26:	64 c0       	rjmp	.+200    	; 0x2af0 <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    2a28:	fe 01       	movw	r30, r28
    2a2a:	e5 5a       	subi	r30, 0xA5	; 165
    2a2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a2e:	60 81       	ld	r22, Z
    2a30:	71 81       	ldd	r23, Z+1	; 0x01
    2a32:	82 81       	ldd	r24, Z+2	; 0x02
    2a34:	93 81       	ldd	r25, Z+3	; 0x03
    2a36:	20 e0       	ldi	r18, 0x00	; 0
    2a38:	3f ef       	ldi	r19, 0xFF	; 255
    2a3a:	4f e7       	ldi	r20, 0x7F	; 127
    2a3c:	57 e4       	ldi	r21, 0x47	; 71
    2a3e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a42:	18 16       	cp	r1, r24
    2a44:	0c f0       	brlt	.+2      	; 0x2a48 <LCD_displayCharacter+0xbe>
    2a46:	43 c0       	rjmp	.+134    	; 0x2ace <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a48:	fe 01       	movw	r30, r28
    2a4a:	e1 5a       	subi	r30, 0xA1	; 161
    2a4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a4e:	60 81       	ld	r22, Z
    2a50:	71 81       	ldd	r23, Z+1	; 0x01
    2a52:	82 81       	ldd	r24, Z+2	; 0x02
    2a54:	93 81       	ldd	r25, Z+3	; 0x03
    2a56:	20 e0       	ldi	r18, 0x00	; 0
    2a58:	30 e0       	ldi	r19, 0x00	; 0
    2a5a:	40 e2       	ldi	r20, 0x20	; 32
    2a5c:	51 e4       	ldi	r21, 0x41	; 65
    2a5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a62:	dc 01       	movw	r26, r24
    2a64:	cb 01       	movw	r24, r22
    2a66:	8e 01       	movw	r16, r28
    2a68:	07 5a       	subi	r16, 0xA7	; 167
    2a6a:	1f 4f       	sbci	r17, 0xFF	; 255
    2a6c:	bc 01       	movw	r22, r24
    2a6e:	cd 01       	movw	r24, r26
    2a70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a74:	dc 01       	movw	r26, r24
    2a76:	cb 01       	movw	r24, r22
    2a78:	f8 01       	movw	r30, r16
    2a7a:	91 83       	std	Z+1, r25	; 0x01
    2a7c:	80 83       	st	Z, r24
    2a7e:	1f c0       	rjmp	.+62     	; 0x2abe <LCD_displayCharacter+0x134>
    2a80:	fe 01       	movw	r30, r28
    2a82:	e9 5a       	subi	r30, 0xA9	; 169
    2a84:	ff 4f       	sbci	r31, 0xFF	; 255
    2a86:	88 ec       	ldi	r24, 0xC8	; 200
    2a88:	90 e0       	ldi	r25, 0x00	; 0
    2a8a:	91 83       	std	Z+1, r25	; 0x01
    2a8c:	80 83       	st	Z, r24
    2a8e:	fe 01       	movw	r30, r28
    2a90:	e9 5a       	subi	r30, 0xA9	; 169
    2a92:	ff 4f       	sbci	r31, 0xFF	; 255
    2a94:	80 81       	ld	r24, Z
    2a96:	91 81       	ldd	r25, Z+1	; 0x01
    2a98:	01 97       	sbiw	r24, 0x01	; 1
    2a9a:	f1 f7       	brne	.-4      	; 0x2a98 <LCD_displayCharacter+0x10e>
    2a9c:	fe 01       	movw	r30, r28
    2a9e:	e9 5a       	subi	r30, 0xA9	; 169
    2aa0:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa2:	91 83       	std	Z+1, r25	; 0x01
    2aa4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2aa6:	de 01       	movw	r26, r28
    2aa8:	a7 5a       	subi	r26, 0xA7	; 167
    2aaa:	bf 4f       	sbci	r27, 0xFF	; 255
    2aac:	fe 01       	movw	r30, r28
    2aae:	e7 5a       	subi	r30, 0xA7	; 167
    2ab0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab2:	80 81       	ld	r24, Z
    2ab4:	91 81       	ldd	r25, Z+1	; 0x01
    2ab6:	01 97       	sbiw	r24, 0x01	; 1
    2ab8:	11 96       	adiw	r26, 0x01	; 1
    2aba:	9c 93       	st	X, r25
    2abc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2abe:	fe 01       	movw	r30, r28
    2ac0:	e7 5a       	subi	r30, 0xA7	; 167
    2ac2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac4:	80 81       	ld	r24, Z
    2ac6:	91 81       	ldd	r25, Z+1	; 0x01
    2ac8:	00 97       	sbiw	r24, 0x00	; 0
    2aca:	d1 f6       	brne	.-76     	; 0x2a80 <LCD_displayCharacter+0xf6>
    2acc:	27 c0       	rjmp	.+78     	; 0x2b1c <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ace:	8e 01       	movw	r16, r28
    2ad0:	07 5a       	subi	r16, 0xA7	; 167
    2ad2:	1f 4f       	sbci	r17, 0xFF	; 255
    2ad4:	fe 01       	movw	r30, r28
    2ad6:	e5 5a       	subi	r30, 0xA5	; 165
    2ad8:	ff 4f       	sbci	r31, 0xFF	; 255
    2ada:	60 81       	ld	r22, Z
    2adc:	71 81       	ldd	r23, Z+1	; 0x01
    2ade:	82 81       	ldd	r24, Z+2	; 0x02
    2ae0:	93 81       	ldd	r25, Z+3	; 0x03
    2ae2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ae6:	dc 01       	movw	r26, r24
    2ae8:	cb 01       	movw	r24, r22
    2aea:	f8 01       	movw	r30, r16
    2aec:	91 83       	std	Z+1, r25	; 0x01
    2aee:	80 83       	st	Z, r24
    2af0:	de 01       	movw	r26, r28
    2af2:	ab 5a       	subi	r26, 0xAB	; 171
    2af4:	bf 4f       	sbci	r27, 0xFF	; 255
    2af6:	fe 01       	movw	r30, r28
    2af8:	e7 5a       	subi	r30, 0xA7	; 167
    2afa:	ff 4f       	sbci	r31, 0xFF	; 255
    2afc:	80 81       	ld	r24, Z
    2afe:	91 81       	ldd	r25, Z+1	; 0x01
    2b00:	8d 93       	st	X+, r24
    2b02:	9c 93       	st	X, r25
    2b04:	fe 01       	movw	r30, r28
    2b06:	eb 5a       	subi	r30, 0xAB	; 171
    2b08:	ff 4f       	sbci	r31, 0xFF	; 255
    2b0a:	80 81       	ld	r24, Z
    2b0c:	91 81       	ldd	r25, Z+1	; 0x01
    2b0e:	01 97       	sbiw	r24, 0x01	; 1
    2b10:	f1 f7       	brne	.-4      	; 0x2b0e <LCD_displayCharacter+0x184>
    2b12:	fe 01       	movw	r30, r28
    2b14:	eb 5a       	subi	r30, 0xAB	; 171
    2b16:	ff 4f       	sbci	r31, 0xFF	; 255
    2b18:	91 83       	std	Z+1, r25	; 0x01
    2b1a:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2b1c:	81 e0       	ldi	r24, 0x01	; 1
    2b1e:	61 e0       	ldi	r22, 0x01	; 1
    2b20:	41 e0       	ldi	r20, 0x01	; 1
    2b22:	0e 94 b9 0b 	call	0x1772	; 0x1772 <GPIO_writePin>
    2b26:	fe 01       	movw	r30, r28
    2b28:	ef 5a       	subi	r30, 0xAF	; 175
    2b2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b2c:	80 e0       	ldi	r24, 0x00	; 0
    2b2e:	90 e0       	ldi	r25, 0x00	; 0
    2b30:	a0 e8       	ldi	r26, 0x80	; 128
    2b32:	bf e3       	ldi	r27, 0x3F	; 63
    2b34:	80 83       	st	Z, r24
    2b36:	91 83       	std	Z+1, r25	; 0x01
    2b38:	a2 83       	std	Z+2, r26	; 0x02
    2b3a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b3c:	8e 01       	movw	r16, r28
    2b3e:	03 5b       	subi	r16, 0xB3	; 179
    2b40:	1f 4f       	sbci	r17, 0xFF	; 255
    2b42:	fe 01       	movw	r30, r28
    2b44:	ef 5a       	subi	r30, 0xAF	; 175
    2b46:	ff 4f       	sbci	r31, 0xFF	; 255
    2b48:	60 81       	ld	r22, Z
    2b4a:	71 81       	ldd	r23, Z+1	; 0x01
    2b4c:	82 81       	ldd	r24, Z+2	; 0x02
    2b4e:	93 81       	ldd	r25, Z+3	; 0x03
    2b50:	20 e0       	ldi	r18, 0x00	; 0
    2b52:	30 e0       	ldi	r19, 0x00	; 0
    2b54:	4a ef       	ldi	r20, 0xFA	; 250
    2b56:	54 e4       	ldi	r21, 0x44	; 68
    2b58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b5c:	dc 01       	movw	r26, r24
    2b5e:	cb 01       	movw	r24, r22
    2b60:	f8 01       	movw	r30, r16
    2b62:	80 83       	st	Z, r24
    2b64:	91 83       	std	Z+1, r25	; 0x01
    2b66:	a2 83       	std	Z+2, r26	; 0x02
    2b68:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2b6a:	fe 01       	movw	r30, r28
    2b6c:	e3 5b       	subi	r30, 0xB3	; 179
    2b6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b70:	60 81       	ld	r22, Z
    2b72:	71 81       	ldd	r23, Z+1	; 0x01
    2b74:	82 81       	ldd	r24, Z+2	; 0x02
    2b76:	93 81       	ldd	r25, Z+3	; 0x03
    2b78:	20 e0       	ldi	r18, 0x00	; 0
    2b7a:	30 e0       	ldi	r19, 0x00	; 0
    2b7c:	40 e8       	ldi	r20, 0x80	; 128
    2b7e:	5f e3       	ldi	r21, 0x3F	; 63
    2b80:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b84:	88 23       	and	r24, r24
    2b86:	44 f4       	brge	.+16     	; 0x2b98 <LCD_displayCharacter+0x20e>
		__ticks = 1;
    2b88:	fe 01       	movw	r30, r28
    2b8a:	e5 5b       	subi	r30, 0xB5	; 181
    2b8c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b8e:	81 e0       	ldi	r24, 0x01	; 1
    2b90:	90 e0       	ldi	r25, 0x00	; 0
    2b92:	91 83       	std	Z+1, r25	; 0x01
    2b94:	80 83       	st	Z, r24
    2b96:	64 c0       	rjmp	.+200    	; 0x2c60 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    2b98:	fe 01       	movw	r30, r28
    2b9a:	e3 5b       	subi	r30, 0xB3	; 179
    2b9c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b9e:	60 81       	ld	r22, Z
    2ba0:	71 81       	ldd	r23, Z+1	; 0x01
    2ba2:	82 81       	ldd	r24, Z+2	; 0x02
    2ba4:	93 81       	ldd	r25, Z+3	; 0x03
    2ba6:	20 e0       	ldi	r18, 0x00	; 0
    2ba8:	3f ef       	ldi	r19, 0xFF	; 255
    2baa:	4f e7       	ldi	r20, 0x7F	; 127
    2bac:	57 e4       	ldi	r21, 0x47	; 71
    2bae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2bb2:	18 16       	cp	r1, r24
    2bb4:	0c f0       	brlt	.+2      	; 0x2bb8 <LCD_displayCharacter+0x22e>
    2bb6:	43 c0       	rjmp	.+134    	; 0x2c3e <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bb8:	fe 01       	movw	r30, r28
    2bba:	ef 5a       	subi	r30, 0xAF	; 175
    2bbc:	ff 4f       	sbci	r31, 0xFF	; 255
    2bbe:	60 81       	ld	r22, Z
    2bc0:	71 81       	ldd	r23, Z+1	; 0x01
    2bc2:	82 81       	ldd	r24, Z+2	; 0x02
    2bc4:	93 81       	ldd	r25, Z+3	; 0x03
    2bc6:	20 e0       	ldi	r18, 0x00	; 0
    2bc8:	30 e0       	ldi	r19, 0x00	; 0
    2bca:	40 e2       	ldi	r20, 0x20	; 32
    2bcc:	51 e4       	ldi	r21, 0x41	; 65
    2bce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bd2:	dc 01       	movw	r26, r24
    2bd4:	cb 01       	movw	r24, r22
    2bd6:	8e 01       	movw	r16, r28
    2bd8:	05 5b       	subi	r16, 0xB5	; 181
    2bda:	1f 4f       	sbci	r17, 0xFF	; 255
    2bdc:	bc 01       	movw	r22, r24
    2bde:	cd 01       	movw	r24, r26
    2be0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2be4:	dc 01       	movw	r26, r24
    2be6:	cb 01       	movw	r24, r22
    2be8:	f8 01       	movw	r30, r16
    2bea:	91 83       	std	Z+1, r25	; 0x01
    2bec:	80 83       	st	Z, r24
    2bee:	1f c0       	rjmp	.+62     	; 0x2c2e <LCD_displayCharacter+0x2a4>
    2bf0:	fe 01       	movw	r30, r28
    2bf2:	e7 5b       	subi	r30, 0xB7	; 183
    2bf4:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf6:	88 ec       	ldi	r24, 0xC8	; 200
    2bf8:	90 e0       	ldi	r25, 0x00	; 0
    2bfa:	91 83       	std	Z+1, r25	; 0x01
    2bfc:	80 83       	st	Z, r24
    2bfe:	fe 01       	movw	r30, r28
    2c00:	e7 5b       	subi	r30, 0xB7	; 183
    2c02:	ff 4f       	sbci	r31, 0xFF	; 255
    2c04:	80 81       	ld	r24, Z
    2c06:	91 81       	ldd	r25, Z+1	; 0x01
    2c08:	01 97       	sbiw	r24, 0x01	; 1
    2c0a:	f1 f7       	brne	.-4      	; 0x2c08 <LCD_displayCharacter+0x27e>
    2c0c:	fe 01       	movw	r30, r28
    2c0e:	e7 5b       	subi	r30, 0xB7	; 183
    2c10:	ff 4f       	sbci	r31, 0xFF	; 255
    2c12:	91 83       	std	Z+1, r25	; 0x01
    2c14:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c16:	de 01       	movw	r26, r28
    2c18:	a5 5b       	subi	r26, 0xB5	; 181
    2c1a:	bf 4f       	sbci	r27, 0xFF	; 255
    2c1c:	fe 01       	movw	r30, r28
    2c1e:	e5 5b       	subi	r30, 0xB5	; 181
    2c20:	ff 4f       	sbci	r31, 0xFF	; 255
    2c22:	80 81       	ld	r24, Z
    2c24:	91 81       	ldd	r25, Z+1	; 0x01
    2c26:	01 97       	sbiw	r24, 0x01	; 1
    2c28:	11 96       	adiw	r26, 0x01	; 1
    2c2a:	9c 93       	st	X, r25
    2c2c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c2e:	fe 01       	movw	r30, r28
    2c30:	e5 5b       	subi	r30, 0xB5	; 181
    2c32:	ff 4f       	sbci	r31, 0xFF	; 255
    2c34:	80 81       	ld	r24, Z
    2c36:	91 81       	ldd	r25, Z+1	; 0x01
    2c38:	00 97       	sbiw	r24, 0x00	; 0
    2c3a:	d1 f6       	brne	.-76     	; 0x2bf0 <LCD_displayCharacter+0x266>
    2c3c:	27 c0       	rjmp	.+78     	; 0x2c8c <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c3e:	8e 01       	movw	r16, r28
    2c40:	05 5b       	subi	r16, 0xB5	; 181
    2c42:	1f 4f       	sbci	r17, 0xFF	; 255
    2c44:	fe 01       	movw	r30, r28
    2c46:	e3 5b       	subi	r30, 0xB3	; 179
    2c48:	ff 4f       	sbci	r31, 0xFF	; 255
    2c4a:	60 81       	ld	r22, Z
    2c4c:	71 81       	ldd	r23, Z+1	; 0x01
    2c4e:	82 81       	ldd	r24, Z+2	; 0x02
    2c50:	93 81       	ldd	r25, Z+3	; 0x03
    2c52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c56:	dc 01       	movw	r26, r24
    2c58:	cb 01       	movw	r24, r22
    2c5a:	f8 01       	movw	r30, r16
    2c5c:	91 83       	std	Z+1, r25	; 0x01
    2c5e:	80 83       	st	Z, r24
    2c60:	de 01       	movw	r26, r28
    2c62:	a9 5b       	subi	r26, 0xB9	; 185
    2c64:	bf 4f       	sbci	r27, 0xFF	; 255
    2c66:	fe 01       	movw	r30, r28
    2c68:	e5 5b       	subi	r30, 0xB5	; 181
    2c6a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c6c:	80 81       	ld	r24, Z
    2c6e:	91 81       	ldd	r25, Z+1	; 0x01
    2c70:	8d 93       	st	X+, r24
    2c72:	9c 93       	st	X, r25
    2c74:	fe 01       	movw	r30, r28
    2c76:	e9 5b       	subi	r30, 0xB9	; 185
    2c78:	ff 4f       	sbci	r31, 0xFF	; 255
    2c7a:	80 81       	ld	r24, Z
    2c7c:	91 81       	ldd	r25, Z+1	; 0x01
    2c7e:	01 97       	sbiw	r24, 0x01	; 1
    2c80:	f1 f7       	brne	.-4      	; 0x2c7e <LCD_displayCharacter+0x2f4>
    2c82:	fe 01       	movw	r30, r28
    2c84:	e9 5b       	subi	r30, 0xB9	; 185
    2c86:	ff 4f       	sbci	r31, 0xFF	; 255
    2c88:	91 83       	std	Z+1, r25	; 0x01
    2c8a:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,4));
    2c8c:	fe 01       	movw	r30, r28
    2c8e:	ed 59       	subi	r30, 0x9D	; 157
    2c90:	ff 4f       	sbci	r31, 0xFF	; 255
    2c92:	80 81       	ld	r24, Z
    2c94:	88 2f       	mov	r24, r24
    2c96:	90 e0       	ldi	r25, 0x00	; 0
    2c98:	80 71       	andi	r24, 0x10	; 16
    2c9a:	90 70       	andi	r25, 0x00	; 0
    2c9c:	95 95       	asr	r25
    2c9e:	87 95       	ror	r24
    2ca0:	95 95       	asr	r25
    2ca2:	87 95       	ror	r24
    2ca4:	95 95       	asr	r25
    2ca6:	87 95       	ror	r24
    2ca8:	95 95       	asr	r25
    2caa:	87 95       	ror	r24
    2cac:	98 2f       	mov	r25, r24
    2cae:	81 e0       	ldi	r24, 0x01	; 1
    2cb0:	63 e0       	ldi	r22, 0x03	; 3
    2cb2:	49 2f       	mov	r20, r25
    2cb4:	0e 94 b9 0b 	call	0x1772	; 0x1772 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,5));
    2cb8:	fe 01       	movw	r30, r28
    2cba:	ed 59       	subi	r30, 0x9D	; 157
    2cbc:	ff 4f       	sbci	r31, 0xFF	; 255
    2cbe:	80 81       	ld	r24, Z
    2cc0:	88 2f       	mov	r24, r24
    2cc2:	90 e0       	ldi	r25, 0x00	; 0
    2cc4:	80 72       	andi	r24, 0x20	; 32
    2cc6:	90 70       	andi	r25, 0x00	; 0
    2cc8:	95 95       	asr	r25
    2cca:	87 95       	ror	r24
    2ccc:	95 95       	asr	r25
    2cce:	87 95       	ror	r24
    2cd0:	95 95       	asr	r25
    2cd2:	87 95       	ror	r24
    2cd4:	95 95       	asr	r25
    2cd6:	87 95       	ror	r24
    2cd8:	95 95       	asr	r25
    2cda:	87 95       	ror	r24
    2cdc:	98 2f       	mov	r25, r24
    2cde:	81 e0       	ldi	r24, 0x01	; 1
    2ce0:	64 e0       	ldi	r22, 0x04	; 4
    2ce2:	49 2f       	mov	r20, r25
    2ce4:	0e 94 b9 0b 	call	0x1772	; 0x1772 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,6));
    2ce8:	fe 01       	movw	r30, r28
    2cea:	ed 59       	subi	r30, 0x9D	; 157
    2cec:	ff 4f       	sbci	r31, 0xFF	; 255
    2cee:	80 81       	ld	r24, Z
    2cf0:	88 2f       	mov	r24, r24
    2cf2:	90 e0       	ldi	r25, 0x00	; 0
    2cf4:	80 74       	andi	r24, 0x40	; 64
    2cf6:	90 70       	andi	r25, 0x00	; 0
    2cf8:	08 2e       	mov	r0, r24
    2cfa:	89 2f       	mov	r24, r25
    2cfc:	00 0c       	add	r0, r0
    2cfe:	88 1f       	adc	r24, r24
    2d00:	99 0b       	sbc	r25, r25
    2d02:	00 0c       	add	r0, r0
    2d04:	88 1f       	adc	r24, r24
    2d06:	99 1f       	adc	r25, r25
    2d08:	98 2f       	mov	r25, r24
    2d0a:	81 e0       	ldi	r24, 0x01	; 1
    2d0c:	65 e0       	ldi	r22, 0x05	; 5
    2d0e:	49 2f       	mov	r20, r25
    2d10:	0e 94 b9 0b 	call	0x1772	; 0x1772 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,7));
    2d14:	fe 01       	movw	r30, r28
    2d16:	ed 59       	subi	r30, 0x9D	; 157
    2d18:	ff 4f       	sbci	r31, 0xFF	; 255
    2d1a:	80 81       	ld	r24, Z
    2d1c:	98 2f       	mov	r25, r24
    2d1e:	99 1f       	adc	r25, r25
    2d20:	99 27       	eor	r25, r25
    2d22:	99 1f       	adc	r25, r25
    2d24:	81 e0       	ldi	r24, 0x01	; 1
    2d26:	66 e0       	ldi	r22, 0x06	; 6
    2d28:	49 2f       	mov	r20, r25
    2d2a:	0e 94 b9 0b 	call	0x1772	; 0x1772 <GPIO_writePin>
    2d2e:	fe 01       	movw	r30, r28
    2d30:	ed 5b       	subi	r30, 0xBD	; 189
    2d32:	ff 4f       	sbci	r31, 0xFF	; 255
    2d34:	80 e0       	ldi	r24, 0x00	; 0
    2d36:	90 e0       	ldi	r25, 0x00	; 0
    2d38:	a0 e8       	ldi	r26, 0x80	; 128
    2d3a:	bf e3       	ldi	r27, 0x3F	; 63
    2d3c:	80 83       	st	Z, r24
    2d3e:	91 83       	std	Z+1, r25	; 0x01
    2d40:	a2 83       	std	Z+2, r26	; 0x02
    2d42:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d44:	8e 01       	movw	r16, r28
    2d46:	01 5c       	subi	r16, 0xC1	; 193
    2d48:	1f 4f       	sbci	r17, 0xFF	; 255
    2d4a:	fe 01       	movw	r30, r28
    2d4c:	ed 5b       	subi	r30, 0xBD	; 189
    2d4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d50:	60 81       	ld	r22, Z
    2d52:	71 81       	ldd	r23, Z+1	; 0x01
    2d54:	82 81       	ldd	r24, Z+2	; 0x02
    2d56:	93 81       	ldd	r25, Z+3	; 0x03
    2d58:	20 e0       	ldi	r18, 0x00	; 0
    2d5a:	30 e0       	ldi	r19, 0x00	; 0
    2d5c:	4a ef       	ldi	r20, 0xFA	; 250
    2d5e:	54 e4       	ldi	r21, 0x44	; 68
    2d60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d64:	dc 01       	movw	r26, r24
    2d66:	cb 01       	movw	r24, r22
    2d68:	f8 01       	movw	r30, r16
    2d6a:	80 83       	st	Z, r24
    2d6c:	91 83       	std	Z+1, r25	; 0x01
    2d6e:	a2 83       	std	Z+2, r26	; 0x02
    2d70:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2d72:	fe 01       	movw	r30, r28
    2d74:	ff 96       	adiw	r30, 0x3f	; 63
    2d76:	60 81       	ld	r22, Z
    2d78:	71 81       	ldd	r23, Z+1	; 0x01
    2d7a:	82 81       	ldd	r24, Z+2	; 0x02
    2d7c:	93 81       	ldd	r25, Z+3	; 0x03
    2d7e:	20 e0       	ldi	r18, 0x00	; 0
    2d80:	30 e0       	ldi	r19, 0x00	; 0
    2d82:	40 e8       	ldi	r20, 0x80	; 128
    2d84:	5f e3       	ldi	r21, 0x3F	; 63
    2d86:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d8a:	88 23       	and	r24, r24
    2d8c:	2c f4       	brge	.+10     	; 0x2d98 <LCD_displayCharacter+0x40e>
		__ticks = 1;
    2d8e:	81 e0       	ldi	r24, 0x01	; 1
    2d90:	90 e0       	ldi	r25, 0x00	; 0
    2d92:	9e af       	std	Y+62, r25	; 0x3e
    2d94:	8d af       	std	Y+61, r24	; 0x3d
    2d96:	46 c0       	rjmp	.+140    	; 0x2e24 <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    2d98:	fe 01       	movw	r30, r28
    2d9a:	ff 96       	adiw	r30, 0x3f	; 63
    2d9c:	60 81       	ld	r22, Z
    2d9e:	71 81       	ldd	r23, Z+1	; 0x01
    2da0:	82 81       	ldd	r24, Z+2	; 0x02
    2da2:	93 81       	ldd	r25, Z+3	; 0x03
    2da4:	20 e0       	ldi	r18, 0x00	; 0
    2da6:	3f ef       	ldi	r19, 0xFF	; 255
    2da8:	4f e7       	ldi	r20, 0x7F	; 127
    2daa:	57 e4       	ldi	r21, 0x47	; 71
    2dac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2db0:	18 16       	cp	r1, r24
    2db2:	64 f5       	brge	.+88     	; 0x2e0c <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2db4:	fe 01       	movw	r30, r28
    2db6:	ed 5b       	subi	r30, 0xBD	; 189
    2db8:	ff 4f       	sbci	r31, 0xFF	; 255
    2dba:	60 81       	ld	r22, Z
    2dbc:	71 81       	ldd	r23, Z+1	; 0x01
    2dbe:	82 81       	ldd	r24, Z+2	; 0x02
    2dc0:	93 81       	ldd	r25, Z+3	; 0x03
    2dc2:	20 e0       	ldi	r18, 0x00	; 0
    2dc4:	30 e0       	ldi	r19, 0x00	; 0
    2dc6:	40 e2       	ldi	r20, 0x20	; 32
    2dc8:	51 e4       	ldi	r21, 0x41	; 65
    2dca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dce:	dc 01       	movw	r26, r24
    2dd0:	cb 01       	movw	r24, r22
    2dd2:	bc 01       	movw	r22, r24
    2dd4:	cd 01       	movw	r24, r26
    2dd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dda:	dc 01       	movw	r26, r24
    2ddc:	cb 01       	movw	r24, r22
    2dde:	9e af       	std	Y+62, r25	; 0x3e
    2de0:	8d af       	std	Y+61, r24	; 0x3d
    2de2:	0f c0       	rjmp	.+30     	; 0x2e02 <LCD_displayCharacter+0x478>
    2de4:	88 ec       	ldi	r24, 0xC8	; 200
    2de6:	90 e0       	ldi	r25, 0x00	; 0
    2de8:	9c af       	std	Y+60, r25	; 0x3c
    2dea:	8b af       	std	Y+59, r24	; 0x3b
    2dec:	8b ad       	ldd	r24, Y+59	; 0x3b
    2dee:	9c ad       	ldd	r25, Y+60	; 0x3c
    2df0:	01 97       	sbiw	r24, 0x01	; 1
    2df2:	f1 f7       	brne	.-4      	; 0x2df0 <LCD_displayCharacter+0x466>
    2df4:	9c af       	std	Y+60, r25	; 0x3c
    2df6:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2df8:	8d ad       	ldd	r24, Y+61	; 0x3d
    2dfa:	9e ad       	ldd	r25, Y+62	; 0x3e
    2dfc:	01 97       	sbiw	r24, 0x01	; 1
    2dfe:	9e af       	std	Y+62, r25	; 0x3e
    2e00:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e02:	8d ad       	ldd	r24, Y+61	; 0x3d
    2e04:	9e ad       	ldd	r25, Y+62	; 0x3e
    2e06:	00 97       	sbiw	r24, 0x00	; 0
    2e08:	69 f7       	brne	.-38     	; 0x2de4 <LCD_displayCharacter+0x45a>
    2e0a:	16 c0       	rjmp	.+44     	; 0x2e38 <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e0c:	fe 01       	movw	r30, r28
    2e0e:	ff 96       	adiw	r30, 0x3f	; 63
    2e10:	60 81       	ld	r22, Z
    2e12:	71 81       	ldd	r23, Z+1	; 0x01
    2e14:	82 81       	ldd	r24, Z+2	; 0x02
    2e16:	93 81       	ldd	r25, Z+3	; 0x03
    2e18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e1c:	dc 01       	movw	r26, r24
    2e1e:	cb 01       	movw	r24, r22
    2e20:	9e af       	std	Y+62, r25	; 0x3e
    2e22:	8d af       	std	Y+61, r24	; 0x3d
    2e24:	8d ad       	ldd	r24, Y+61	; 0x3d
    2e26:	9e ad       	ldd	r25, Y+62	; 0x3e
    2e28:	9a af       	std	Y+58, r25	; 0x3a
    2e2a:	89 af       	std	Y+57, r24	; 0x39
    2e2c:	89 ad       	ldd	r24, Y+57	; 0x39
    2e2e:	9a ad       	ldd	r25, Y+58	; 0x3a
    2e30:	01 97       	sbiw	r24, 0x01	; 1
    2e32:	f1 f7       	brne	.-4      	; 0x2e30 <LCD_displayCharacter+0x4a6>
    2e34:	9a af       	std	Y+58, r25	; 0x3a
    2e36:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2e38:	81 e0       	ldi	r24, 0x01	; 1
    2e3a:	61 e0       	ldi	r22, 0x01	; 1
    2e3c:	40 e0       	ldi	r20, 0x00	; 0
    2e3e:	0e 94 b9 0b 	call	0x1772	; 0x1772 <GPIO_writePin>
    2e42:	80 e0       	ldi	r24, 0x00	; 0
    2e44:	90 e0       	ldi	r25, 0x00	; 0
    2e46:	a0 e8       	ldi	r26, 0x80	; 128
    2e48:	bf e3       	ldi	r27, 0x3F	; 63
    2e4a:	8d ab       	std	Y+53, r24	; 0x35
    2e4c:	9e ab       	std	Y+54, r25	; 0x36
    2e4e:	af ab       	std	Y+55, r26	; 0x37
    2e50:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e52:	6d a9       	ldd	r22, Y+53	; 0x35
    2e54:	7e a9       	ldd	r23, Y+54	; 0x36
    2e56:	8f a9       	ldd	r24, Y+55	; 0x37
    2e58:	98 ad       	ldd	r25, Y+56	; 0x38
    2e5a:	20 e0       	ldi	r18, 0x00	; 0
    2e5c:	30 e0       	ldi	r19, 0x00	; 0
    2e5e:	4a ef       	ldi	r20, 0xFA	; 250
    2e60:	54 e4       	ldi	r21, 0x44	; 68
    2e62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e66:	dc 01       	movw	r26, r24
    2e68:	cb 01       	movw	r24, r22
    2e6a:	89 ab       	std	Y+49, r24	; 0x31
    2e6c:	9a ab       	std	Y+50, r25	; 0x32
    2e6e:	ab ab       	std	Y+51, r26	; 0x33
    2e70:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2e72:	69 a9       	ldd	r22, Y+49	; 0x31
    2e74:	7a a9       	ldd	r23, Y+50	; 0x32
    2e76:	8b a9       	ldd	r24, Y+51	; 0x33
    2e78:	9c a9       	ldd	r25, Y+52	; 0x34
    2e7a:	20 e0       	ldi	r18, 0x00	; 0
    2e7c:	30 e0       	ldi	r19, 0x00	; 0
    2e7e:	40 e8       	ldi	r20, 0x80	; 128
    2e80:	5f e3       	ldi	r21, 0x3F	; 63
    2e82:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e86:	88 23       	and	r24, r24
    2e88:	2c f4       	brge	.+10     	; 0x2e94 <LCD_displayCharacter+0x50a>
		__ticks = 1;
    2e8a:	81 e0       	ldi	r24, 0x01	; 1
    2e8c:	90 e0       	ldi	r25, 0x00	; 0
    2e8e:	98 ab       	std	Y+48, r25	; 0x30
    2e90:	8f a7       	std	Y+47, r24	; 0x2f
    2e92:	3f c0       	rjmp	.+126    	; 0x2f12 <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    2e94:	69 a9       	ldd	r22, Y+49	; 0x31
    2e96:	7a a9       	ldd	r23, Y+50	; 0x32
    2e98:	8b a9       	ldd	r24, Y+51	; 0x33
    2e9a:	9c a9       	ldd	r25, Y+52	; 0x34
    2e9c:	20 e0       	ldi	r18, 0x00	; 0
    2e9e:	3f ef       	ldi	r19, 0xFF	; 255
    2ea0:	4f e7       	ldi	r20, 0x7F	; 127
    2ea2:	57 e4       	ldi	r21, 0x47	; 71
    2ea4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ea8:	18 16       	cp	r1, r24
    2eaa:	4c f5       	brge	.+82     	; 0x2efe <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2eac:	6d a9       	ldd	r22, Y+53	; 0x35
    2eae:	7e a9       	ldd	r23, Y+54	; 0x36
    2eb0:	8f a9       	ldd	r24, Y+55	; 0x37
    2eb2:	98 ad       	ldd	r25, Y+56	; 0x38
    2eb4:	20 e0       	ldi	r18, 0x00	; 0
    2eb6:	30 e0       	ldi	r19, 0x00	; 0
    2eb8:	40 e2       	ldi	r20, 0x20	; 32
    2eba:	51 e4       	ldi	r21, 0x41	; 65
    2ebc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ec0:	dc 01       	movw	r26, r24
    2ec2:	cb 01       	movw	r24, r22
    2ec4:	bc 01       	movw	r22, r24
    2ec6:	cd 01       	movw	r24, r26
    2ec8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ecc:	dc 01       	movw	r26, r24
    2ece:	cb 01       	movw	r24, r22
    2ed0:	98 ab       	std	Y+48, r25	; 0x30
    2ed2:	8f a7       	std	Y+47, r24	; 0x2f
    2ed4:	0f c0       	rjmp	.+30     	; 0x2ef4 <LCD_displayCharacter+0x56a>
    2ed6:	88 ec       	ldi	r24, 0xC8	; 200
    2ed8:	90 e0       	ldi	r25, 0x00	; 0
    2eda:	9e a7       	std	Y+46, r25	; 0x2e
    2edc:	8d a7       	std	Y+45, r24	; 0x2d
    2ede:	8d a5       	ldd	r24, Y+45	; 0x2d
    2ee0:	9e a5       	ldd	r25, Y+46	; 0x2e
    2ee2:	01 97       	sbiw	r24, 0x01	; 1
    2ee4:	f1 f7       	brne	.-4      	; 0x2ee2 <LCD_displayCharacter+0x558>
    2ee6:	9e a7       	std	Y+46, r25	; 0x2e
    2ee8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2eea:	8f a5       	ldd	r24, Y+47	; 0x2f
    2eec:	98 a9       	ldd	r25, Y+48	; 0x30
    2eee:	01 97       	sbiw	r24, 0x01	; 1
    2ef0:	98 ab       	std	Y+48, r25	; 0x30
    2ef2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ef4:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ef6:	98 a9       	ldd	r25, Y+48	; 0x30
    2ef8:	00 97       	sbiw	r24, 0x00	; 0
    2efa:	69 f7       	brne	.-38     	; 0x2ed6 <LCD_displayCharacter+0x54c>
    2efc:	14 c0       	rjmp	.+40     	; 0x2f26 <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2efe:	69 a9       	ldd	r22, Y+49	; 0x31
    2f00:	7a a9       	ldd	r23, Y+50	; 0x32
    2f02:	8b a9       	ldd	r24, Y+51	; 0x33
    2f04:	9c a9       	ldd	r25, Y+52	; 0x34
    2f06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f0a:	dc 01       	movw	r26, r24
    2f0c:	cb 01       	movw	r24, r22
    2f0e:	98 ab       	std	Y+48, r25	; 0x30
    2f10:	8f a7       	std	Y+47, r24	; 0x2f
    2f12:	8f a5       	ldd	r24, Y+47	; 0x2f
    2f14:	98 a9       	ldd	r25, Y+48	; 0x30
    2f16:	9c a7       	std	Y+44, r25	; 0x2c
    2f18:	8b a7       	std	Y+43, r24	; 0x2b
    2f1a:	8b a5       	ldd	r24, Y+43	; 0x2b
    2f1c:	9c a5       	ldd	r25, Y+44	; 0x2c
    2f1e:	01 97       	sbiw	r24, 0x01	; 1
    2f20:	f1 f7       	brne	.-4      	; 0x2f1e <LCD_displayCharacter+0x594>
    2f22:	9c a7       	std	Y+44, r25	; 0x2c
    2f24:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2f26:	81 e0       	ldi	r24, 0x01	; 1
    2f28:	61 e0       	ldi	r22, 0x01	; 1
    2f2a:	41 e0       	ldi	r20, 0x01	; 1
    2f2c:	0e 94 b9 0b 	call	0x1772	; 0x1772 <GPIO_writePin>
    2f30:	80 e0       	ldi	r24, 0x00	; 0
    2f32:	90 e0       	ldi	r25, 0x00	; 0
    2f34:	a0 e8       	ldi	r26, 0x80	; 128
    2f36:	bf e3       	ldi	r27, 0x3F	; 63
    2f38:	8f a3       	std	Y+39, r24	; 0x27
    2f3a:	98 a7       	std	Y+40, r25	; 0x28
    2f3c:	a9 a7       	std	Y+41, r26	; 0x29
    2f3e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f40:	6f a1       	ldd	r22, Y+39	; 0x27
    2f42:	78 a5       	ldd	r23, Y+40	; 0x28
    2f44:	89 a5       	ldd	r24, Y+41	; 0x29
    2f46:	9a a5       	ldd	r25, Y+42	; 0x2a
    2f48:	20 e0       	ldi	r18, 0x00	; 0
    2f4a:	30 e0       	ldi	r19, 0x00	; 0
    2f4c:	4a ef       	ldi	r20, 0xFA	; 250
    2f4e:	54 e4       	ldi	r21, 0x44	; 68
    2f50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f54:	dc 01       	movw	r26, r24
    2f56:	cb 01       	movw	r24, r22
    2f58:	8b a3       	std	Y+35, r24	; 0x23
    2f5a:	9c a3       	std	Y+36, r25	; 0x24
    2f5c:	ad a3       	std	Y+37, r26	; 0x25
    2f5e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2f60:	6b a1       	ldd	r22, Y+35	; 0x23
    2f62:	7c a1       	ldd	r23, Y+36	; 0x24
    2f64:	8d a1       	ldd	r24, Y+37	; 0x25
    2f66:	9e a1       	ldd	r25, Y+38	; 0x26
    2f68:	20 e0       	ldi	r18, 0x00	; 0
    2f6a:	30 e0       	ldi	r19, 0x00	; 0
    2f6c:	40 e8       	ldi	r20, 0x80	; 128
    2f6e:	5f e3       	ldi	r21, 0x3F	; 63
    2f70:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f74:	88 23       	and	r24, r24
    2f76:	2c f4       	brge	.+10     	; 0x2f82 <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    2f78:	81 e0       	ldi	r24, 0x01	; 1
    2f7a:	90 e0       	ldi	r25, 0x00	; 0
    2f7c:	9a a3       	std	Y+34, r25	; 0x22
    2f7e:	89 a3       	std	Y+33, r24	; 0x21
    2f80:	3f c0       	rjmp	.+126    	; 0x3000 <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    2f82:	6b a1       	ldd	r22, Y+35	; 0x23
    2f84:	7c a1       	ldd	r23, Y+36	; 0x24
    2f86:	8d a1       	ldd	r24, Y+37	; 0x25
    2f88:	9e a1       	ldd	r25, Y+38	; 0x26
    2f8a:	20 e0       	ldi	r18, 0x00	; 0
    2f8c:	3f ef       	ldi	r19, 0xFF	; 255
    2f8e:	4f e7       	ldi	r20, 0x7F	; 127
    2f90:	57 e4       	ldi	r21, 0x47	; 71
    2f92:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f96:	18 16       	cp	r1, r24
    2f98:	4c f5       	brge	.+82     	; 0x2fec <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f9a:	6f a1       	ldd	r22, Y+39	; 0x27
    2f9c:	78 a5       	ldd	r23, Y+40	; 0x28
    2f9e:	89 a5       	ldd	r24, Y+41	; 0x29
    2fa0:	9a a5       	ldd	r25, Y+42	; 0x2a
    2fa2:	20 e0       	ldi	r18, 0x00	; 0
    2fa4:	30 e0       	ldi	r19, 0x00	; 0
    2fa6:	40 e2       	ldi	r20, 0x20	; 32
    2fa8:	51 e4       	ldi	r21, 0x41	; 65
    2faa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fae:	dc 01       	movw	r26, r24
    2fb0:	cb 01       	movw	r24, r22
    2fb2:	bc 01       	movw	r22, r24
    2fb4:	cd 01       	movw	r24, r26
    2fb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fba:	dc 01       	movw	r26, r24
    2fbc:	cb 01       	movw	r24, r22
    2fbe:	9a a3       	std	Y+34, r25	; 0x22
    2fc0:	89 a3       	std	Y+33, r24	; 0x21
    2fc2:	0f c0       	rjmp	.+30     	; 0x2fe2 <LCD_displayCharacter+0x658>
    2fc4:	88 ec       	ldi	r24, 0xC8	; 200
    2fc6:	90 e0       	ldi	r25, 0x00	; 0
    2fc8:	98 a3       	std	Y+32, r25	; 0x20
    2fca:	8f 8f       	std	Y+31, r24	; 0x1f
    2fcc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2fce:	98 a1       	ldd	r25, Y+32	; 0x20
    2fd0:	01 97       	sbiw	r24, 0x01	; 1
    2fd2:	f1 f7       	brne	.-4      	; 0x2fd0 <LCD_displayCharacter+0x646>
    2fd4:	98 a3       	std	Y+32, r25	; 0x20
    2fd6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fd8:	89 a1       	ldd	r24, Y+33	; 0x21
    2fda:	9a a1       	ldd	r25, Y+34	; 0x22
    2fdc:	01 97       	sbiw	r24, 0x01	; 1
    2fde:	9a a3       	std	Y+34, r25	; 0x22
    2fe0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fe2:	89 a1       	ldd	r24, Y+33	; 0x21
    2fe4:	9a a1       	ldd	r25, Y+34	; 0x22
    2fe6:	00 97       	sbiw	r24, 0x00	; 0
    2fe8:	69 f7       	brne	.-38     	; 0x2fc4 <LCD_displayCharacter+0x63a>
    2fea:	14 c0       	rjmp	.+40     	; 0x3014 <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fec:	6b a1       	ldd	r22, Y+35	; 0x23
    2fee:	7c a1       	ldd	r23, Y+36	; 0x24
    2ff0:	8d a1       	ldd	r24, Y+37	; 0x25
    2ff2:	9e a1       	ldd	r25, Y+38	; 0x26
    2ff4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ff8:	dc 01       	movw	r26, r24
    2ffa:	cb 01       	movw	r24, r22
    2ffc:	9a a3       	std	Y+34, r25	; 0x22
    2ffe:	89 a3       	std	Y+33, r24	; 0x21
    3000:	89 a1       	ldd	r24, Y+33	; 0x21
    3002:	9a a1       	ldd	r25, Y+34	; 0x22
    3004:	9e 8f       	std	Y+30, r25	; 0x1e
    3006:	8d 8f       	std	Y+29, r24	; 0x1d
    3008:	8d 8d       	ldd	r24, Y+29	; 0x1d
    300a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    300c:	01 97       	sbiw	r24, 0x01	; 1
    300e:	f1 f7       	brne	.-4      	; 0x300c <LCD_displayCharacter+0x682>
    3010:	9e 8f       	std	Y+30, r25	; 0x1e
    3012:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,0));
    3014:	fe 01       	movw	r30, r28
    3016:	ed 59       	subi	r30, 0x9D	; 157
    3018:	ff 4f       	sbci	r31, 0xFF	; 255
    301a:	80 81       	ld	r24, Z
    301c:	98 2f       	mov	r25, r24
    301e:	91 70       	andi	r25, 0x01	; 1
    3020:	81 e0       	ldi	r24, 0x01	; 1
    3022:	63 e0       	ldi	r22, 0x03	; 3
    3024:	49 2f       	mov	r20, r25
    3026:	0e 94 b9 0b 	call	0x1772	; 0x1772 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,1));
    302a:	fe 01       	movw	r30, r28
    302c:	ed 59       	subi	r30, 0x9D	; 157
    302e:	ff 4f       	sbci	r31, 0xFF	; 255
    3030:	80 81       	ld	r24, Z
    3032:	88 2f       	mov	r24, r24
    3034:	90 e0       	ldi	r25, 0x00	; 0
    3036:	82 70       	andi	r24, 0x02	; 2
    3038:	90 70       	andi	r25, 0x00	; 0
    303a:	95 95       	asr	r25
    303c:	87 95       	ror	r24
    303e:	98 2f       	mov	r25, r24
    3040:	81 e0       	ldi	r24, 0x01	; 1
    3042:	64 e0       	ldi	r22, 0x04	; 4
    3044:	49 2f       	mov	r20, r25
    3046:	0e 94 b9 0b 	call	0x1772	; 0x1772 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,2));
    304a:	fe 01       	movw	r30, r28
    304c:	ed 59       	subi	r30, 0x9D	; 157
    304e:	ff 4f       	sbci	r31, 0xFF	; 255
    3050:	80 81       	ld	r24, Z
    3052:	88 2f       	mov	r24, r24
    3054:	90 e0       	ldi	r25, 0x00	; 0
    3056:	84 70       	andi	r24, 0x04	; 4
    3058:	90 70       	andi	r25, 0x00	; 0
    305a:	95 95       	asr	r25
    305c:	87 95       	ror	r24
    305e:	95 95       	asr	r25
    3060:	87 95       	ror	r24
    3062:	98 2f       	mov	r25, r24
    3064:	81 e0       	ldi	r24, 0x01	; 1
    3066:	65 e0       	ldi	r22, 0x05	; 5
    3068:	49 2f       	mov	r20, r25
    306a:	0e 94 b9 0b 	call	0x1772	; 0x1772 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,3));
    306e:	fe 01       	movw	r30, r28
    3070:	ed 59       	subi	r30, 0x9D	; 157
    3072:	ff 4f       	sbci	r31, 0xFF	; 255
    3074:	80 81       	ld	r24, Z
    3076:	88 2f       	mov	r24, r24
    3078:	90 e0       	ldi	r25, 0x00	; 0
    307a:	88 70       	andi	r24, 0x08	; 8
    307c:	90 70       	andi	r25, 0x00	; 0
    307e:	95 95       	asr	r25
    3080:	87 95       	ror	r24
    3082:	95 95       	asr	r25
    3084:	87 95       	ror	r24
    3086:	95 95       	asr	r25
    3088:	87 95       	ror	r24
    308a:	98 2f       	mov	r25, r24
    308c:	81 e0       	ldi	r24, 0x01	; 1
    308e:	66 e0       	ldi	r22, 0x06	; 6
    3090:	49 2f       	mov	r20, r25
    3092:	0e 94 b9 0b 	call	0x1772	; 0x1772 <GPIO_writePin>
    3096:	80 e0       	ldi	r24, 0x00	; 0
    3098:	90 e0       	ldi	r25, 0x00	; 0
    309a:	a0 e8       	ldi	r26, 0x80	; 128
    309c:	bf e3       	ldi	r27, 0x3F	; 63
    309e:	89 8f       	std	Y+25, r24	; 0x19
    30a0:	9a 8f       	std	Y+26, r25	; 0x1a
    30a2:	ab 8f       	std	Y+27, r26	; 0x1b
    30a4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30a6:	69 8d       	ldd	r22, Y+25	; 0x19
    30a8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    30aa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    30ac:	9c 8d       	ldd	r25, Y+28	; 0x1c
    30ae:	20 e0       	ldi	r18, 0x00	; 0
    30b0:	30 e0       	ldi	r19, 0x00	; 0
    30b2:	4a ef       	ldi	r20, 0xFA	; 250
    30b4:	54 e4       	ldi	r21, 0x44	; 68
    30b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30ba:	dc 01       	movw	r26, r24
    30bc:	cb 01       	movw	r24, r22
    30be:	8d 8b       	std	Y+21, r24	; 0x15
    30c0:	9e 8b       	std	Y+22, r25	; 0x16
    30c2:	af 8b       	std	Y+23, r26	; 0x17
    30c4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    30c6:	6d 89       	ldd	r22, Y+21	; 0x15
    30c8:	7e 89       	ldd	r23, Y+22	; 0x16
    30ca:	8f 89       	ldd	r24, Y+23	; 0x17
    30cc:	98 8d       	ldd	r25, Y+24	; 0x18
    30ce:	20 e0       	ldi	r18, 0x00	; 0
    30d0:	30 e0       	ldi	r19, 0x00	; 0
    30d2:	40 e8       	ldi	r20, 0x80	; 128
    30d4:	5f e3       	ldi	r21, 0x3F	; 63
    30d6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    30da:	88 23       	and	r24, r24
    30dc:	2c f4       	brge	.+10     	; 0x30e8 <LCD_displayCharacter+0x75e>
		__ticks = 1;
    30de:	81 e0       	ldi	r24, 0x01	; 1
    30e0:	90 e0       	ldi	r25, 0x00	; 0
    30e2:	9c 8b       	std	Y+20, r25	; 0x14
    30e4:	8b 8b       	std	Y+19, r24	; 0x13
    30e6:	3f c0       	rjmp	.+126    	; 0x3166 <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    30e8:	6d 89       	ldd	r22, Y+21	; 0x15
    30ea:	7e 89       	ldd	r23, Y+22	; 0x16
    30ec:	8f 89       	ldd	r24, Y+23	; 0x17
    30ee:	98 8d       	ldd	r25, Y+24	; 0x18
    30f0:	20 e0       	ldi	r18, 0x00	; 0
    30f2:	3f ef       	ldi	r19, 0xFF	; 255
    30f4:	4f e7       	ldi	r20, 0x7F	; 127
    30f6:	57 e4       	ldi	r21, 0x47	; 71
    30f8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    30fc:	18 16       	cp	r1, r24
    30fe:	4c f5       	brge	.+82     	; 0x3152 <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3100:	69 8d       	ldd	r22, Y+25	; 0x19
    3102:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3104:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3106:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3108:	20 e0       	ldi	r18, 0x00	; 0
    310a:	30 e0       	ldi	r19, 0x00	; 0
    310c:	40 e2       	ldi	r20, 0x20	; 32
    310e:	51 e4       	ldi	r21, 0x41	; 65
    3110:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3114:	dc 01       	movw	r26, r24
    3116:	cb 01       	movw	r24, r22
    3118:	bc 01       	movw	r22, r24
    311a:	cd 01       	movw	r24, r26
    311c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3120:	dc 01       	movw	r26, r24
    3122:	cb 01       	movw	r24, r22
    3124:	9c 8b       	std	Y+20, r25	; 0x14
    3126:	8b 8b       	std	Y+19, r24	; 0x13
    3128:	0f c0       	rjmp	.+30     	; 0x3148 <LCD_displayCharacter+0x7be>
    312a:	88 ec       	ldi	r24, 0xC8	; 200
    312c:	90 e0       	ldi	r25, 0x00	; 0
    312e:	9a 8b       	std	Y+18, r25	; 0x12
    3130:	89 8b       	std	Y+17, r24	; 0x11
    3132:	89 89       	ldd	r24, Y+17	; 0x11
    3134:	9a 89       	ldd	r25, Y+18	; 0x12
    3136:	01 97       	sbiw	r24, 0x01	; 1
    3138:	f1 f7       	brne	.-4      	; 0x3136 <LCD_displayCharacter+0x7ac>
    313a:	9a 8b       	std	Y+18, r25	; 0x12
    313c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    313e:	8b 89       	ldd	r24, Y+19	; 0x13
    3140:	9c 89       	ldd	r25, Y+20	; 0x14
    3142:	01 97       	sbiw	r24, 0x01	; 1
    3144:	9c 8b       	std	Y+20, r25	; 0x14
    3146:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3148:	8b 89       	ldd	r24, Y+19	; 0x13
    314a:	9c 89       	ldd	r25, Y+20	; 0x14
    314c:	00 97       	sbiw	r24, 0x00	; 0
    314e:	69 f7       	brne	.-38     	; 0x312a <LCD_displayCharacter+0x7a0>
    3150:	14 c0       	rjmp	.+40     	; 0x317a <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3152:	6d 89       	ldd	r22, Y+21	; 0x15
    3154:	7e 89       	ldd	r23, Y+22	; 0x16
    3156:	8f 89       	ldd	r24, Y+23	; 0x17
    3158:	98 8d       	ldd	r25, Y+24	; 0x18
    315a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    315e:	dc 01       	movw	r26, r24
    3160:	cb 01       	movw	r24, r22
    3162:	9c 8b       	std	Y+20, r25	; 0x14
    3164:	8b 8b       	std	Y+19, r24	; 0x13
    3166:	8b 89       	ldd	r24, Y+19	; 0x13
    3168:	9c 89       	ldd	r25, Y+20	; 0x14
    316a:	98 8b       	std	Y+16, r25	; 0x10
    316c:	8f 87       	std	Y+15, r24	; 0x0f
    316e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3170:	98 89       	ldd	r25, Y+16	; 0x10
    3172:	01 97       	sbiw	r24, 0x01	; 1
    3174:	f1 f7       	brne	.-4      	; 0x3172 <LCD_displayCharacter+0x7e8>
    3176:	98 8b       	std	Y+16, r25	; 0x10
    3178:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    317a:	81 e0       	ldi	r24, 0x01	; 1
    317c:	61 e0       	ldi	r22, 0x01	; 1
    317e:	40 e0       	ldi	r20, 0x00	; 0
    3180:	0e 94 b9 0b 	call	0x1772	; 0x1772 <GPIO_writePin>
    3184:	80 e0       	ldi	r24, 0x00	; 0
    3186:	90 e0       	ldi	r25, 0x00	; 0
    3188:	a0 e8       	ldi	r26, 0x80	; 128
    318a:	bf e3       	ldi	r27, 0x3F	; 63
    318c:	8b 87       	std	Y+11, r24	; 0x0b
    318e:	9c 87       	std	Y+12, r25	; 0x0c
    3190:	ad 87       	std	Y+13, r26	; 0x0d
    3192:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3194:	6b 85       	ldd	r22, Y+11	; 0x0b
    3196:	7c 85       	ldd	r23, Y+12	; 0x0c
    3198:	8d 85       	ldd	r24, Y+13	; 0x0d
    319a:	9e 85       	ldd	r25, Y+14	; 0x0e
    319c:	20 e0       	ldi	r18, 0x00	; 0
    319e:	30 e0       	ldi	r19, 0x00	; 0
    31a0:	4a ef       	ldi	r20, 0xFA	; 250
    31a2:	54 e4       	ldi	r21, 0x44	; 68
    31a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31a8:	dc 01       	movw	r26, r24
    31aa:	cb 01       	movw	r24, r22
    31ac:	8f 83       	std	Y+7, r24	; 0x07
    31ae:	98 87       	std	Y+8, r25	; 0x08
    31b0:	a9 87       	std	Y+9, r26	; 0x09
    31b2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    31b4:	6f 81       	ldd	r22, Y+7	; 0x07
    31b6:	78 85       	ldd	r23, Y+8	; 0x08
    31b8:	89 85       	ldd	r24, Y+9	; 0x09
    31ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    31bc:	20 e0       	ldi	r18, 0x00	; 0
    31be:	30 e0       	ldi	r19, 0x00	; 0
    31c0:	40 e8       	ldi	r20, 0x80	; 128
    31c2:	5f e3       	ldi	r21, 0x3F	; 63
    31c4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    31c8:	88 23       	and	r24, r24
    31ca:	2c f4       	brge	.+10     	; 0x31d6 <LCD_displayCharacter+0x84c>
		__ticks = 1;
    31cc:	81 e0       	ldi	r24, 0x01	; 1
    31ce:	90 e0       	ldi	r25, 0x00	; 0
    31d0:	9e 83       	std	Y+6, r25	; 0x06
    31d2:	8d 83       	std	Y+5, r24	; 0x05
    31d4:	3f c0       	rjmp	.+126    	; 0x3254 <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    31d6:	6f 81       	ldd	r22, Y+7	; 0x07
    31d8:	78 85       	ldd	r23, Y+8	; 0x08
    31da:	89 85       	ldd	r24, Y+9	; 0x09
    31dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    31de:	20 e0       	ldi	r18, 0x00	; 0
    31e0:	3f ef       	ldi	r19, 0xFF	; 255
    31e2:	4f e7       	ldi	r20, 0x7F	; 127
    31e4:	57 e4       	ldi	r21, 0x47	; 71
    31e6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    31ea:	18 16       	cp	r1, r24
    31ec:	4c f5       	brge	.+82     	; 0x3240 <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    31f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    31f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    31f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    31f6:	20 e0       	ldi	r18, 0x00	; 0
    31f8:	30 e0       	ldi	r19, 0x00	; 0
    31fa:	40 e2       	ldi	r20, 0x20	; 32
    31fc:	51 e4       	ldi	r21, 0x41	; 65
    31fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3202:	dc 01       	movw	r26, r24
    3204:	cb 01       	movw	r24, r22
    3206:	bc 01       	movw	r22, r24
    3208:	cd 01       	movw	r24, r26
    320a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    320e:	dc 01       	movw	r26, r24
    3210:	cb 01       	movw	r24, r22
    3212:	9e 83       	std	Y+6, r25	; 0x06
    3214:	8d 83       	std	Y+5, r24	; 0x05
    3216:	0f c0       	rjmp	.+30     	; 0x3236 <LCD_displayCharacter+0x8ac>
    3218:	88 ec       	ldi	r24, 0xC8	; 200
    321a:	90 e0       	ldi	r25, 0x00	; 0
    321c:	9c 83       	std	Y+4, r25	; 0x04
    321e:	8b 83       	std	Y+3, r24	; 0x03
    3220:	8b 81       	ldd	r24, Y+3	; 0x03
    3222:	9c 81       	ldd	r25, Y+4	; 0x04
    3224:	01 97       	sbiw	r24, 0x01	; 1
    3226:	f1 f7       	brne	.-4      	; 0x3224 <LCD_displayCharacter+0x89a>
    3228:	9c 83       	std	Y+4, r25	; 0x04
    322a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    322c:	8d 81       	ldd	r24, Y+5	; 0x05
    322e:	9e 81       	ldd	r25, Y+6	; 0x06
    3230:	01 97       	sbiw	r24, 0x01	; 1
    3232:	9e 83       	std	Y+6, r25	; 0x06
    3234:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3236:	8d 81       	ldd	r24, Y+5	; 0x05
    3238:	9e 81       	ldd	r25, Y+6	; 0x06
    323a:	00 97       	sbiw	r24, 0x00	; 0
    323c:	69 f7       	brne	.-38     	; 0x3218 <LCD_displayCharacter+0x88e>
    323e:	14 c0       	rjmp	.+40     	; 0x3268 <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3240:	6f 81       	ldd	r22, Y+7	; 0x07
    3242:	78 85       	ldd	r23, Y+8	; 0x08
    3244:	89 85       	ldd	r24, Y+9	; 0x09
    3246:	9a 85       	ldd	r25, Y+10	; 0x0a
    3248:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    324c:	dc 01       	movw	r26, r24
    324e:	cb 01       	movw	r24, r22
    3250:	9e 83       	std	Y+6, r25	; 0x06
    3252:	8d 83       	std	Y+5, r24	; 0x05
    3254:	8d 81       	ldd	r24, Y+5	; 0x05
    3256:	9e 81       	ldd	r25, Y+6	; 0x06
    3258:	9a 83       	std	Y+2, r25	; 0x02
    325a:	89 83       	std	Y+1, r24	; 0x01
    325c:	89 81       	ldd	r24, Y+1	; 0x01
    325e:	9a 81       	ldd	r25, Y+2	; 0x02
    3260:	01 97       	sbiw	r24, 0x01	; 1
    3262:	f1 f7       	brne	.-4      	; 0x3260 <LCD_displayCharacter+0x8d6>
    3264:	9a 83       	std	Y+2, r25	; 0x02
    3266:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    3268:	cd 59       	subi	r28, 0x9D	; 157
    326a:	df 4f       	sbci	r29, 0xFF	; 255
    326c:	0f b6       	in	r0, 0x3f	; 63
    326e:	f8 94       	cli
    3270:	de bf       	out	0x3e, r29	; 62
    3272:	0f be       	out	0x3f, r0	; 63
    3274:	cd bf       	out	0x3d, r28	; 61
    3276:	cf 91       	pop	r28
    3278:	df 91       	pop	r29
    327a:	1f 91       	pop	r17
    327c:	0f 91       	pop	r16
    327e:	08 95       	ret

00003280 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    3280:	df 93       	push	r29
    3282:	cf 93       	push	r28
    3284:	00 d0       	rcall	.+0      	; 0x3286 <LCD_displayString+0x6>
    3286:	0f 92       	push	r0
    3288:	cd b7       	in	r28, 0x3d	; 61
    328a:	de b7       	in	r29, 0x3e	; 62
    328c:	9b 83       	std	Y+3, r25	; 0x03
    328e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3290:	19 82       	std	Y+1, r1	; 0x01
    3292:	0e c0       	rjmp	.+28     	; 0x32b0 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    3294:	89 81       	ldd	r24, Y+1	; 0x01
    3296:	28 2f       	mov	r18, r24
    3298:	30 e0       	ldi	r19, 0x00	; 0
    329a:	8a 81       	ldd	r24, Y+2	; 0x02
    329c:	9b 81       	ldd	r25, Y+3	; 0x03
    329e:	fc 01       	movw	r30, r24
    32a0:	e2 0f       	add	r30, r18
    32a2:	f3 1f       	adc	r31, r19
    32a4:	80 81       	ld	r24, Z
    32a6:	0e 94 c5 14 	call	0x298a	; 0x298a <LCD_displayCharacter>
		i++;
    32aa:	89 81       	ldd	r24, Y+1	; 0x01
    32ac:	8f 5f       	subi	r24, 0xFF	; 255
    32ae:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    32b0:	89 81       	ldd	r24, Y+1	; 0x01
    32b2:	28 2f       	mov	r18, r24
    32b4:	30 e0       	ldi	r19, 0x00	; 0
    32b6:	8a 81       	ldd	r24, Y+2	; 0x02
    32b8:	9b 81       	ldd	r25, Y+3	; 0x03
    32ba:	fc 01       	movw	r30, r24
    32bc:	e2 0f       	add	r30, r18
    32be:	f3 1f       	adc	r31, r19
    32c0:	80 81       	ld	r24, Z
    32c2:	88 23       	and	r24, r24
    32c4:	39 f7       	brne	.-50     	; 0x3294 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    32c6:	0f 90       	pop	r0
    32c8:	0f 90       	pop	r0
    32ca:	0f 90       	pop	r0
    32cc:	cf 91       	pop	r28
    32ce:	df 91       	pop	r29
    32d0:	08 95       	ret

000032d2 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    32d2:	df 93       	push	r29
    32d4:	cf 93       	push	r28
    32d6:	00 d0       	rcall	.+0      	; 0x32d8 <LCD_moveCursor+0x6>
    32d8:	00 d0       	rcall	.+0      	; 0x32da <LCD_moveCursor+0x8>
    32da:	0f 92       	push	r0
    32dc:	cd b7       	in	r28, 0x3d	; 61
    32de:	de b7       	in	r29, 0x3e	; 62
    32e0:	8a 83       	std	Y+2, r24	; 0x02
    32e2:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    32e4:	8a 81       	ldd	r24, Y+2	; 0x02
    32e6:	28 2f       	mov	r18, r24
    32e8:	30 e0       	ldi	r19, 0x00	; 0
    32ea:	3d 83       	std	Y+5, r19	; 0x05
    32ec:	2c 83       	std	Y+4, r18	; 0x04
    32ee:	8c 81       	ldd	r24, Y+4	; 0x04
    32f0:	9d 81       	ldd	r25, Y+5	; 0x05
    32f2:	81 30       	cpi	r24, 0x01	; 1
    32f4:	91 05       	cpc	r25, r1
    32f6:	c1 f0       	breq	.+48     	; 0x3328 <LCD_moveCursor+0x56>
    32f8:	2c 81       	ldd	r18, Y+4	; 0x04
    32fa:	3d 81       	ldd	r19, Y+5	; 0x05
    32fc:	22 30       	cpi	r18, 0x02	; 2
    32fe:	31 05       	cpc	r19, r1
    3300:	2c f4       	brge	.+10     	; 0x330c <LCD_moveCursor+0x3a>
    3302:	8c 81       	ldd	r24, Y+4	; 0x04
    3304:	9d 81       	ldd	r25, Y+5	; 0x05
    3306:	00 97       	sbiw	r24, 0x00	; 0
    3308:	61 f0       	breq	.+24     	; 0x3322 <LCD_moveCursor+0x50>
    330a:	19 c0       	rjmp	.+50     	; 0x333e <LCD_moveCursor+0x6c>
    330c:	2c 81       	ldd	r18, Y+4	; 0x04
    330e:	3d 81       	ldd	r19, Y+5	; 0x05
    3310:	22 30       	cpi	r18, 0x02	; 2
    3312:	31 05       	cpc	r19, r1
    3314:	69 f0       	breq	.+26     	; 0x3330 <LCD_moveCursor+0x5e>
    3316:	8c 81       	ldd	r24, Y+4	; 0x04
    3318:	9d 81       	ldd	r25, Y+5	; 0x05
    331a:	83 30       	cpi	r24, 0x03	; 3
    331c:	91 05       	cpc	r25, r1
    331e:	61 f0       	breq	.+24     	; 0x3338 <LCD_moveCursor+0x66>
    3320:	0e c0       	rjmp	.+28     	; 0x333e <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    3322:	8b 81       	ldd	r24, Y+3	; 0x03
    3324:	89 83       	std	Y+1, r24	; 0x01
    3326:	0b c0       	rjmp	.+22     	; 0x333e <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    3328:	8b 81       	ldd	r24, Y+3	; 0x03
    332a:	80 5c       	subi	r24, 0xC0	; 192
    332c:	89 83       	std	Y+1, r24	; 0x01
    332e:	07 c0       	rjmp	.+14     	; 0x333e <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    3330:	8b 81       	ldd	r24, Y+3	; 0x03
    3332:	80 5f       	subi	r24, 0xF0	; 240
    3334:	89 83       	std	Y+1, r24	; 0x01
    3336:	03 c0       	rjmp	.+6      	; 0x333e <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    3338:	8b 81       	ldd	r24, Y+3	; 0x03
    333a:	80 5b       	subi	r24, 0xB0	; 176
    333c:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    333e:	89 81       	ldd	r24, Y+1	; 0x01
    3340:	80 68       	ori	r24, 0x80	; 128
    3342:	0e 94 4a 10 	call	0x2094	; 0x2094 <LCD_sendCommand>
}
    3346:	0f 90       	pop	r0
    3348:	0f 90       	pop	r0
    334a:	0f 90       	pop	r0
    334c:	0f 90       	pop	r0
    334e:	0f 90       	pop	r0
    3350:	cf 91       	pop	r28
    3352:	df 91       	pop	r29
    3354:	08 95       	ret

00003356 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    3356:	df 93       	push	r29
    3358:	cf 93       	push	r28
    335a:	00 d0       	rcall	.+0      	; 0x335c <LCD_displayStringRowColumn+0x6>
    335c:	00 d0       	rcall	.+0      	; 0x335e <LCD_displayStringRowColumn+0x8>
    335e:	cd b7       	in	r28, 0x3d	; 61
    3360:	de b7       	in	r29, 0x3e	; 62
    3362:	89 83       	std	Y+1, r24	; 0x01
    3364:	6a 83       	std	Y+2, r22	; 0x02
    3366:	5c 83       	std	Y+4, r21	; 0x04
    3368:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    336a:	89 81       	ldd	r24, Y+1	; 0x01
    336c:	6a 81       	ldd	r22, Y+2	; 0x02
    336e:	0e 94 69 19 	call	0x32d2	; 0x32d2 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    3372:	8b 81       	ldd	r24, Y+3	; 0x03
    3374:	9c 81       	ldd	r25, Y+4	; 0x04
    3376:	0e 94 40 19 	call	0x3280	; 0x3280 <LCD_displayString>
}
    337a:	0f 90       	pop	r0
    337c:	0f 90       	pop	r0
    337e:	0f 90       	pop	r0
    3380:	0f 90       	pop	r0
    3382:	cf 91       	pop	r28
    3384:	df 91       	pop	r29
    3386:	08 95       	ret

00003388 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    3388:	df 93       	push	r29
    338a:	cf 93       	push	r28
    338c:	cd b7       	in	r28, 0x3d	; 61
    338e:	de b7       	in	r29, 0x3e	; 62
    3390:	62 97       	sbiw	r28, 0x12	; 18
    3392:	0f b6       	in	r0, 0x3f	; 63
    3394:	f8 94       	cli
    3396:	de bf       	out	0x3e, r29	; 62
    3398:	0f be       	out	0x3f, r0	; 63
    339a:	cd bf       	out	0x3d, r28	; 61
    339c:	9a 8b       	std	Y+18, r25	; 0x12
    339e:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    33a0:	89 89       	ldd	r24, Y+17	; 0x11
    33a2:	9a 89       	ldd	r25, Y+18	; 0x12
    33a4:	9e 01       	movw	r18, r28
    33a6:	2f 5f       	subi	r18, 0xFF	; 255
    33a8:	3f 4f       	sbci	r19, 0xFF	; 255
    33aa:	b9 01       	movw	r22, r18
    33ac:	4a e0       	ldi	r20, 0x0A	; 10
    33ae:	50 e0       	ldi	r21, 0x00	; 0
    33b0:	0e 94 3e 1c 	call	0x387c	; 0x387c <itoa>
   LCD_displayString(buff); /* Display the string */
    33b4:	ce 01       	movw	r24, r28
    33b6:	01 96       	adiw	r24, 0x01	; 1
    33b8:	0e 94 40 19 	call	0x3280	; 0x3280 <LCD_displayString>
}
    33bc:	62 96       	adiw	r28, 0x12	; 18
    33be:	0f b6       	in	r0, 0x3f	; 63
    33c0:	f8 94       	cli
    33c2:	de bf       	out	0x3e, r29	; 62
    33c4:	0f be       	out	0x3f, r0	; 63
    33c6:	cd bf       	out	0x3d, r28	; 61
    33c8:	cf 91       	pop	r28
    33ca:	df 91       	pop	r29
    33cc:	08 95       	ret

000033ce <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    33ce:	df 93       	push	r29
    33d0:	cf 93       	push	r28
    33d2:	cd b7       	in	r28, 0x3d	; 61
    33d4:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    33d6:	81 e0       	ldi	r24, 0x01	; 1
    33d8:	0e 94 4a 10 	call	0x2094	; 0x2094 <LCD_sendCommand>
}
    33dc:	cf 91       	pop	r28
    33de:	df 91       	pop	r29
    33e0:	08 95       	ret

000033e2 <__vector_7>:

/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/
ISR(TIMER1_COMPA_vect)
{
    33e2:	1f 92       	push	r1
    33e4:	0f 92       	push	r0
    33e6:	0f b6       	in	r0, 0x3f	; 63
    33e8:	0f 92       	push	r0
    33ea:	11 24       	eor	r1, r1
    33ec:	2f 93       	push	r18
    33ee:	3f 93       	push	r19
    33f0:	4f 93       	push	r20
    33f2:	5f 93       	push	r21
    33f4:	6f 93       	push	r22
    33f6:	7f 93       	push	r23
    33f8:	8f 93       	push	r24
    33fa:	9f 93       	push	r25
    33fc:	af 93       	push	r26
    33fe:	bf 93       	push	r27
    3400:	ef 93       	push	r30
    3402:	ff 93       	push	r31
    3404:	df 93       	push	r29
    3406:	cf 93       	push	r28
    3408:	cd b7       	in	r28, 0x3d	; 61
    340a:	de b7       	in	r29, 0x3e	; 62
	if(CallBack_ptr)
    340c:	80 91 75 01 	lds	r24, 0x0175
    3410:	90 91 76 01 	lds	r25, 0x0176
    3414:	00 97       	sbiw	r24, 0x00	; 0
    3416:	29 f0       	breq	.+10     	; 0x3422 <__vector_7+0x40>
	{
		(*CallBack_ptr)();
    3418:	e0 91 75 01 	lds	r30, 0x0175
    341c:	f0 91 76 01 	lds	r31, 0x0176
    3420:	09 95       	icall
	}
}
    3422:	cf 91       	pop	r28
    3424:	df 91       	pop	r29
    3426:	ff 91       	pop	r31
    3428:	ef 91       	pop	r30
    342a:	bf 91       	pop	r27
    342c:	af 91       	pop	r26
    342e:	9f 91       	pop	r25
    3430:	8f 91       	pop	r24
    3432:	7f 91       	pop	r23
    3434:	6f 91       	pop	r22
    3436:	5f 91       	pop	r21
    3438:	4f 91       	pop	r20
    343a:	3f 91       	pop	r19
    343c:	2f 91       	pop	r18
    343e:	0f 90       	pop	r0
    3440:	0f be       	out	0x3f, r0	; 63
    3442:	0f 90       	pop	r0
    3444:	1f 90       	pop	r1
    3446:	18 95       	reti

00003448 <__vector_9>:

ISR(TIMER1_OVF_vect)
{
    3448:	1f 92       	push	r1
    344a:	0f 92       	push	r0
    344c:	0f b6       	in	r0, 0x3f	; 63
    344e:	0f 92       	push	r0
    3450:	11 24       	eor	r1, r1
    3452:	2f 93       	push	r18
    3454:	3f 93       	push	r19
    3456:	4f 93       	push	r20
    3458:	5f 93       	push	r21
    345a:	6f 93       	push	r22
    345c:	7f 93       	push	r23
    345e:	8f 93       	push	r24
    3460:	9f 93       	push	r25
    3462:	af 93       	push	r26
    3464:	bf 93       	push	r27
    3466:	ef 93       	push	r30
    3468:	ff 93       	push	r31
    346a:	df 93       	push	r29
    346c:	cf 93       	push	r28
    346e:	cd b7       	in	r28, 0x3d	; 61
    3470:	de b7       	in	r29, 0x3e	; 62
	if(CallBack_ptr)
    3472:	80 91 75 01 	lds	r24, 0x0175
    3476:	90 91 76 01 	lds	r25, 0x0176
    347a:	00 97       	sbiw	r24, 0x00	; 0
    347c:	29 f0       	breq	.+10     	; 0x3488 <__vector_9+0x40>
	{
		(*CallBack_ptr)();
    347e:	e0 91 75 01 	lds	r30, 0x0175
    3482:	f0 91 76 01 	lds	r31, 0x0176
    3486:	09 95       	icall
	}
}
    3488:	cf 91       	pop	r28
    348a:	df 91       	pop	r29
    348c:	ff 91       	pop	r31
    348e:	ef 91       	pop	r30
    3490:	bf 91       	pop	r27
    3492:	af 91       	pop	r26
    3494:	9f 91       	pop	r25
    3496:	8f 91       	pop	r24
    3498:	7f 91       	pop	r23
    349a:	6f 91       	pop	r22
    349c:	5f 91       	pop	r21
    349e:	4f 91       	pop	r20
    34a0:	3f 91       	pop	r19
    34a2:	2f 91       	pop	r18
    34a4:	0f 90       	pop	r0
    34a6:	0f be       	out	0x3f, r0	; 63
    34a8:	0f 90       	pop	r0
    34aa:	1f 90       	pop	r1
    34ac:	18 95       	reti

000034ae <Timer1_init>:
/*
 * Description :
 * Initializes the Timer driver
 */
void Timer1_init(const Timer1_Config_t * Config_Ptr)
{
    34ae:	df 93       	push	r29
    34b0:	cf 93       	push	r28
    34b2:	00 d0       	rcall	.+0      	; 0x34b4 <Timer1_init+0x6>
    34b4:	00 d0       	rcall	.+0      	; 0x34b6 <Timer1_init+0x8>
    34b6:	cd b7       	in	r28, 0x3d	; 61
    34b8:	de b7       	in	r29, 0x3e	; 62
    34ba:	9a 83       	std	Y+2, r25	; 0x02
    34bc:	89 83       	std	Y+1, r24	; 0x01
	/* 1. Check required timer mode*/
	switch (Config_Ptr->mode)
    34be:	e9 81       	ldd	r30, Y+1	; 0x01
    34c0:	fa 81       	ldd	r31, Y+2	; 0x02
    34c2:	85 81       	ldd	r24, Z+5	; 0x05
    34c4:	28 2f       	mov	r18, r24
    34c6:	30 e0       	ldi	r19, 0x00	; 0
    34c8:	3c 83       	std	Y+4, r19	; 0x04
    34ca:	2b 83       	std	Y+3, r18	; 0x03
    34cc:	8b 81       	ldd	r24, Y+3	; 0x03
    34ce:	9c 81       	ldd	r25, Y+4	; 0x04
    34d0:	00 97       	sbiw	r24, 0x00	; 0
    34d2:	31 f0       	breq	.+12     	; 0x34e0 <Timer1_init+0x32>
    34d4:	2b 81       	ldd	r18, Y+3	; 0x03
    34d6:	3c 81       	ldd	r19, Y+4	; 0x04
    34d8:	21 30       	cpi	r18, 0x01	; 1
    34da:	31 05       	cpc	r19, r1
    34dc:	a9 f0       	breq	.+42     	; 0x3508 <Timer1_init+0x5a>
    34de:	2e c0       	rjmp	.+92     	; 0x353c <Timer1_init+0x8e>
	case TIMER1_NORMAL_MODE:
		/* if normal mode,
		 * 					load required initial value in TCNT1 register,
		 * 					Adjust WGM bits to normal mode
		 * 					enable overflow interrupt */
		TCNT1 = Config_Ptr->initial_value;
    34e0:	ac e4       	ldi	r26, 0x4C	; 76
    34e2:	b0 e0       	ldi	r27, 0x00	; 0
    34e4:	e9 81       	ldd	r30, Y+1	; 0x01
    34e6:	fa 81       	ldd	r31, Y+2	; 0x02
    34e8:	80 81       	ld	r24, Z
    34ea:	91 81       	ldd	r25, Z+1	; 0x01
    34ec:	11 96       	adiw	r26, 0x01	; 1
    34ee:	9c 93       	st	X, r25
    34f0:	8e 93       	st	-X, r24

		TCCR1A = 0; /* noraml mode,  OC1A disconnected */
    34f2:	ef e4       	ldi	r30, 0x4F	; 79
    34f4:	f0 e0       	ldi	r31, 0x00	; 0
    34f6:	10 82       	st	Z, r1

		SET_BIT(TIMSK, TOIE1); /* enable overflow interrupt */
    34f8:	a9 e5       	ldi	r26, 0x59	; 89
    34fa:	b0 e0       	ldi	r27, 0x00	; 0
    34fc:	e9 e5       	ldi	r30, 0x59	; 89
    34fe:	f0 e0       	ldi	r31, 0x00	; 0
    3500:	80 81       	ld	r24, Z
    3502:	84 60       	ori	r24, 0x04	; 4
    3504:	8c 93       	st	X, r24
    3506:	1a c0       	rjmp	.+52     	; 0x353c <Timer1_init+0x8e>
	case TIMER1_CTC_MODE:
		/* if CTC mode,
		 * 				load required compare value in OCR1 register,
		 * 				Adjust WGM bits to CTC mode
		 * 				enable o/p compare match interrupt */
		OCR1A = Config_Ptr->compare_value;
    3508:	aa e4       	ldi	r26, 0x4A	; 74
    350a:	b0 e0       	ldi	r27, 0x00	; 0
    350c:	e9 81       	ldd	r30, Y+1	; 0x01
    350e:	fa 81       	ldd	r31, Y+2	; 0x02
    3510:	82 81       	ldd	r24, Z+2	; 0x02
    3512:	93 81       	ldd	r25, Z+3	; 0x03
    3514:	11 96       	adiw	r26, 0x01	; 1
    3516:	9c 93       	st	X, r25
    3518:	8e 93       	st	-X, r24

		TCCR1A = 0; /* CTC mode,  OC1A disconnected */
    351a:	ef e4       	ldi	r30, 0x4F	; 79
    351c:	f0 e0       	ldi	r31, 0x00	; 0
    351e:	10 82       	st	Z, r1

		SET_BIT(TCCR1B, WGM12);	/* CTC mode: WGM12 bit = 1 */
    3520:	ae e4       	ldi	r26, 0x4E	; 78
    3522:	b0 e0       	ldi	r27, 0x00	; 0
    3524:	ee e4       	ldi	r30, 0x4E	; 78
    3526:	f0 e0       	ldi	r31, 0x00	; 0
    3528:	80 81       	ld	r24, Z
    352a:	88 60       	ori	r24, 0x08	; 8
    352c:	8c 93       	st	X, r24

		SET_BIT(TIMSK, OCIE1A); /* enable o/p compare match flag */
    352e:	a9 e5       	ldi	r26, 0x59	; 89
    3530:	b0 e0       	ldi	r27, 0x00	; 0
    3532:	e9 e5       	ldi	r30, 0x59	; 89
    3534:	f0 e0       	ldi	r31, 0x00	; 0
    3536:	80 81       	ld	r24, Z
    3538:	80 61       	ori	r24, 0x10	; 16
    353a:	8c 93       	st	X, r24
		break;
	}

	/* reset prescaler bits then assign the required prescaler value */
	TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->prescaler);
    353c:	ae e4       	ldi	r26, 0x4E	; 78
    353e:	b0 e0       	ldi	r27, 0x00	; 0
    3540:	ee e4       	ldi	r30, 0x4E	; 78
    3542:	f0 e0       	ldi	r31, 0x00	; 0
    3544:	80 81       	ld	r24, Z
    3546:	98 2f       	mov	r25, r24
    3548:	98 7f       	andi	r25, 0xF8	; 248
    354a:	e9 81       	ldd	r30, Y+1	; 0x01
    354c:	fa 81       	ldd	r31, Y+2	; 0x02
    354e:	84 81       	ldd	r24, Z+4	; 0x04
    3550:	89 2b       	or	r24, r25
    3552:	8c 93       	st	X, r24
}
    3554:	0f 90       	pop	r0
    3556:	0f 90       	pop	r0
    3558:	0f 90       	pop	r0
    355a:	0f 90       	pop	r0
    355c:	cf 91       	pop	r28
    355e:	df 91       	pop	r29
    3560:	08 95       	ret

00003562 <Timer1_deInit>:
/*
 * Description :
 * Disable the Timer driver
 */
void Timer1_deInit(void)
{
    3562:	df 93       	push	r29
    3564:	cf 93       	push	r28
    3566:	cd b7       	in	r28, 0x3d	; 61
    3568:	de b7       	in	r29, 0x3e	; 62
	/* Clear All Timer1 Registers */
	TCCR1A = 0;
    356a:	ef e4       	ldi	r30, 0x4F	; 79
    356c:	f0 e0       	ldi	r31, 0x00	; 0
    356e:	10 82       	st	Z, r1
	TCCR1B = 0;
    3570:	ee e4       	ldi	r30, 0x4E	; 78
    3572:	f0 e0       	ldi	r31, 0x00	; 0
    3574:	10 82       	st	Z, r1
	TCNT1 = 0;
    3576:	ec e4       	ldi	r30, 0x4C	; 76
    3578:	f0 e0       	ldi	r31, 0x00	; 0
    357a:	11 82       	std	Z+1, r1	; 0x01
    357c:	10 82       	st	Z, r1

	/* Clear timer1 used interrupt bits */
	CLEAR_BIT(TIMSK, TOIE1);
    357e:	a9 e5       	ldi	r26, 0x59	; 89
    3580:	b0 e0       	ldi	r27, 0x00	; 0
    3582:	e9 e5       	ldi	r30, 0x59	; 89
    3584:	f0 e0       	ldi	r31, 0x00	; 0
    3586:	80 81       	ld	r24, Z
    3588:	8b 7f       	andi	r24, 0xFB	; 251
    358a:	8c 93       	st	X, r24
	CLEAR_BIT(TIMSK, OCIE1A);
    358c:	a9 e5       	ldi	r26, 0x59	; 89
    358e:	b0 e0       	ldi	r27, 0x00	; 0
    3590:	e9 e5       	ldi	r30, 0x59	; 89
    3592:	f0 e0       	ldi	r31, 0x00	; 0
    3594:	80 81       	ld	r24, Z
    3596:	8f 7e       	andi	r24, 0xEF	; 239
    3598:	8c 93       	st	X, r24
}
    359a:	cf 91       	pop	r28
    359c:	df 91       	pop	r29
    359e:	08 95       	ret

000035a0 <Timer1_setCallBack>:
/*
 * Description :
 * sets the Call Back function address
 */
void Timer1_setCallBack(void(*a_ptr)(void))
{
    35a0:	df 93       	push	r29
    35a2:	cf 93       	push	r28
    35a4:	00 d0       	rcall	.+0      	; 0x35a6 <Timer1_setCallBack+0x6>
    35a6:	cd b7       	in	r28, 0x3d	; 61
    35a8:	de b7       	in	r29, 0x3e	; 62
    35aa:	9a 83       	std	Y+2, r25	; 0x02
    35ac:	89 83       	std	Y+1, r24	; 0x01
	if(a_ptr)
    35ae:	89 81       	ldd	r24, Y+1	; 0x01
    35b0:	9a 81       	ldd	r25, Y+2	; 0x02
    35b2:	00 97       	sbiw	r24, 0x00	; 0
    35b4:	31 f0       	breq	.+12     	; 0x35c2 <Timer1_setCallBack+0x22>
	{
		CallBack_ptr = a_ptr;
    35b6:	89 81       	ldd	r24, Y+1	; 0x01
    35b8:	9a 81       	ldd	r25, Y+2	; 0x02
    35ba:	90 93 76 01 	sts	0x0176, r25
    35be:	80 93 75 01 	sts	0x0175, r24
	}
	else
	{
		//a_ptr is null (error)
	}
}
    35c2:	0f 90       	pop	r0
    35c4:	0f 90       	pop	r0
    35c6:	cf 91       	pop	r28
    35c8:	df 91       	pop	r29
    35ca:	08 95       	ret

000035cc <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(UART_Config_t * config)
{
    35cc:	df 93       	push	r29
    35ce:	cf 93       	push	r28
    35d0:	00 d0       	rcall	.+0      	; 0x35d2 <UART_init+0x6>
    35d2:	00 d0       	rcall	.+0      	; 0x35d4 <UART_init+0x8>
    35d4:	cd b7       	in	r28, 0x3d	; 61
    35d6:	de b7       	in	r29, 0x3e	; 62
    35d8:	9c 83       	std	Y+4, r25	; 0x04
    35da:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    35dc:	1a 82       	std	Y+2, r1	; 0x02
    35de:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    35e0:	eb e2       	ldi	r30, 0x2B	; 43
    35e2:	f0 e0       	ldi	r31, 0x00	; 0
    35e4:	82 e0       	ldi	r24, 0x02	; 2
    35e6:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    35e8:	ea e2       	ldi	r30, 0x2A	; 42
    35ea:	f0 e0       	ldi	r31, 0x00	; 0
    35ec:	88 e1       	ldi	r24, 0x18	; 24
    35ee:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 -> 1-Stop Bit || 1 -> 2-Stop Bits
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (config->bit_data << 1) | (config->parity << 4) | (config->stop_bit << 3);
    35f0:	a0 e4       	ldi	r26, 0x40	; 64
    35f2:	b0 e0       	ldi	r27, 0x00	; 0
    35f4:	eb 81       	ldd	r30, Y+3	; 0x03
    35f6:	fc 81       	ldd	r31, Y+4	; 0x04
    35f8:	80 81       	ld	r24, Z
    35fa:	88 2f       	mov	r24, r24
    35fc:	90 e0       	ldi	r25, 0x00	; 0
    35fe:	88 0f       	add	r24, r24
    3600:	99 1f       	adc	r25, r25
    3602:	28 2f       	mov	r18, r24
    3604:	20 68       	ori	r18, 0x80	; 128
    3606:	eb 81       	ldd	r30, Y+3	; 0x03
    3608:	fc 81       	ldd	r31, Y+4	; 0x04
    360a:	81 81       	ldd	r24, Z+1	; 0x01
    360c:	88 2f       	mov	r24, r24
    360e:	90 e0       	ldi	r25, 0x00	; 0
    3610:	82 95       	swap	r24
    3612:	92 95       	swap	r25
    3614:	90 7f       	andi	r25, 0xF0	; 240
    3616:	98 27       	eor	r25, r24
    3618:	80 7f       	andi	r24, 0xF0	; 240
    361a:	98 27       	eor	r25, r24
    361c:	28 2b       	or	r18, r24
    361e:	eb 81       	ldd	r30, Y+3	; 0x03
    3620:	fc 81       	ldd	r31, Y+4	; 0x04
    3622:	82 81       	ldd	r24, Z+2	; 0x02
    3624:	88 2f       	mov	r24, r24
    3626:	90 e0       	ldi	r25, 0x00	; 0
    3628:	88 0f       	add	r24, r24
    362a:	99 1f       	adc	r25, r25
    362c:	88 0f       	add	r24, r24
    362e:	99 1f       	adc	r25, r25
    3630:	88 0f       	add	r24, r24
    3632:	99 1f       	adc	r25, r25
    3634:	82 2b       	or	r24, r18
    3636:	8c 93       	st	X, r24
	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (config->baud_rate * 8UL))) - 1);
    3638:	eb 81       	ldd	r30, Y+3	; 0x03
    363a:	fc 81       	ldd	r31, Y+4	; 0x04
    363c:	83 81       	ldd	r24, Z+3	; 0x03
    363e:	94 81       	ldd	r25, Z+4	; 0x04
    3640:	cc 01       	movw	r24, r24
    3642:	a0 e0       	ldi	r26, 0x00	; 0
    3644:	b0 e0       	ldi	r27, 0x00	; 0
    3646:	88 0f       	add	r24, r24
    3648:	99 1f       	adc	r25, r25
    364a:	aa 1f       	adc	r26, r26
    364c:	bb 1f       	adc	r27, r27
    364e:	88 0f       	add	r24, r24
    3650:	99 1f       	adc	r25, r25
    3652:	aa 1f       	adc	r26, r26
    3654:	bb 1f       	adc	r27, r27
    3656:	88 0f       	add	r24, r24
    3658:	99 1f       	adc	r25, r25
    365a:	aa 1f       	adc	r26, r26
    365c:	bb 1f       	adc	r27, r27
    365e:	9c 01       	movw	r18, r24
    3660:	ad 01       	movw	r20, r26
    3662:	80 e0       	ldi	r24, 0x00	; 0
    3664:	92 e1       	ldi	r25, 0x12	; 18
    3666:	aa e7       	ldi	r26, 0x7A	; 122
    3668:	b0 e0       	ldi	r27, 0x00	; 0
    366a:	bc 01       	movw	r22, r24
    366c:	cd 01       	movw	r24, r26
    366e:	0e 94 e5 1b 	call	0x37ca	; 0x37ca <__udivmodsi4>
    3672:	da 01       	movw	r26, r20
    3674:	c9 01       	movw	r24, r18
    3676:	01 97       	sbiw	r24, 0x01	; 1
    3678:	9a 83       	std	Y+2, r25	; 0x02
    367a:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    367c:	e0 e4       	ldi	r30, 0x40	; 64
    367e:	f0 e0       	ldi	r31, 0x00	; 0
    3680:	89 81       	ldd	r24, Y+1	; 0x01
    3682:	9a 81       	ldd	r25, Y+2	; 0x02
    3684:	89 2f       	mov	r24, r25
    3686:	99 27       	eor	r25, r25
    3688:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    368a:	e9 e2       	ldi	r30, 0x29	; 41
    368c:	f0 e0       	ldi	r31, 0x00	; 0
    368e:	89 81       	ldd	r24, Y+1	; 0x01
    3690:	80 83       	st	Z, r24
}
    3692:	0f 90       	pop	r0
    3694:	0f 90       	pop	r0
    3696:	0f 90       	pop	r0
    3698:	0f 90       	pop	r0
    369a:	cf 91       	pop	r28
    369c:	df 91       	pop	r29
    369e:	08 95       	ret

000036a0 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    36a0:	df 93       	push	r29
    36a2:	cf 93       	push	r28
    36a4:	0f 92       	push	r0
    36a6:	cd b7       	in	r28, 0x3d	; 61
    36a8:	de b7       	in	r29, 0x3e	; 62
    36aa:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    36ac:	eb e2       	ldi	r30, 0x2B	; 43
    36ae:	f0 e0       	ldi	r31, 0x00	; 0
    36b0:	80 81       	ld	r24, Z
    36b2:	88 2f       	mov	r24, r24
    36b4:	90 e0       	ldi	r25, 0x00	; 0
    36b6:	80 72       	andi	r24, 0x20	; 32
    36b8:	90 70       	andi	r25, 0x00	; 0
    36ba:	00 97       	sbiw	r24, 0x00	; 0
    36bc:	b9 f3       	breq	.-18     	; 0x36ac <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    36be:	ec e2       	ldi	r30, 0x2C	; 44
    36c0:	f0 e0       	ldi	r31, 0x00	; 0
    36c2:	89 81       	ldd	r24, Y+1	; 0x01
    36c4:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    36c6:	0f 90       	pop	r0
    36c8:	cf 91       	pop	r28
    36ca:	df 91       	pop	r29
    36cc:	08 95       	ret

000036ce <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    36ce:	df 93       	push	r29
    36d0:	cf 93       	push	r28
    36d2:	cd b7       	in	r28, 0x3d	; 61
    36d4:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    36d6:	eb e2       	ldi	r30, 0x2B	; 43
    36d8:	f0 e0       	ldi	r31, 0x00	; 0
    36da:	80 81       	ld	r24, Z
    36dc:	88 23       	and	r24, r24
    36de:	dc f7       	brge	.-10     	; 0x36d6 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    36e0:	ec e2       	ldi	r30, 0x2C	; 44
    36e2:	f0 e0       	ldi	r31, 0x00	; 0
    36e4:	80 81       	ld	r24, Z
}
    36e6:	cf 91       	pop	r28
    36e8:	df 91       	pop	r29
    36ea:	08 95       	ret

000036ec <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    36ec:	df 93       	push	r29
    36ee:	cf 93       	push	r28
    36f0:	00 d0       	rcall	.+0      	; 0x36f2 <UART_sendString+0x6>
    36f2:	0f 92       	push	r0
    36f4:	cd b7       	in	r28, 0x3d	; 61
    36f6:	de b7       	in	r29, 0x3e	; 62
    36f8:	9b 83       	std	Y+3, r25	; 0x03
    36fa:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    36fc:	19 82       	std	Y+1, r1	; 0x01
    36fe:	0e c0       	rjmp	.+28     	; 0x371c <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    3700:	89 81       	ldd	r24, Y+1	; 0x01
    3702:	28 2f       	mov	r18, r24
    3704:	30 e0       	ldi	r19, 0x00	; 0
    3706:	8a 81       	ldd	r24, Y+2	; 0x02
    3708:	9b 81       	ldd	r25, Y+3	; 0x03
    370a:	fc 01       	movw	r30, r24
    370c:	e2 0f       	add	r30, r18
    370e:	f3 1f       	adc	r31, r19
    3710:	80 81       	ld	r24, Z
    3712:	0e 94 50 1b 	call	0x36a0	; 0x36a0 <UART_sendByte>
		i++;
    3716:	89 81       	ldd	r24, Y+1	; 0x01
    3718:	8f 5f       	subi	r24, 0xFF	; 255
    371a:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    371c:	89 81       	ldd	r24, Y+1	; 0x01
    371e:	28 2f       	mov	r18, r24
    3720:	30 e0       	ldi	r19, 0x00	; 0
    3722:	8a 81       	ldd	r24, Y+2	; 0x02
    3724:	9b 81       	ldd	r25, Y+3	; 0x03
    3726:	fc 01       	movw	r30, r24
    3728:	e2 0f       	add	r30, r18
    372a:	f3 1f       	adc	r31, r19
    372c:	80 81       	ld	r24, Z
    372e:	88 23       	and	r24, r24
    3730:	39 f7       	brne	.-50     	; 0x3700 <UART_sendString+0x14>
	{
		UART_sendByte(Str[i]);
		i++;
	}

	UART_sendByte('#');
    3732:	83 e2       	ldi	r24, 0x23	; 35
    3734:	0e 94 50 1b 	call	0x36a0	; 0x36a0 <UART_sendByte>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    3738:	0f 90       	pop	r0
    373a:	0f 90       	pop	r0
    373c:	0f 90       	pop	r0
    373e:	cf 91       	pop	r28
    3740:	df 91       	pop	r29
    3742:	08 95       	ret

00003744 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    3744:	0f 93       	push	r16
    3746:	1f 93       	push	r17
    3748:	df 93       	push	r29
    374a:	cf 93       	push	r28
    374c:	00 d0       	rcall	.+0      	; 0x374e <UART_receiveString+0xa>
    374e:	0f 92       	push	r0
    3750:	cd b7       	in	r28, 0x3d	; 61
    3752:	de b7       	in	r29, 0x3e	; 62
    3754:	9b 83       	std	Y+3, r25	; 0x03
    3756:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3758:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    375a:	89 81       	ldd	r24, Y+1	; 0x01
    375c:	28 2f       	mov	r18, r24
    375e:	30 e0       	ldi	r19, 0x00	; 0
    3760:	8a 81       	ldd	r24, Y+2	; 0x02
    3762:	9b 81       	ldd	r25, Y+3	; 0x03
    3764:	8c 01       	movw	r16, r24
    3766:	02 0f       	add	r16, r18
    3768:	13 1f       	adc	r17, r19
    376a:	0e 94 67 1b 	call	0x36ce	; 0x36ce <UART_recieveByte>
    376e:	f8 01       	movw	r30, r16
    3770:	80 83       	st	Z, r24
    3772:	0f c0       	rjmp	.+30     	; 0x3792 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    3774:	89 81       	ldd	r24, Y+1	; 0x01
    3776:	8f 5f       	subi	r24, 0xFF	; 255
    3778:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    377a:	89 81       	ldd	r24, Y+1	; 0x01
    377c:	28 2f       	mov	r18, r24
    377e:	30 e0       	ldi	r19, 0x00	; 0
    3780:	8a 81       	ldd	r24, Y+2	; 0x02
    3782:	9b 81       	ldd	r25, Y+3	; 0x03
    3784:	8c 01       	movw	r16, r24
    3786:	02 0f       	add	r16, r18
    3788:	13 1f       	adc	r17, r19
    378a:	0e 94 67 1b 	call	0x36ce	; 0x36ce <UART_recieveByte>
    378e:	f8 01       	movw	r30, r16
    3790:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    3792:	89 81       	ldd	r24, Y+1	; 0x01
    3794:	28 2f       	mov	r18, r24
    3796:	30 e0       	ldi	r19, 0x00	; 0
    3798:	8a 81       	ldd	r24, Y+2	; 0x02
    379a:	9b 81       	ldd	r25, Y+3	; 0x03
    379c:	fc 01       	movw	r30, r24
    379e:	e2 0f       	add	r30, r18
    37a0:	f3 1f       	adc	r31, r19
    37a2:	80 81       	ld	r24, Z
    37a4:	83 32       	cpi	r24, 0x23	; 35
    37a6:	31 f7       	brne	.-52     	; 0x3774 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    37a8:	89 81       	ldd	r24, Y+1	; 0x01
    37aa:	28 2f       	mov	r18, r24
    37ac:	30 e0       	ldi	r19, 0x00	; 0
    37ae:	8a 81       	ldd	r24, Y+2	; 0x02
    37b0:	9b 81       	ldd	r25, Y+3	; 0x03
    37b2:	fc 01       	movw	r30, r24
    37b4:	e2 0f       	add	r30, r18
    37b6:	f3 1f       	adc	r31, r19
    37b8:	10 82       	st	Z, r1
}
    37ba:	0f 90       	pop	r0
    37bc:	0f 90       	pop	r0
    37be:	0f 90       	pop	r0
    37c0:	cf 91       	pop	r28
    37c2:	df 91       	pop	r29
    37c4:	1f 91       	pop	r17
    37c6:	0f 91       	pop	r16
    37c8:	08 95       	ret

000037ca <__udivmodsi4>:
    37ca:	a1 e2       	ldi	r26, 0x21	; 33
    37cc:	1a 2e       	mov	r1, r26
    37ce:	aa 1b       	sub	r26, r26
    37d0:	bb 1b       	sub	r27, r27
    37d2:	fd 01       	movw	r30, r26
    37d4:	0d c0       	rjmp	.+26     	; 0x37f0 <__udivmodsi4_ep>

000037d6 <__udivmodsi4_loop>:
    37d6:	aa 1f       	adc	r26, r26
    37d8:	bb 1f       	adc	r27, r27
    37da:	ee 1f       	adc	r30, r30
    37dc:	ff 1f       	adc	r31, r31
    37de:	a2 17       	cp	r26, r18
    37e0:	b3 07       	cpc	r27, r19
    37e2:	e4 07       	cpc	r30, r20
    37e4:	f5 07       	cpc	r31, r21
    37e6:	20 f0       	brcs	.+8      	; 0x37f0 <__udivmodsi4_ep>
    37e8:	a2 1b       	sub	r26, r18
    37ea:	b3 0b       	sbc	r27, r19
    37ec:	e4 0b       	sbc	r30, r20
    37ee:	f5 0b       	sbc	r31, r21

000037f0 <__udivmodsi4_ep>:
    37f0:	66 1f       	adc	r22, r22
    37f2:	77 1f       	adc	r23, r23
    37f4:	88 1f       	adc	r24, r24
    37f6:	99 1f       	adc	r25, r25
    37f8:	1a 94       	dec	r1
    37fa:	69 f7       	brne	.-38     	; 0x37d6 <__udivmodsi4_loop>
    37fc:	60 95       	com	r22
    37fe:	70 95       	com	r23
    3800:	80 95       	com	r24
    3802:	90 95       	com	r25
    3804:	9b 01       	movw	r18, r22
    3806:	ac 01       	movw	r20, r24
    3808:	bd 01       	movw	r22, r26
    380a:	cf 01       	movw	r24, r30
    380c:	08 95       	ret

0000380e <__prologue_saves__>:
    380e:	2f 92       	push	r2
    3810:	3f 92       	push	r3
    3812:	4f 92       	push	r4
    3814:	5f 92       	push	r5
    3816:	6f 92       	push	r6
    3818:	7f 92       	push	r7
    381a:	8f 92       	push	r8
    381c:	9f 92       	push	r9
    381e:	af 92       	push	r10
    3820:	bf 92       	push	r11
    3822:	cf 92       	push	r12
    3824:	df 92       	push	r13
    3826:	ef 92       	push	r14
    3828:	ff 92       	push	r15
    382a:	0f 93       	push	r16
    382c:	1f 93       	push	r17
    382e:	cf 93       	push	r28
    3830:	df 93       	push	r29
    3832:	cd b7       	in	r28, 0x3d	; 61
    3834:	de b7       	in	r29, 0x3e	; 62
    3836:	ca 1b       	sub	r28, r26
    3838:	db 0b       	sbc	r29, r27
    383a:	0f b6       	in	r0, 0x3f	; 63
    383c:	f8 94       	cli
    383e:	de bf       	out	0x3e, r29	; 62
    3840:	0f be       	out	0x3f, r0	; 63
    3842:	cd bf       	out	0x3d, r28	; 61
    3844:	09 94       	ijmp

00003846 <__epilogue_restores__>:
    3846:	2a 88       	ldd	r2, Y+18	; 0x12
    3848:	39 88       	ldd	r3, Y+17	; 0x11
    384a:	48 88       	ldd	r4, Y+16	; 0x10
    384c:	5f 84       	ldd	r5, Y+15	; 0x0f
    384e:	6e 84       	ldd	r6, Y+14	; 0x0e
    3850:	7d 84       	ldd	r7, Y+13	; 0x0d
    3852:	8c 84       	ldd	r8, Y+12	; 0x0c
    3854:	9b 84       	ldd	r9, Y+11	; 0x0b
    3856:	aa 84       	ldd	r10, Y+10	; 0x0a
    3858:	b9 84       	ldd	r11, Y+9	; 0x09
    385a:	c8 84       	ldd	r12, Y+8	; 0x08
    385c:	df 80       	ldd	r13, Y+7	; 0x07
    385e:	ee 80       	ldd	r14, Y+6	; 0x06
    3860:	fd 80       	ldd	r15, Y+5	; 0x05
    3862:	0c 81       	ldd	r16, Y+4	; 0x04
    3864:	1b 81       	ldd	r17, Y+3	; 0x03
    3866:	aa 81       	ldd	r26, Y+2	; 0x02
    3868:	b9 81       	ldd	r27, Y+1	; 0x01
    386a:	ce 0f       	add	r28, r30
    386c:	d1 1d       	adc	r29, r1
    386e:	0f b6       	in	r0, 0x3f	; 63
    3870:	f8 94       	cli
    3872:	de bf       	out	0x3e, r29	; 62
    3874:	0f be       	out	0x3f, r0	; 63
    3876:	cd bf       	out	0x3d, r28	; 61
    3878:	ed 01       	movw	r28, r26
    387a:	08 95       	ret

0000387c <itoa>:
    387c:	fb 01       	movw	r30, r22
    387e:	9f 01       	movw	r18, r30
    3880:	e8 94       	clt
    3882:	42 30       	cpi	r20, 0x02	; 2
    3884:	c4 f0       	brlt	.+48     	; 0x38b6 <itoa+0x3a>
    3886:	45 32       	cpi	r20, 0x25	; 37
    3888:	b4 f4       	brge	.+44     	; 0x38b6 <itoa+0x3a>
    388a:	4a 30       	cpi	r20, 0x0A	; 10
    388c:	29 f4       	brne	.+10     	; 0x3898 <itoa+0x1c>
    388e:	97 fb       	bst	r25, 7
    3890:	1e f4       	brtc	.+6      	; 0x3898 <itoa+0x1c>
    3892:	90 95       	com	r25
    3894:	81 95       	neg	r24
    3896:	9f 4f       	sbci	r25, 0xFF	; 255
    3898:	64 2f       	mov	r22, r20
    389a:	77 27       	eor	r23, r23
    389c:	0e 94 6f 1c 	call	0x38de	; 0x38de <__udivmodhi4>
    38a0:	80 5d       	subi	r24, 0xD0	; 208
    38a2:	8a 33       	cpi	r24, 0x3A	; 58
    38a4:	0c f0       	brlt	.+2      	; 0x38a8 <itoa+0x2c>
    38a6:	89 5d       	subi	r24, 0xD9	; 217
    38a8:	81 93       	st	Z+, r24
    38aa:	cb 01       	movw	r24, r22
    38ac:	00 97       	sbiw	r24, 0x00	; 0
    38ae:	a1 f7       	brne	.-24     	; 0x3898 <itoa+0x1c>
    38b0:	16 f4       	brtc	.+4      	; 0x38b6 <itoa+0x3a>
    38b2:	5d e2       	ldi	r21, 0x2D	; 45
    38b4:	51 93       	st	Z+, r21
    38b6:	10 82       	st	Z, r1
    38b8:	c9 01       	movw	r24, r18
    38ba:	0c 94 5f 1c 	jmp	0x38be	; 0x38be <strrev>

000038be <strrev>:
    38be:	dc 01       	movw	r26, r24
    38c0:	fc 01       	movw	r30, r24
    38c2:	67 2f       	mov	r22, r23
    38c4:	71 91       	ld	r23, Z+
    38c6:	77 23       	and	r23, r23
    38c8:	e1 f7       	brne	.-8      	; 0x38c2 <strrev+0x4>
    38ca:	32 97       	sbiw	r30, 0x02	; 2
    38cc:	04 c0       	rjmp	.+8      	; 0x38d6 <strrev+0x18>
    38ce:	7c 91       	ld	r23, X
    38d0:	6d 93       	st	X+, r22
    38d2:	70 83       	st	Z, r23
    38d4:	62 91       	ld	r22, -Z
    38d6:	ae 17       	cp	r26, r30
    38d8:	bf 07       	cpc	r27, r31
    38da:	c8 f3       	brcs	.-14     	; 0x38ce <strrev+0x10>
    38dc:	08 95       	ret

000038de <__udivmodhi4>:
    38de:	aa 1b       	sub	r26, r26
    38e0:	bb 1b       	sub	r27, r27
    38e2:	51 e1       	ldi	r21, 0x11	; 17
    38e4:	07 c0       	rjmp	.+14     	; 0x38f4 <__udivmodhi4_ep>

000038e6 <__udivmodhi4_loop>:
    38e6:	aa 1f       	adc	r26, r26
    38e8:	bb 1f       	adc	r27, r27
    38ea:	a6 17       	cp	r26, r22
    38ec:	b7 07       	cpc	r27, r23
    38ee:	10 f0       	brcs	.+4      	; 0x38f4 <__udivmodhi4_ep>
    38f0:	a6 1b       	sub	r26, r22
    38f2:	b7 0b       	sbc	r27, r23

000038f4 <__udivmodhi4_ep>:
    38f4:	88 1f       	adc	r24, r24
    38f6:	99 1f       	adc	r25, r25
    38f8:	5a 95       	dec	r21
    38fa:	a9 f7       	brne	.-22     	; 0x38e6 <__udivmodhi4_loop>
    38fc:	80 95       	com	r24
    38fe:	90 95       	com	r25
    3900:	bc 01       	movw	r22, r24
    3902:	cd 01       	movw	r24, r26
    3904:	08 95       	ret

00003906 <_exit>:
    3906:	f8 94       	cli

00003908 <__stop_program>:
    3908:	ff cf       	rjmp	.-2      	; 0x3908 <__stop_program>
